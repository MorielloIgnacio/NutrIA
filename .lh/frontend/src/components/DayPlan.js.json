{
    "sourceFile": "frontend/src/components/DayPlan.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1730734249235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730755165594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+// frontend/components/DayPlan.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      // Busca los datos espec√≠ficos del d√≠a en plan.dias\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+\r\n+      if (selectedDayData) {\r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            time: '', // Puedes asignar horarios si lo deseas\r\n+            completed: false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            time: '', // Puedes asignar horarios si lo deseas\r\n+            completed: false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+\r\n+        setDayData(dayData);\r\n+      } else {\r\n+        console.warn(`No se encontraron datos para el d√≠a ${dayNumber}`);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      return { ...prevData, [type]: updatedItems };\r\n+    });\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      {/* Secci√≥n de Comidas */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p className=\"item-time\">{meal.time}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Secci√≥n de Ejercicios */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p className=\"item-time\">{exercise.time}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Secci√≥n de Feedback */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Feedback</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{meal.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={meal.completed}\r\n+                  onChange={() => handleToggle('meals', meal.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{exercise.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={exercise.completed}\r\n+                  onChange={() => handleToggle('exercises', exercise.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Botones */}\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar cambios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1730755372769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,143 @@\n+// frontend/components/DayPlan.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      // Busca los datos espec√≠ficos del d√≠a en plan.dias\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+\r\n+      if (selectedDayData) {\r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            time: '', // Puedes asignar horarios si lo deseas\r\n+            completed: false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            time: '', // Puedes asignar horarios si lo deseas\r\n+            completed: false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+\r\n+        setDayData(dayData);\r\n+      } else {\r\n+        console.warn(`No se encontraron datos para el d√≠a ${dayNumber}`);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      return { ...prevData, [type]: updatedItems };\r\n+    });\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      {/* Secci√≥n de Comidas */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p className=\"item-time\">{meal.time}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Secci√≥n de Ejercicios */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p className=\"item-time\">{exercise.time}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+                <img src={exercise.details.gifUrl} alt={exercise.name} className=\"exercise-gif\" />\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Secci√≥n de Feedback */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Feedback</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{meal.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={meal.completed}\r\n+                  onChange={() => handleToggle('meals', meal.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{exercise.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={exercise.completed}\r\n+                  onChange={() => handleToggle('exercises', exercise.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Botones */}\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar cambios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1730755559971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+// frontend/components/DayPlan.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+\r\n+      if (selectedDayData) {\r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+\r\n+        setDayData(dayData);\r\n+      } else {\r\n+        console.warn(`No se encontraron datos para el d√≠a ${dayNumber}`);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      return { ...prevData, [type]: updatedItems };\r\n+    });\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      {/* Secci√≥n de Comidas */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p className=\"item-time\">{meal.time}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Secci√≥n de Ejercicios */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p className=\"item-time\">{exercise.time}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+                {/* Verificaci√≥n de gifUrl y carga del GIF */}\r\n+                {exercise.details.gifUrl ? (\r\n+                  <img \r\n+                    src={exercise.details.gifUrl} \r\n+                    alt={exercise.name} \r\n+                    className=\"exercise-gif\" \r\n+                    onError={(e) => e.target.style.display = 'none'}\r\n+                  />\r\n+                ) : (\r\n+                  <p>GIF no disponible</p>\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Secci√≥n de Feedback */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Feedback</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{meal.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={meal.completed}\r\n+                  onChange={() => handleToggle('meals', meal.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{exercise.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={exercise.completed}\r\n+                  onChange={() => handleToggle('exercises', exercise.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Botones */}\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar cambios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1730755662438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+// frontend/components/DayPlan.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+\r\n+      if (selectedDayData && selectedDayData.recetas && selectedDayData.ejercicios) {\r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+\r\n+        setDayData(dayData);\r\n+      } else {\r\n+        console.warn(`No se encontraron datos completos para el d√≠a ${dayNumber}`);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      return { ...prevData, [type]: updatedItems };\r\n+    });\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      {/* Secci√≥n de Comidas */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p className=\"item-time\">{meal.time}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Secci√≥n de Ejercicios */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p className=\"item-time\">{exercise.time}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+                {exercise.details.gifUrl ? (\r\n+                  <img \r\n+                    src={exercise.details.gifUrl} \r\n+                    alt={exercise.name} \r\n+                    className=\"exercise-gif\" \r\n+                    onError={(e) => e.target.style.display = 'none'}\r\n+                  />\r\n+                ) : (\r\n+                  <p>GIF no disponible</p>\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Secci√≥n de Feedback */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Feedback</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{meal.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={meal.completed}\r\n+                  onChange={() => handleToggle('meals', meal.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{exercise.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={exercise.completed}\r\n+                  onChange={() => handleToggle('exercises', exercise.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Botones */}\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar cambios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1730755705372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,151 @@\n+// frontend/components/DayPlan.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+\r\n+      if (selectedDayData && selectedDayData.recetas && selectedDayData.ejercicios) {\r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+\r\n+        setDayData(dayData);\r\n+      } else {\r\n+        console.warn(`No se encontraron datos completos para el d√≠a ${dayNumber}`);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      return { ...prevData, [type]: updatedItems };\r\n+    });\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      {/* Secci√≥n de Comidas */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p className=\"item-time\">{meal.time}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Secci√≥n de Ejercicios */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p className=\"item-time\">{exercise.time}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+                {exercise.details.gifUrl ? (\r\n+                  <img \r\n+                    src={exercise.details.gifUrl} \r\n+                    alt={exercise.name} \r\n+                    className=\"exercise-gif\" \r\n+                    onError={(e) => e.target.style.display = 'none'}\r\n+                  />\r\n+                ) : (\r\n+                  <p>GIF no disponible</p>\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Secci√≥n de Feedback */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Feedback</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{meal.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={meal.completed}\r\n+                  onChange={() => handleToggle('meals', meal.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{exercise.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={exercise.completed}\r\n+                  onChange={() => handleToggle('exercises', exercise.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Botones */}\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar cambios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1730774068999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+// frontend/components/DayPlan.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+      if (selectedDayData) {\r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+        setDayData(dayData);\r\n+      } else {\r\n+        console.warn(`No se encontraron datos completos para el d√≠a ${dayNumber}`);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      return { ...prevData, [type]: updatedItems };\r\n+    });\r\n+  };\r\n+\r\n+  const onSaveChanges = () => {\r\n+    fetch('/update_progress', {\r\n+      method: 'POST',\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+      },\r\n+      body: JSON.stringify(dayData),\r\n+    })\r\n+    .then(response => response.json())\r\n+    .then(data => {\r\n+      console.log('Progress saved:', data);\r\n+      alert('Progreso guardado con √©xito');\r\n+    })\r\n+    .catch(error => {\r\n+      console.error('Error saving progress:', error);\r\n+    });\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+                {exercise.details.gifUrl ? (\r\n+                  <img \r\n+                    src={exercise.details.gifUrl} \r\n+                    alt={exercise.name} \r\n+                    className=\"exercise-gif\" \r\n+                    onError={(e) => e.target.style.display = 'none'}\r\n+                  />\r\n+                ) : (\r\n+                  <p>GIF no disponible</p>\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Feedback</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{meal.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={meal.completed}\r\n+                  onChange={() => handleToggle('meals', meal.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{exercise.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={exercise.completed}\r\n+                  onChange={() => handleToggle('exercises', exercise.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar cambios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1730777096236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,177 @@\n+// frontend/components/DayPlan.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [isCompleted, setIsCompleted] = useState(false); // Nuevo estado para verificar completado\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+      if (selectedDayData) {\r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+        setDayData(dayData);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  // Verificar si todas las comidas y ejercicios est√°n completos\r\n+  useEffect(() => {\r\n+    if (dayData) {\r\n+      const allCompleted = [...dayData.meals, ...dayData.exercises].every(item => item.completed);\r\n+      setIsCompleted(allCompleted);\r\n+    }\r\n+  }, [dayData]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      return { ...prevData, [type]: updatedItems };\r\n+    });\r\n+  };\r\n+\r\n+  const onSaveChanges = () => {\r\n+    if (isCompleted) {\r\n+      // Aqu√≠ actualizar√≠as el progreso en el backend\r\n+      fetch('/update_progress', {\r\n+        method: 'POST',\r\n+        headers: {\r\n+          'Content-Type': 'application/json',\r\n+        },\r\n+        body: JSON.stringify({ dayNumber, completed: true }),\r\n+      })\r\n+      .then(response => response.json())\r\n+      .then(data => {\r\n+        alert('D√≠a completado. El progreso se ha guardado.');\r\n+        onEndDay(); // Notificar que el d√≠a se complet√≥\r\n+      })\r\n+      .catch(error => {\r\n+        console.error('Error saving progress:', error);\r\n+      });\r\n+    } else {\r\n+      alert('Debes completar todas las tareas del d√≠a antes de guardar.');\r\n+    }\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      {/* Comidas */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Ejercicios */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+                {exercise.details.gifUrl ? (\r\n+                  <img \r\n+                    src={exercise.details.gifUrl} \r\n+                    alt={exercise.name} \r\n+                    className=\"exercise-gif\" \r\n+                    onError={(e) => e.target.style.display = 'none'}\r\n+                  />\r\n+                ) : (\r\n+                  <p>GIF no disponible</p>\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Feedback y guardar progreso */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Feedback</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{meal.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={meal.completed}\r\n+                  onChange={() => handleToggle('meals', meal.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{exercise.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={exercise.completed}\r\n+                  onChange={() => handleToggle('exercises', exercise.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Botones */}\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar cambios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1730777326646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+// frontend/components/DayPlan.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [isCompleted, setIsCompleted] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+      if (selectedDayData) {\r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+        setDayData(dayData);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  // Verificar si todas las comidas y ejercicios est√°n completos\r\n+  useEffect(() => {\r\n+    if (dayData) {\r\n+      const allCompleted = [...dayData.meals, ...dayData.exercises].every(item => item.completed);\r\n+      setIsCompleted(allCompleted);\r\n+    }\r\n+  }, [dayData]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      return { ...prevData, [type]: updatedItems };\r\n+    });\r\n+  };\r\n+\r\n+  const onSaveChanges = () => {\r\n+    if (isCompleted) {\r\n+      // Marcar d√≠a como completado y actualizar backend\r\n+      fetch('/update_progress', {\r\n+        method: 'POST',\r\n+        headers: {\r\n+          'Content-Type': 'application/json',\r\n+        },\r\n+        body: JSON.stringify({ dayNumber, completed: true }),\r\n+      })\r\n+      .then(response => response.json())\r\n+      .then(data => {\r\n+        alert('D√≠a completado. El progreso se ha guardado.');\r\n+        onEndDay(); // Notificar que el d√≠a se complet√≥\r\n+      })\r\n+      .catch(error => {\r\n+        console.error('Error saving progress:', error);\r\n+      });\r\n+    } else {\r\n+      alert('Debes completar todas las tareas del d√≠a antes de guardar.');\r\n+    }\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      {/* Comidas */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Ejercicios */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+                {exercise.details.gifUrl ? (\r\n+                  <img \r\n+                    src={exercise.details.gifUrl} \r\n+                    alt={exercise.name} \r\n+                    className=\"exercise-gif\" \r\n+                    onError={(e) => e.target.style.display = 'none'}\r\n+                  />\r\n+                ) : (\r\n+                  <p>GIF no disponible</p>\r\n+                )}\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      {/* Feedback */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Feedback</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{meal.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={meal.completed}\r\n+                  onChange={() => handleToggle('meals', meal.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"feedback-item\">\r\n+              <p className=\"feedback-name\">{exercise.name}</p>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={exercise.completed}\r\n+                  onChange={() => handleToggle('exercises', exercise.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar cambios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1730777473875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+// frontend/components/NutritionPlan.js\r\n+import React, { useEffect, useState } from 'react';\r\n+\r\n+const NutritionPlan = ({ plan, onStartDay, onDeletePlan }) => {\r\n+    const [completedDays, setCompletedDays] = useState([]);\r\n+    const [selectedDay, setSelectedDay] = useState(null); // D√≠a inicial seleccionado\r\n+    const [currentDay, setCurrentDay] = useState(new Date().getDate());\r\n+\r\n+    useEffect(() => {\r\n+        // Cargar d√≠as completados y d√≠a inicial guardado\r\n+        fetch('/get_completed_days')\r\n+            .then(response => response.json())\r\n+            .then(data => {\r\n+                setCompletedDays(data.completedDays || []);\r\n+                setSelectedDay(data.selectedDay || null); // Cargar d√≠a inicial\r\n+            });\r\n+    }, []);\r\n+\r\n+    const handleSelectInitialDay = (day) => {\r\n+        setSelectedDay(day);\r\n+        fetch('/set_initial_day', {\r\n+            method: 'POST',\r\n+            headers: { 'Content-Type': 'application/json' },\r\n+            body: JSON.stringify({ day })\r\n+        });\r\n+    };\r\n+\r\n+    const canAccessDay = (day) => {\r\n+        const lastCompleted = Math.max(0, ...completedDays);\r\n+        const isMidnightPassed = new Date().getHours() >= 0;\r\n+        return day === selectedDay || (day === lastCompleted + 1 && isMidnightPassed);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"p-8 max-w-4xl mx-auto\">\r\n+            <h1 className=\"text-2xl font-semibold mb-6\">Plan de 30 D√≠as</h1>\r\n+            \r\n+            {!selectedDay && ( // Mostrar solo si no se ha seleccionado un d√≠a inicial\r\n+                <div className=\"mb-6\">\r\n+                    <h2 className=\"text-lg font-bold mb-4\">Selecciona tu d√≠a inicial</h2>\r\n+                    <div className=\"grid grid-cols-7 gap-3\">\r\n+                        {plan.dias.map(dia => (\r\n+                            <button\r\n+                                key={dia.dia}\r\n+                                onClick={() => handleSelectInitialDay(dia.dia)}\r\n+                                className=\"flex justify-center items-center px-4 py-2 rounded-lg bg-blue-500 text-white font-semibold\"\r\n+                            >\r\n+                                D√≠a {dia.dia}\r\n+                            </button>\r\n+                        ))}\r\n+                    </div>\r\n+                </div>\r\n+            )}\r\n+\r\n+            {/* Barra de navegaci√≥n de d√≠as */}\r\n+            <div className=\"flex overflow-x-auto border-b-2 border-gray-300 mb-6\">\r\n+                {plan.dias.map(dia => (\r\n+                    <button\r\n+                        key={dia.dia}\r\n+                        onClick={() => canAccessDay(dia.dia) && onStartDay(dia.dia)}\r\n+                        disabled={!canAccessDay(dia.dia)}\r\n+                        className={`px-4 py-2 whitespace-nowrap ${\r\n+                            completedDays.includes(dia.dia)\r\n+                                ? 'bg-green-500 text-white'\r\n+                                : canAccessDay(dia.dia)\r\n+                                ? 'bg-yellow-400 text-white'\r\n+                                : 'bg-gray-200 text-gray-600'\r\n+                        } rounded-lg mr-2`}\r\n+                    >\r\n+                        {completedDays.includes(dia.dia) ? 'Completado' : `D√≠a ${dia.dia}`}\r\n+                    </button>\r\n+                ))}\r\n+            </div>\r\n+\r\n+            {/* Bot√≥n para eliminar plan */}\r\n+            <div className=\"mt-8 flex justify-center\">\r\n+                <button\r\n+                    onClick={onDeletePlan}\r\n+                    className=\"px-6 py-3 bg-red-500 text-white rounded-lg font-bold hover:bg-red-600\"\r\n+                >\r\n+                    Eliminar Plan\r\n+                </button>\r\n+            </div>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default NutritionPlan;\r\n"
                },
                {
                    "date": 1730777483803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,92 +1,4 @@\n-// frontend/components/NutritionPlan.js\r\n-import React, { useEffect, useState } from 'react';\r\n-\r\n-const NutritionPlan = ({ plan, onStartDay, onDeletePlan }) => {\r\n-    const [completedDays, setCompletedDays] = useState([]);\r\n-    const [selectedDay, setSelectedDay] = useState(null); // D√≠a inicial seleccionado\r\n-    const [currentDay, setCurrentDay] = useState(new Date().getDate());\r\n-\r\n-    useEffect(() => {\r\n-        // Cargar d√≠as completados y d√≠a inicial guardado\r\n-        fetch('/get_completed_days')\r\n-            .then(response => response.json())\r\n-            .then(data => {\r\n-                setCompletedDays(data.completedDays || []);\r\n-                setSelectedDay(data.selectedDay || null); // Cargar d√≠a inicial\r\n-            });\r\n-    }, []);\r\n-\r\n-    const handleSelectInitialDay = (day) => {\r\n-        setSelectedDay(day);\r\n-        fetch('/set_initial_day', {\r\n-            method: 'POST',\r\n-            headers: { 'Content-Type': 'application/json' },\r\n-            body: JSON.stringify({ day })\r\n-        });\r\n-    };\r\n-\r\n-    const canAccessDay = (day) => {\r\n-        const lastCompleted = Math.max(0, ...completedDays);\r\n-        const isMidnightPassed = new Date().getHours() >= 0;\r\n-        return day === selectedDay || (day === lastCompleted + 1 && isMidnightPassed);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"p-8 max-w-4xl mx-auto\">\r\n-            <h1 className=\"text-2xl font-semibold mb-6\">Plan de 30 D√≠as</h1>\r\n-            \r\n-            {!selectedDay && ( // Mostrar solo si no se ha seleccionado un d√≠a inicial\r\n-                <div className=\"mb-6\">\r\n-                    <h2 className=\"text-lg font-bold mb-4\">Selecciona tu d√≠a inicial</h2>\r\n-                    <div className=\"grid grid-cols-7 gap-3\">\r\n-                        {plan.dias.map(dia => (\r\n-                            <button\r\n-                                key={dia.dia}\r\n-                                onClick={() => handleSelectInitialDay(dia.dia)}\r\n-                                className=\"flex justify-center items-center px-4 py-2 rounded-lg bg-blue-500 text-white font-semibold\"\r\n-                            >\r\n-                                D√≠a {dia.dia}\r\n-                            </button>\r\n-                        ))}\r\n-                    </div>\r\n-                </div>\r\n-            )}\r\n-\r\n-            {/* Barra de navegaci√≥n de d√≠as */}\r\n-            <div className=\"flex overflow-x-auto border-b-2 border-gray-300 mb-6\">\r\n-                {plan.dias.map(dia => (\r\n-                    <button\r\n-                        key={dia.dia}\r\n-                        onClick={() => canAccessDay(dia.dia) && onStartDay(dia.dia)}\r\n-                        disabled={!canAccessDay(dia.dia)}\r\n-                        className={`px-4 py-2 whitespace-nowrap ${\r\n-                            completedDays.includes(dia.dia)\r\n-                                ? 'bg-green-500 text-white'\r\n-                                : canAccessDay(dia.dia)\r\n-                                ? 'bg-yellow-400 text-white'\r\n-                                : 'bg-gray-200 text-gray-600'\r\n-                        } rounded-lg mr-2`}\r\n-                    >\r\n-                        {completedDays.includes(dia.dia) ? 'Completado' : `D√≠a ${dia.dia}`}\r\n-                    </button>\r\n-                ))}\r\n-            </div>\r\n-\r\n-            {/* Bot√≥n para eliminar plan */}\r\n-            <div className=\"mt-8 flex justify-center\">\r\n-                <button\r\n-                    onClick={onDeletePlan}\r\n-                    className=\"px-6 py-3 bg-red-500 text-white rounded-lg font-bold hover:bg-red-600\"\r\n-                >\r\n-                    Eliminar Plan\r\n-                </button>\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default NutritionPlan;\r\n // frontend/components/DayPlan.js\r\n import React, { useState, useEffect } from 'react';\r\n import '../styles/DayPlan.css';\r\n \r\n@@ -261,1216 +173,4 @@\n   );\r\n };\r\n \r\n export default DayPlan;\r\n-// frontend/components/DayPlan.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [isCompleted, setIsCompleted] = useState(false); // Nuevo estado para verificar completado\r\n-\r\n-  useEffect(() => {\r\n-    if (plan && plan.dias) {\r\n-      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n-      if (selectedDayData) {\r\n-        const dayData = {\r\n-          date: `D√≠a ${dayNumber}`,\r\n-          meals: selectedDayData.recetas.map((receta, index) => ({\r\n-            id: index + 1,\r\n-            name: receta.Recipe_name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üçΩÔ∏è',\r\n-            details: receta,\r\n-          })),\r\n-          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n-            id: index + 1,\r\n-            name: ejercicio.name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üèãÔ∏è',\r\n-            details: ejercicio,\r\n-          })),\r\n-        };\r\n-        setDayData(dayData);\r\n-      }\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  // Verificar si todas las comidas y ejercicios est√°n completos\r\n-  useEffect(() => {\r\n-    if (dayData) {\r\n-      const allCompleted = [...dayData.meals, ...dayData.exercises].every(item => item.completed);\r\n-      setIsCompleted(allCompleted);\r\n-    }\r\n-  }, [dayData]);\r\n-\r\n-  const handleToggle = (type, id) => {\r\n-    setDayData(prevData => {\r\n-      const updatedItems = prevData[type].map(item =>\r\n-        item.id === id ? { ...item, completed: !item.completed } : item\r\n-      );\r\n-      return { ...prevData, [type]: updatedItems };\r\n-    });\r\n-  };\r\n-\r\n-  const onSaveChanges = () => {\r\n-    if (isCompleted) {\r\n-      // Aqu√≠ actualizar√≠as el progreso en el backend\r\n-      fetch('/update_progress', {\r\n-        method: 'POST',\r\n-        headers: {\r\n-          'Content-Type': 'application/json',\r\n-        },\r\n-        body: JSON.stringify({ dayNumber, completed: true }),\r\n-      })\r\n-      .then(response => response.json())\r\n-      .then(data => {\r\n-        alert('D√≠a completado. El progreso se ha guardado.');\r\n-        onEndDay(); // Notificar que el d√≠a se complet√≥\r\n-      })\r\n-      .catch(error => {\r\n-        console.error('Error saving progress:', error);\r\n-      });\r\n-    } else {\r\n-      alert('Debes completar todas las tareas del d√≠a antes de guardar.');\r\n-    }\r\n-  };\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n-        D√≠a {dayNumber}: {dayData.date}\r\n-      </h1>\r\n-      {/* Comidas */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Comidas</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"item\">\r\n-              <span className=\"item-icon\">{meal.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{meal.name}</p>\r\n-                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n-                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n-                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n-                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Ejercicios */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Ejercicios</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"item\">\r\n-              <span className=\"item-icon\">{exercise.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{exercise.name}</p>\r\n-                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n-                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n-                <p>Equipamiento: {exercise.details.equipment}</p>\r\n-                <p>Intensidad: {exercise.details.Intensity}</p>\r\n-                {exercise.details.gifUrl ? (\r\n-                  <img \r\n-                    src={exercise.details.gifUrl} \r\n-                    alt={exercise.name} \r\n-                    className=\"exercise-gif\" \r\n-                    onError={(e) => e.target.style.display = 'none'}\r\n-                  />\r\n-                ) : (\r\n-                  <p>GIF no disponible</p>\r\n-                )}\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Feedback y guardar progreso */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Feedback</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{meal.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={meal.completed}\r\n-                  onChange={() => handleToggle('meals', meal.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{exercise.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={exercise.completed}\r\n-                  onChange={() => handleToggle('exercises', exercise.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Botones */}\r\n-      <div className=\"buttons-container\">\r\n-        <button onClick={onEndDay} className=\"button button-secondary\">\r\n-          Terminar plan\r\n-        </button>\r\n-        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n-          Guardar cambios\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n-// frontend/components/DayPlan.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-\r\n-  useEffect(() => {\r\n-    if (plan && plan.dias) {\r\n-      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n-      if (selectedDayData) {\r\n-        const dayData = {\r\n-          date: `D√≠a ${dayNumber}`,\r\n-          meals: selectedDayData.recetas.map((receta, index) => ({\r\n-            id: index + 1,\r\n-            name: receta.Recipe_name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üçΩÔ∏è',\r\n-            details: receta,\r\n-          })),\r\n-          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n-            id: index + 1,\r\n-            name: ejercicio.name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üèãÔ∏è',\r\n-            details: ejercicio,\r\n-          })),\r\n-        };\r\n-        setDayData(dayData);\r\n-      } else {\r\n-        console.warn(`No se encontraron datos completos para el d√≠a ${dayNumber}`);\r\n-      }\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  const handleToggle = (type, id) => {\r\n-    setDayData(prevData => {\r\n-      const updatedItems = prevData[type].map(item =>\r\n-        item.id === id ? { ...item, completed: !item.completed } : item\r\n-      );\r\n-      return { ...prevData, [type]: updatedItems };\r\n-    });\r\n-  };\r\n-\r\n-  const onSaveChanges = () => {\r\n-    fetch('/update_progress', {\r\n-      method: 'POST',\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-      },\r\n-      body: JSON.stringify(dayData),\r\n-    })\r\n-    .then(response => response.json())\r\n-    .then(data => {\r\n-      console.log('Progress saved:', data);\r\n-      alert('Progreso guardado con √©xito');\r\n-    })\r\n-    .catch(error => {\r\n-      console.error('Error saving progress:', error);\r\n-    });\r\n-  };\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n-        D√≠a {dayNumber}: {dayData.date}\r\n-      </h1>\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Comidas</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"item\">\r\n-              <span className=\"item-icon\">{meal.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{meal.name}</p>\r\n-                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n-                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n-                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n-                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Ejercicios</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"item\">\r\n-              <span className=\"item-icon\">{exercise.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{exercise.name}</p>\r\n-                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n-                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n-                <p>Equipamiento: {exercise.details.equipment}</p>\r\n-                <p>Intensidad: {exercise.details.Intensity}</p>\r\n-                {exercise.details.gifUrl ? (\r\n-                  <img \r\n-                    src={exercise.details.gifUrl} \r\n-                    alt={exercise.name} \r\n-                    className=\"exercise-gif\" \r\n-                    onError={(e) => e.target.style.display = 'none'}\r\n-                  />\r\n-                ) : (\r\n-                  <p>GIF no disponible</p>\r\n-                )}\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Feedback</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{meal.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={meal.completed}\r\n-                  onChange={() => handleToggle('meals', meal.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{exercise.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={exercise.completed}\r\n-                  onChange={() => handleToggle('exercises', exercise.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      <div className=\"buttons-container\">\r\n-        <button onClick={onEndDay} className=\"button button-secondary\">\r\n-          Terminar plan\r\n-        </button>\r\n-        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n-          Guardar cambios\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n-// frontend/components/DayPlan.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-\r\n-  useEffect(() => {\r\n-    if (plan && plan.dias) {\r\n-      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n-\r\n-      if (selectedDayData && selectedDayData.recetas && selectedDayData.ejercicios) {\r\n-        const dayData = {\r\n-          date: `D√≠a ${dayNumber}`,\r\n-          meals: selectedDayData.recetas.map((receta, index) => ({\r\n-            id: index + 1,\r\n-            name: receta.Recipe_name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üçΩÔ∏è',\r\n-            details: receta,\r\n-          })),\r\n-          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n-            id: index + 1,\r\n-            name: ejercicio.name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üèãÔ∏è',\r\n-            details: ejercicio,\r\n-          })),\r\n-        };\r\n-\r\n-        setDayData(dayData);\r\n-      } else {\r\n-        console.warn(`No se encontraron datos completos para el d√≠a ${dayNumber}`);\r\n-      }\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  const handleToggle = (type, id) => {\r\n-    setDayData(prevData => {\r\n-      const updatedItems = prevData[type].map(item =>\r\n-        item.id === id ? { ...item, completed: !item.completed } : item\r\n-      );\r\n-      return { ...prevData, [type]: updatedItems };\r\n-    });\r\n-  };\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n-        D√≠a {dayNumber}: {dayData.date}\r\n-      </h1>\r\n-      {/* Secci√≥n de Comidas */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Comidas</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"item\">\r\n-              <span className=\"item-icon\">{meal.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{meal.name}</p>\r\n-                <p className=\"item-time\">{meal.time}</p>\r\n-                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n-                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n-                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n-                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Secci√≥n de Ejercicios */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Ejercicios</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"item\">\r\n-              <span className=\"item-icon\">{exercise.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{exercise.name}</p>\r\n-                <p className=\"item-time\">{exercise.time}</p>\r\n-                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n-                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n-                <p>Equipamiento: {exercise.details.equipment}</p>\r\n-                <p>Intensidad: {exercise.details.Intensity}</p>\r\n-                {exercise.details.gifUrl ? (\r\n-                  <img \r\n-                    src={exercise.details.gifUrl} \r\n-                    alt={exercise.name} \r\n-                    className=\"exercise-gif\" \r\n-                    onError={(e) => e.target.style.display = 'none'}\r\n-                  />\r\n-                ) : (\r\n-                  <p>GIF no disponible</p>\r\n-                )}\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Secci√≥n de Feedback */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Feedback</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{meal.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={meal.completed}\r\n-                  onChange={() => handleToggle('meals', meal.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{exercise.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={exercise.completed}\r\n-                  onChange={() => handleToggle('exercises', exercise.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Botones */}\r\n-      <div className=\"buttons-container\">\r\n-        <button onClick={onEndDay} className=\"button button-secondary\">\r\n-          Terminar plan\r\n-        </button>\r\n-        <button className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n-          Guardar cambios\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n-// frontend/components/DayPlan.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-\r\n-  useEffect(() => {\r\n-    if (plan && plan.dias) {\r\n-      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n-\r\n-      if (selectedDayData && selectedDayData.recetas && selectedDayData.ejercicios) {\r\n-        const dayData = {\r\n-          date: `D√≠a ${dayNumber}`,\r\n-          meals: selectedDayData.recetas.map((receta, index) => ({\r\n-            id: index + 1,\r\n-            name: receta.Recipe_name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üçΩÔ∏è',\r\n-            details: receta,\r\n-          })),\r\n-          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n-            id: index + 1,\r\n-            name: ejercicio.name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üèãÔ∏è',\r\n-            details: ejercicio,\r\n-          })),\r\n-        };\r\n-\r\n-        setDayData(dayData);\r\n-      } else {\r\n-        console.warn(`No se encontraron datos completos para el d√≠a ${dayNumber}`);\r\n-      }\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  const handleToggle = (type, id) => {\r\n-    setDayData(prevData => {\r\n-      const updatedItems = prevData[type].map(item =>\r\n-        item.id === id ? { ...item, completed: !item.completed } : item\r\n-      );\r\n-      return { ...prevData, [type]: updatedItems };\r\n-    });\r\n-  };\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n-        D√≠a {dayNumber}: {dayData.date}\r\n-      </h1>\r\n-      {/* Secci√≥n de Comidas */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Comidas</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"item\">\r\n-              <span className=\"item-icon\">{meal.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{meal.name}</p>\r\n-                <p className=\"item-time\">{meal.time}</p>\r\n-                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n-                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n-                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n-                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Secci√≥n de Ejercicios */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Ejercicios</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"item\">\r\n-              <span className=\"item-icon\">{exercise.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{exercise.name}</p>\r\n-                <p className=\"item-time\">{exercise.time}</p>\r\n-                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n-                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n-                <p>Equipamiento: {exercise.details.equipment}</p>\r\n-                <p>Intensidad: {exercise.details.Intensity}</p>\r\n-                {exercise.details.gifUrl ? (\r\n-                  <img \r\n-                    src={exercise.details.gifUrl} \r\n-                    alt={exercise.name} \r\n-                    className=\"exercise-gif\" \r\n-                    onError={(e) => e.target.style.display = 'none'}\r\n-                  />\r\n-                ) : (\r\n-                  <p>GIF no disponible</p>\r\n-                )}\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Secci√≥n de Feedback */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Feedback</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{meal.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={meal.completed}\r\n-                  onChange={() => handleToggle('meals', meal.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{exercise.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={exercise.completed}\r\n-                  onChange={() => handleToggle('exercises', exercise.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Botones */}\r\n-      <div className=\"buttons-container\">\r\n-        <button onClick={onEndDay} className=\"button button-secondary\">\r\n-          Terminar plan\r\n-        </button>\r\n-        <button className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n-          Guardar cambios\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n-// frontend/components/DayPlan.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-\r\n-  useEffect(() => {\r\n-    if (plan && plan.dias) {\r\n-      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n-\r\n-      if (selectedDayData) {\r\n-        const dayData = {\r\n-          date: `D√≠a ${dayNumber}`,\r\n-          meals: selectedDayData.recetas.map((receta, index) => ({\r\n-            id: index + 1,\r\n-            name: receta.Recipe_name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üçΩÔ∏è',\r\n-            details: receta,\r\n-          })),\r\n-          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n-            id: index + 1,\r\n-            name: ejercicio.name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üèãÔ∏è',\r\n-            details: ejercicio,\r\n-          })),\r\n-        };\r\n-\r\n-        setDayData(dayData);\r\n-      } else {\r\n-        console.warn(`No se encontraron datos para el d√≠a ${dayNumber}`);\r\n-      }\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  const handleToggle = (type, id) => {\r\n-    setDayData(prevData => {\r\n-      const updatedItems = prevData[type].map(item =>\r\n-        item.id === id ? { ...item, completed: !item.completed } : item\r\n-      );\r\n-      return { ...prevData, [type]: updatedItems };\r\n-    });\r\n-  };\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n-        D√≠a {dayNumber}: {dayData.date}\r\n-      </h1>\r\n-      {/* Secci√≥n de Comidas */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Comidas</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"item\">\r\n-              <span className=\"item-icon\">{meal.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{meal.name}</p>\r\n-                <p className=\"item-time\">{meal.time}</p>\r\n-                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n-                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n-                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n-                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Secci√≥n de Ejercicios */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Ejercicios</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"item\">\r\n-              <span className=\"item-icon\">{exercise.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{exercise.name}</p>\r\n-                <p className=\"item-time\">{exercise.time}</p>\r\n-                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n-                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n-                <p>Equipamiento: {exercise.details.equipment}</p>\r\n-                <p>Intensidad: {exercise.details.Intensity}</p>\r\n-                {/* Verificaci√≥n de gifUrl y carga del GIF */}\r\n-                {exercise.details.gifUrl ? (\r\n-                  <img \r\n-                    src={exercise.details.gifUrl} \r\n-                    alt={exercise.name} \r\n-                    className=\"exercise-gif\" \r\n-                    onError={(e) => e.target.style.display = 'none'}\r\n-                  />\r\n-                ) : (\r\n-                  <p>GIF no disponible</p>\r\n-                )}\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Secci√≥n de Feedback */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Feedback</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{meal.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={meal.completed}\r\n-                  onChange={() => handleToggle('meals', meal.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{exercise.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={exercise.completed}\r\n-                  onChange={() => handleToggle('exercises', exercise.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Botones */}\r\n-      <div className=\"buttons-container\">\r\n-        <button onClick={onEndDay} className=\"button button-secondary\">\r\n-          Terminar plan\r\n-        </button>\r\n-        <button className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n-          Guardar cambios\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n-// frontend/components/DayPlan.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-\r\n-  useEffect(() => {\r\n-    if (plan && plan.dias) {\r\n-      // Busca los datos espec√≠ficos del d√≠a en plan.dias\r\n-      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n-\r\n-      if (selectedDayData) {\r\n-        const dayData = {\r\n-          date: `D√≠a ${dayNumber}`,\r\n-          meals: selectedDayData.recetas.map((receta, index) => ({\r\n-            id: index + 1,\r\n-            name: receta.Recipe_name,\r\n-            time: '', // Puedes asignar horarios si lo deseas\r\n-            completed: false,\r\n-            icon: 'üçΩÔ∏è',\r\n-            details: receta,\r\n-          })),\r\n-          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n-            id: index + 1,\r\n-            name: ejercicio.name,\r\n-            time: '', // Puedes asignar horarios si lo deseas\r\n-            completed: false,\r\n-            icon: 'üèãÔ∏è',\r\n-            details: ejercicio,\r\n-          })),\r\n-        };\r\n-\r\n-        setDayData(dayData);\r\n-      } else {\r\n-        console.warn(`No se encontraron datos para el d√≠a ${dayNumber}`);\r\n-      }\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  const handleToggle = (type, id) => {\r\n-    setDayData(prevData => {\r\n-      const updatedItems = prevData[type].map(item =>\r\n-        item.id === id ? { ...item, completed: !item.completed } : item\r\n-      );\r\n-      return { ...prevData, [type]: updatedItems };\r\n-    });\r\n-  };\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n-        D√≠a {dayNumber}: {dayData.date}\r\n-      </h1>\r\n-      {/* Secci√≥n de Comidas */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Comidas</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"item\">\r\n-              <span className=\"item-icon\">{meal.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{meal.name}</p>\r\n-                <p className=\"item-time\">{meal.time}</p>\r\n-                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n-                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n-                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n-                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Secci√≥n de Ejercicios */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Ejercicios</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"item\">\r\n-              <span className=\"item-icon\">{exercise.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{exercise.name}</p>\r\n-                <p className=\"item-time\">{exercise.time}</p>\r\n-                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n-                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n-                <p>Equipamiento: {exercise.details.equipment}</p>\r\n-                <p>Intensidad: {exercise.details.Intensity}</p>\r\n-                <img src={exercise.details.gifUrl} alt={exercise.name} className=\"exercise-gif\" />\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Secci√≥n de Feedback */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Feedback</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{meal.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={meal.completed}\r\n-                  onChange={() => handleToggle('meals', meal.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{exercise.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={exercise.completed}\r\n-                  onChange={() => handleToggle('exercises', exercise.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Botones */}\r\n-      <div className=\"buttons-container\">\r\n-        <button onClick={onEndDay} className=\"button button-secondary\">\r\n-          Terminar plan\r\n-        </button>\r\n-        <button className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n-          Guardar cambios\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n-// frontend/components/DayPlan.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-\r\n-  useEffect(() => {\r\n-    if (plan && plan.dias) {\r\n-      // Busca los datos espec√≠ficos del d√≠a en plan.dias\r\n-      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n-\r\n-      if (selectedDayData) {\r\n-        const dayData = {\r\n-          date: `D√≠a ${dayNumber}`,\r\n-          meals: selectedDayData.recetas.map((receta, index) => ({\r\n-            id: index + 1,\r\n-            name: receta.Recipe_name,\r\n-            time: '', // Puedes asignar horarios si lo deseas\r\n-            completed: false,\r\n-            icon: 'üçΩÔ∏è',\r\n-            details: receta,\r\n-          })),\r\n-          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n-            id: index + 1,\r\n-            name: ejercicio.name,\r\n-            time: '', // Puedes asignar horarios si lo deseas\r\n-            completed: false,\r\n-            icon: 'üèãÔ∏è',\r\n-            details: ejercicio,\r\n-          })),\r\n-        };\r\n-\r\n-        setDayData(dayData);\r\n-      } else {\r\n-        console.warn(`No se encontraron datos para el d√≠a ${dayNumber}`);\r\n-      }\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  const handleToggle = (type, id) => {\r\n-    setDayData(prevData => {\r\n-      const updatedItems = prevData[type].map(item =>\r\n-        item.id === id ? { ...item, completed: !item.completed } : item\r\n-      );\r\n-      return { ...prevData, [type]: updatedItems };\r\n-    });\r\n-  };\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n-        D√≠a {dayNumber}: {dayData.date}\r\n-      </h1>\r\n-      {/* Secci√≥n de Comidas */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Comidas</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"item\">\r\n-              <span className=\"item-icon\">{meal.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{meal.name}</p>\r\n-                <p className=\"item-time\">{meal.time}</p>\r\n-                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n-                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n-                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n-                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Secci√≥n de Ejercicios */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Ejercicios</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"item\">\r\n-              <span className=\"item-icon\">{exercise.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{exercise.name}</p>\r\n-                <p className=\"item-time\">{exercise.time}</p>\r\n-                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n-                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n-                <p>Equipamiento: {exercise.details.equipment}</p>\r\n-                <p>Intensidad: {exercise.details.Intensity}</p>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Secci√≥n de Feedback */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Feedback</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{meal.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={meal.completed}\r\n-                  onChange={() => handleToggle('meals', meal.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{exercise.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={exercise.completed}\r\n-                  onChange={() => handleToggle('exercises', exercise.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Botones */}\r\n-      <div className=\"buttons-container\">\r\n-        <button onClick={onEndDay} className=\"button button-secondary\">\r\n-          Terminar plan\r\n-        </button>\r\n-        <button className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n-          Guardar cambios\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n-// frontend/components/DayPlan.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-\r\n-  useEffect(() => {\r\n-    if (plan) {\r\n-      const dayData = {\r\n-        date: `D√≠a ${dayNumber}`,\r\n-        meals: plan.recetas.map((receta, index) => ({\r\n-          id: index + 1,\r\n-          name: receta.Recipe_name,\r\n-          time: '', // Puedes asignar horarios si lo deseas\r\n-          completed: false,\r\n-          icon: 'üçΩÔ∏è', // Puedes asignar iconos seg√∫n el tipo de comida\r\n-          details: receta,\r\n-        })),\r\n-        exercises: plan.ejercicios.map((ejercicio, index) => ({\r\n-          id: index + 1,\r\n-          name: ejercicio.name,\r\n-          time: '', // Puedes asignar horarios si lo deseas\r\n-          completed: false,\r\n-          icon: 'üèãÔ∏è', // Puedes asignar iconos seg√∫n el tipo de ejercicio\r\n-          details: ejercicio,\r\n-        })),\r\n-      };\r\n-\r\n-      setDayData(dayData);\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  const handleToggle = (type, id) => {\r\n-    setDayData(prevData => {\r\n-      const updatedItems = prevData[type].map(item =>\r\n-        item.id === id ? { ...item, completed: !item.completed } : item\r\n-      );\r\n-      return { ...prevData, [type]: updatedItems };\r\n-    });\r\n-  };\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n-        D√≠a {dayNumber}: {dayData.date}\r\n-      </h1>\r\n-      {/* Secci√≥n de Comidas */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Comidas</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"item\">\r\n-              <span className=\"item-icon\">{meal.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{meal.name}</p>\r\n-                <p className=\"item-time\">{meal.time}</p>\r\n-                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n-                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n-                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n-                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Secci√≥n de Ejercicios */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Ejercicios</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"item\">\r\n-              <span className=\"item-icon\">{exercise.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{exercise.name}</p>\r\n-                <p className=\"item-time\">{exercise.time}</p>\r\n-                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n-                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n-                <p>Equipamiento: {exercise.details.equipment}</p>\r\n-                <p>Intensidad: {exercise.details.Intensity}</p>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Secci√≥n de Feedback */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Feedback</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{meal.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={meal.completed}\r\n-                  onChange={() => handleToggle('meals', meal.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{exercise.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={exercise.completed}\r\n-                  onChange={() => handleToggle('exercises', exercise.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Botones */}\r\n-      <div className=\"buttons-container\">\r\n-        <button onClick={onEndDay} className=\"button button-secondary\">\r\n-          Terminar plan\r\n-        </button>\r\n-        <button className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n-          Guardar cambios\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n"
                },
                {
                    "date": 1730777498561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+// frontend/components/DayPlan.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [isCompleted, setIsCompleted] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+      if (selectedDayData) {\r\n+        const dayData = {\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+        setDayData(dayData);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      {/* N√∫mero de d√≠a eliminado */}\r\n+      {/* Comidas y ejercicios aqu√≠ */}\r\n+      {/* Botones de completar y guardar progreso */}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1730778033627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+// frontend/components/DayPlan.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [isCompleted, setIsCompleted] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+      if (selectedDayData) {\r\n+        const dayData = {\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            time: '',\r\n+            completed: false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+        setDayData(dayData);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      {/* N√∫mero de d√≠a eliminado */}\r\n+      {/* Comidas y ejercicios aqu√≠ */}\r\n+      {/* Botones de completar y guardar progreso */}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1730778043357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [feedback, setFeedback] = useState({});\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+      if (selectedDayData) {\r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            completed: false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            completed: false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+        setDayData(dayData);\r\n+        // Inicializa el feedback con calificaciones predeterminadas de 0\r\n+        setFeedback({\r\n+          meals: dayData.meals.map(() => 0),\r\n+          exercises: dayData.exercises.map(() => 0),\r\n+        });\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      return { ...prevData, [type]: updatedItems };\r\n+    });\r\n+  };\r\n+\r\n+  const handleRatingChange = (type, index, rating) => {\r\n+    setFeedback(prevFeedback => ({\r\n+      ...prevFeedback,\r\n+      [type]: prevFeedback[type].map((score, i) => (i === index ? rating : score)),\r\n+    }));\r\n+  };\r\n+\r\n+  const onSaveFeedback = () => {\r\n+    const feedbackData = {\r\n+      dayNumber,\r\n+      feedback,\r\n+    };\r\n+\r\n+    fetch('/save_feedback', {\r\n+      method: 'POST',\r\n+      headers: {\r\n+        'Content-Type': 'application/json',\r\n+      },\r\n+      body: JSON.stringify(feedbackData),\r\n+    })\r\n+      .then(response => response.json())\r\n+      .then(data => {\r\n+        alert('Comentarios guardados con √©xito');\r\n+      })\r\n+      .catch(error => {\r\n+        console.error('Error al guardar comentarios:', error);\r\n+      });\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      \r\n+      {/* Secci√≥n de Comidas */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map((meal, index) => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+              <div className=\"feedback-rating\">\r\n+                <label>Utilidad: </label>\r\n+                {[1, 2, 3, 4, 5].map(star => (\r\n+                  <button\r\n+                    key={star}\r\n+                    onClick={() => handleRatingChange('meals', index, star)}\r\n+                    className={feedback.meals[index] >= star ? 'active' : ''}\r\n+                  >\r\n+                    ‚òÖ\r\n+                  </button>\r\n+                ))}\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Secci√≥n de Ejercicios */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map((exercise, index) => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+              </div>\r\n+              <div className=\"feedback-rating\">\r\n+                <label>Utilidad: </label>\r\n+                {[1, 2, 3, 4, 5].map(star => (\r\n+                  <button\r\n+                    key={star}\r\n+                    onClick={() => handleRatingChange('exercises', index, star)}\r\n+                    className={feedback.exercises[index] >= star ? 'active' : ''}\r\n+                  >\r\n+                    ‚òÖ\r\n+                  </button>\r\n+                ))}\r\n+              </div>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Botones */}\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button onClick={onSaveFeedback} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar comentarios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1730778301719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay, onCompleteDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+      if (selectedDayData) {\r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            completed: false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            completed: false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+        setDayData(dayData);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      return { ...prevData, [type]: updatedItems };\r\n+    });\r\n+  };\r\n+\r\n+  const isDayComplete = () => {\r\n+    return dayData.meals.every(meal => meal.completed) &&\r\n+           dayData.exercises.every(exercise => exercise.completed);\r\n+  };\r\n+\r\n+  const onSaveChanges = () => {\r\n+    if (isDayComplete()) {\r\n+      onCompleteDay(dayNumber); // Marca el d√≠a como completo\r\n+    } else {\r\n+      alert('Debes completar todas las comidas y ejercicios antes de guardar.');\r\n+    }\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      \r\n+      {/* Secci√≥n de Comidas */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={meal.completed}\r\n+                  onChange={() => handleToggle('meals', meal.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Secci√≥n de Ejercicios */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+              </div>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={exercise.completed}\r\n+                  onChange={() => handleToggle('exercises', exercise.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Botones */}\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar cambios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1730778446203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,132 @@\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay, onCompleteDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+      if (selectedDayData) {\r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            completed: false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            completed: false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+        setDayData(dayData);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      return { ...prevData, [type]: updatedItems };\r\n+    });\r\n+  };\r\n+\r\n+  const isDayComplete = () => {\r\n+    return dayData.meals.every(meal => meal.completed) &&\r\n+           dayData.exercises.every(exercise => exercise.completed);\r\n+  };\r\n+\r\n+  const onSaveChanges = () => {\r\n+    if (isDayComplete()) {\r\n+      onCompleteDay(dayNumber); // Marca el d√≠a como completo\r\n+    } else {\r\n+      alert('Debes completar todas las comidas y ejercicios antes de guardar.');\r\n+    }\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      \r\n+      {/* Secci√≥n de Comidas */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={meal.completed}\r\n+                  onChange={() => handleToggle('meals', meal.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Secci√≥n de Ejercicios */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+              </div>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={exercise.completed}\r\n+                  onChange={() => handleToggle('exercises', exercise.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Botones */}\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar cambios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1731009867669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,139 @@\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay, onCompleteDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+      if (selectedDayData) {\r\n+        // Recupera el estado del d√≠a desde localStorage\r\n+        const savedData = JSON.parse(localStorage.getItem(`day_${dayNumber}_data`)) || {};\r\n+        \r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            completed: savedData.meals?.[index]?.completed || false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            completed: savedData.exercises?.[index]?.completed || false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+        setDayData(dayData);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      const newData = { ...prevData, [type]: updatedItems };\r\n+\r\n+      // Guarda el estado en localStorage\r\n+      localStorage.setItem(`day_${dayNumber}_data`, JSON.stringify(newData));\r\n+      return newData;\r\n+    });\r\n+  };\r\n+\r\n+  const isDayComplete = () => {\r\n+    return dayData.meals.every(meal => meal.completed) &&\r\n+           dayData.exercises.every(exercise => exercise.completed);\r\n+  };\r\n+\r\n+  const onSaveChanges = () => {\r\n+    if (isDayComplete()) {\r\n+      onCompleteDay(dayNumber); // Marca el d√≠a como completo\r\n+    } else {\r\n+      alert('Debes completar todas las comidas y ejercicios antes de guardar.');\r\n+    }\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      \r\n+      {/* Secci√≥n de Comidas */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={meal.completed}\r\n+                  onChange={() => handleToggle('meals', meal.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Secci√≥n de Ejercicios */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+              </div>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={exercise.completed}\r\n+                  onChange={() => handleToggle('exercises', exercise.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Botones */}\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar cambios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1731009977489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,139 @@\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay, onCompleteDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+      if (selectedDayData) {\r\n+        // Recupera el estado del d√≠a desde localStorage\r\n+        const savedData = JSON.parse(localStorage.getItem(`day_${dayNumber}_data`)) || {};\r\n+        \r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            completed: savedData.meals?.[index]?.completed || false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            completed: savedData.exercises?.[index]?.completed || false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+        setDayData(dayData);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      const newData = { ...prevData, [type]: updatedItems };\r\n+\r\n+      // Guarda el estado en localStorage\r\n+      localStorage.setItem(`day_${dayNumber}_data`, JSON.stringify(newData));\r\n+      return newData;\r\n+    });\r\n+  };\r\n+\r\n+  const isDayComplete = () => {\r\n+    return dayData.meals.every(meal => meal.completed) &&\r\n+           dayData.exercises.every(exercise => exercise.completed);\r\n+  };\r\n+\r\n+  const onSaveChanges = () => {\r\n+    if (isDayComplete()) {\r\n+      onCompleteDay(dayNumber); // Marca el d√≠a como completo\r\n+    } else {\r\n+      alert('Debes completar todas las comidas y ejercicios antes de guardar.');\r\n+    }\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      \r\n+      {/* Secci√≥n de Comidas */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={meal.completed}\r\n+                  onChange={() => handleToggle('meals', meal.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Secci√≥n de Ejercicios */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+              </div>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={exercise.completed}\r\n+                  onChange={() => handleToggle('exercises', exercise.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Botones */}\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar cambios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1731009990399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,843 +136,4 @@\n   );\r\n };\r\n \r\n export default DayPlan;\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay, onCompleteDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-\r\n-  useEffect(() => {\r\n-    if (plan && plan.dias) {\r\n-      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n-      if (selectedDayData) {\r\n-        // Recupera el estado del d√≠a desde localStorage\r\n-        const savedData = JSON.parse(localStorage.getItem(`day_${dayNumber}_data`)) || {};\r\n-        \r\n-        const dayData = {\r\n-          date: `D√≠a ${dayNumber}`,\r\n-          meals: selectedDayData.recetas.map((receta, index) => ({\r\n-            id: index + 1,\r\n-            name: receta.Recipe_name,\r\n-            completed: savedData.meals?.[index]?.completed || false,\r\n-            icon: 'üçΩÔ∏è',\r\n-            details: receta,\r\n-          })),\r\n-          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n-            id: index + 1,\r\n-            name: ejercicio.name,\r\n-            completed: savedData.exercises?.[index]?.completed || false,\r\n-            icon: 'üèãÔ∏è',\r\n-            details: ejercicio,\r\n-          })),\r\n-        };\r\n-        setDayData(dayData);\r\n-      }\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  const handleToggle = (type, id) => {\r\n-    setDayData(prevData => {\r\n-      const updatedItems = prevData[type].map(item =>\r\n-        item.id === id ? { ...item, completed: !item.completed } : item\r\n-      );\r\n-      const newData = { ...prevData, [type]: updatedItems };\r\n-\r\n-      // Guarda el estado en localStorage\r\n-      localStorage.setItem(`day_${dayNumber}_data`, JSON.stringify(newData));\r\n-      return newData;\r\n-    });\r\n-  };\r\n-\r\n-  const isDayComplete = () => {\r\n-    return dayData.meals.every(meal => meal.completed) &&\r\n-           dayData.exercises.every(exercise => exercise.completed);\r\n-  };\r\n-\r\n-  const onSaveChanges = () => {\r\n-    if (isDayComplete()) {\r\n-      onCompleteDay(dayNumber); // Marca el d√≠a como completo\r\n-    } else {\r\n-      alert('Debes completar todas las comidas y ejercicios antes de guardar.');\r\n-    }\r\n-  };\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n-        D√≠a {dayNumber}: {dayData.date}\r\n-      </h1>\r\n-      \r\n-      {/* Secci√≥n de Comidas */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Comidas</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"item\">\r\n-              <span className=\"item-icon\">{meal.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{meal.name}</p>\r\n-                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n-                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n-                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n-                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n-              </div>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={meal.completed}\r\n-                  onChange={() => handleToggle('meals', meal.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Secci√≥n de Ejercicios */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Ejercicios</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"item\">\r\n-              <span className=\"item-icon\">{exercise.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{exercise.name}</p>\r\n-                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n-                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n-                <p>Equipamiento: {exercise.details.equipment}</p>\r\n-                <p>Intensidad: {exercise.details.Intensity}</p>\r\n-              </div>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={exercise.completed}\r\n-                  onChange={() => handleToggle('exercises', exercise.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Botones */}\r\n-      <div className=\"buttons-container\">\r\n-        <button onClick={onEndDay} className=\"button button-secondary\">\r\n-          Terminar plan\r\n-        </button>\r\n-        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n-          Guardar cambios\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay, onCompleteDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-\r\n-  useEffect(() => {\r\n-    if (plan && plan.dias) {\r\n-      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n-      if (selectedDayData) {\r\n-        const dayData = {\r\n-          date: `D√≠a ${dayNumber}`,\r\n-          meals: selectedDayData.recetas.map((receta, index) => ({\r\n-            id: index + 1,\r\n-            name: receta.Recipe_name,\r\n-            completed: false,\r\n-            icon: 'üçΩÔ∏è',\r\n-            details: receta,\r\n-          })),\r\n-          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n-            id: index + 1,\r\n-            name: ejercicio.name,\r\n-            completed: false,\r\n-            icon: 'üèãÔ∏è',\r\n-            details: ejercicio,\r\n-          })),\r\n-        };\r\n-        setDayData(dayData);\r\n-      }\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  const handleToggle = (type, id) => {\r\n-    setDayData(prevData => {\r\n-      const updatedItems = prevData[type].map(item =>\r\n-        item.id === id ? { ...item, completed: !item.completed } : item\r\n-      );\r\n-      return { ...prevData, [type]: updatedItems };\r\n-    });\r\n-  };\r\n-\r\n-  const isDayComplete = () => {\r\n-    return dayData.meals.every(meal => meal.completed) &&\r\n-           dayData.exercises.every(exercise => exercise.completed);\r\n-  };\r\n-\r\n-  const onSaveChanges = () => {\r\n-    if (isDayComplete()) {\r\n-      onCompleteDay(dayNumber); // Marca el d√≠a como completo\r\n-    } else {\r\n-      alert('Debes completar todas las comidas y ejercicios antes de guardar.');\r\n-    }\r\n-  };\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n-        D√≠a {dayNumber}: {dayData.date}\r\n-      </h1>\r\n-      \r\n-      {/* Secci√≥n de Comidas */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Comidas</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"item\">\r\n-              <span className=\"item-icon\">{meal.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{meal.name}</p>\r\n-                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n-                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n-                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n-                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n-              </div>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={meal.completed}\r\n-                  onChange={() => handleToggle('meals', meal.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Secci√≥n de Ejercicios */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Ejercicios</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"item\">\r\n-              <span className=\"item-icon\">{exercise.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{exercise.name}</p>\r\n-                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n-                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n-                <p>Equipamiento: {exercise.details.equipment}</p>\r\n-                <p>Intensidad: {exercise.details.Intensity}</p>\r\n-              </div>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={exercise.completed}\r\n-                  onChange={() => handleToggle('exercises', exercise.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Botones */}\r\n-      <div className=\"buttons-container\">\r\n-        <button onClick={onEndDay} className=\"button button-secondary\">\r\n-          Terminar plan\r\n-        </button>\r\n-        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n-          Guardar cambios\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay, onCompleteDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-\r\n-  useEffect(() => {\r\n-    if (plan && plan.dias) {\r\n-      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n-      if (selectedDayData) {\r\n-        const dayData = {\r\n-          date: `D√≠a ${dayNumber}`,\r\n-          meals: selectedDayData.recetas.map((receta, index) => ({\r\n-            id: index + 1,\r\n-            name: receta.Recipe_name,\r\n-            completed: false,\r\n-            icon: 'üçΩÔ∏è',\r\n-            details: receta,\r\n-          })),\r\n-          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n-            id: index + 1,\r\n-            name: ejercicio.name,\r\n-            completed: false,\r\n-            icon: 'üèãÔ∏è',\r\n-            details: ejercicio,\r\n-          })),\r\n-        };\r\n-        setDayData(dayData);\r\n-      }\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  const handleToggle = (type, id) => {\r\n-    setDayData(prevData => {\r\n-      const updatedItems = prevData[type].map(item =>\r\n-        item.id === id ? { ...item, completed: !item.completed } : item\r\n-      );\r\n-      return { ...prevData, [type]: updatedItems };\r\n-    });\r\n-  };\r\n-\r\n-  const isDayComplete = () => {\r\n-    return dayData.meals.every(meal => meal.completed) &&\r\n-           dayData.exercises.every(exercise => exercise.completed);\r\n-  };\r\n-\r\n-  const onSaveChanges = () => {\r\n-    if (isDayComplete()) {\r\n-      onCompleteDay(dayNumber); // Marca el d√≠a como completo\r\n-    } else {\r\n-      alert('Debes completar todas las comidas y ejercicios antes de guardar.');\r\n-    }\r\n-  };\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n-        D√≠a {dayNumber}: {dayData.date}\r\n-      </h1>\r\n-      \r\n-      {/* Secci√≥n de Comidas */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Comidas</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"item\">\r\n-              <span className=\"item-icon\">{meal.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{meal.name}</p>\r\n-                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n-                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n-                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n-                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n-              </div>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={meal.completed}\r\n-                  onChange={() => handleToggle('meals', meal.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Secci√≥n de Ejercicios */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Ejercicios</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"item\">\r\n-              <span className=\"item-icon\">{exercise.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{exercise.name}</p>\r\n-                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n-                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n-                <p>Equipamiento: {exercise.details.equipment}</p>\r\n-                <p>Intensidad: {exercise.details.Intensity}</p>\r\n-              </div>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={exercise.completed}\r\n-                  onChange={() => handleToggle('exercises', exercise.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Botones */}\r\n-      <div className=\"buttons-container\">\r\n-        <button onClick={onEndDay} className=\"button button-secondary\">\r\n-          Terminar plan\r\n-        </button>\r\n-        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n-          Guardar cambios\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [feedback, setFeedback] = useState({});\r\n-\r\n-  useEffect(() => {\r\n-    if (plan && plan.dias) {\r\n-      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n-      if (selectedDayData) {\r\n-        const dayData = {\r\n-          date: `D√≠a ${dayNumber}`,\r\n-          meals: selectedDayData.recetas.map((receta, index) => ({\r\n-            id: index + 1,\r\n-            name: receta.Recipe_name,\r\n-            completed: false,\r\n-            icon: 'üçΩÔ∏è',\r\n-            details: receta,\r\n-          })),\r\n-          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n-            id: index + 1,\r\n-            name: ejercicio.name,\r\n-            completed: false,\r\n-            icon: 'üèãÔ∏è',\r\n-            details: ejercicio,\r\n-          })),\r\n-        };\r\n-        setDayData(dayData);\r\n-        // Inicializa el feedback con calificaciones predeterminadas de 0\r\n-        setFeedback({\r\n-          meals: dayData.meals.map(() => 0),\r\n-          exercises: dayData.exercises.map(() => 0),\r\n-        });\r\n-      }\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  const handleToggle = (type, id) => {\r\n-    setDayData(prevData => {\r\n-      const updatedItems = prevData[type].map(item =>\r\n-        item.id === id ? { ...item, completed: !item.completed } : item\r\n-      );\r\n-      return { ...prevData, [type]: updatedItems };\r\n-    });\r\n-  };\r\n-\r\n-  const handleRatingChange = (type, index, rating) => {\r\n-    setFeedback(prevFeedback => ({\r\n-      ...prevFeedback,\r\n-      [type]: prevFeedback[type].map((score, i) => (i === index ? rating : score)),\r\n-    }));\r\n-  };\r\n-\r\n-  const onSaveFeedback = () => {\r\n-    const feedbackData = {\r\n-      dayNumber,\r\n-      feedback,\r\n-    };\r\n-\r\n-    fetch('/save_feedback', {\r\n-      method: 'POST',\r\n-      headers: {\r\n-        'Content-Type': 'application/json',\r\n-      },\r\n-      body: JSON.stringify(feedbackData),\r\n-    })\r\n-      .then(response => response.json())\r\n-      .then(data => {\r\n-        alert('Comentarios guardados con √©xito');\r\n-      })\r\n-      .catch(error => {\r\n-        console.error('Error al guardar comentarios:', error);\r\n-      });\r\n-  };\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n-        D√≠a {dayNumber}: {dayData.date}\r\n-      </h1>\r\n-      \r\n-      {/* Secci√≥n de Comidas */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Comidas</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map((meal, index) => (\r\n-            <div key={meal.id} className=\"item\">\r\n-              <span className=\"item-icon\">{meal.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{meal.name}</p>\r\n-                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n-                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n-                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n-                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n-              </div>\r\n-              <div className=\"feedback-rating\">\r\n-                <label>Utilidad: </label>\r\n-                {[1, 2, 3, 4, 5].map(star => (\r\n-                  <button\r\n-                    key={star}\r\n-                    onClick={() => handleRatingChange('meals', index, star)}\r\n-                    className={feedback.meals[index] >= star ? 'active' : ''}\r\n-                  >\r\n-                    ‚òÖ\r\n-                  </button>\r\n-                ))}\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Secci√≥n de Ejercicios */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Ejercicios</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.exercises.map((exercise, index) => (\r\n-            <div key={exercise.id} className=\"item\">\r\n-              <span className=\"item-icon\">{exercise.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{exercise.name}</p>\r\n-                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n-                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n-                <p>Equipamiento: {exercise.details.equipment}</p>\r\n-                <p>Intensidad: {exercise.details.Intensity}</p>\r\n-              </div>\r\n-              <div className=\"feedback-rating\">\r\n-                <label>Utilidad: </label>\r\n-                {[1, 2, 3, 4, 5].map(star => (\r\n-                  <button\r\n-                    key={star}\r\n-                    onClick={() => handleRatingChange('exercises', index, star)}\r\n-                    className={feedback.exercises[index] >= star ? 'active' : ''}\r\n-                  >\r\n-                    ‚òÖ\r\n-                  </button>\r\n-                ))}\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-\r\n-      {/* Botones */}\r\n-      <div className=\"buttons-container\">\r\n-        <button onClick={onEndDay} className=\"button button-secondary\">\r\n-          Terminar plan\r\n-        </button>\r\n-        <button onClick={onSaveFeedback} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n-          Guardar comentarios\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n-// frontend/components/DayPlan.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [isCompleted, setIsCompleted] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    if (plan && plan.dias) {\r\n-      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n-      if (selectedDayData) {\r\n-        const dayData = {\r\n-          meals: selectedDayData.recetas.map((receta, index) => ({\r\n-            id: index + 1,\r\n-            name: receta.Recipe_name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üçΩÔ∏è',\r\n-            details: receta,\r\n-          })),\r\n-          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n-            id: index + 1,\r\n-            name: ejercicio.name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üèãÔ∏è',\r\n-            details: ejercicio,\r\n-          })),\r\n-        };\r\n-        setDayData(dayData);\r\n-      }\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      {/* N√∫mero de d√≠a eliminado */}\r\n-      {/* Comidas y ejercicios aqu√≠ */}\r\n-      {/* Botones de completar y guardar progreso */}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n-// frontend/components/DayPlan.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [isCompleted, setIsCompleted] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    if (plan && plan.dias) {\r\n-      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n-      if (selectedDayData) {\r\n-        const dayData = {\r\n-          meals: selectedDayData.recetas.map((receta, index) => ({\r\n-            id: index + 1,\r\n-            name: receta.Recipe_name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üçΩÔ∏è',\r\n-            details: receta,\r\n-          })),\r\n-          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n-            id: index + 1,\r\n-            name: ejercicio.name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üèãÔ∏è',\r\n-            details: ejercicio,\r\n-          })),\r\n-        };\r\n-        setDayData(dayData);\r\n-      }\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      {/* N√∫mero de d√≠a eliminado */}\r\n-      {/* Comidas y ejercicios aqu√≠ */}\r\n-      {/* Botones de completar y guardar progreso */}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n-// frontend/components/DayPlan.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n-  const [dayData, setDayData] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [isCompleted, setIsCompleted] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    if (plan && plan.dias) {\r\n-      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n-      if (selectedDayData) {\r\n-        const dayData = {\r\n-          date: `D√≠a ${dayNumber}`,\r\n-          meals: selectedDayData.recetas.map((receta, index) => ({\r\n-            id: index + 1,\r\n-            name: receta.Recipe_name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üçΩÔ∏è',\r\n-            details: receta,\r\n-          })),\r\n-          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n-            id: index + 1,\r\n-            name: ejercicio.name,\r\n-            time: '',\r\n-            completed: false,\r\n-            icon: 'üèãÔ∏è',\r\n-            details: ejercicio,\r\n-          })),\r\n-        };\r\n-        setDayData(dayData);\r\n-      }\r\n-      setLoading(false);\r\n-    }\r\n-  }, [plan, dayNumber]);\r\n-\r\n-  // Verificar si todas las comidas y ejercicios est√°n completos\r\n-  useEffect(() => {\r\n-    if (dayData) {\r\n-      const allCompleted = [...dayData.meals, ...dayData.exercises].every(item => item.completed);\r\n-      setIsCompleted(allCompleted);\r\n-    }\r\n-  }, [dayData]);\r\n-\r\n-  const handleToggle = (type, id) => {\r\n-    setDayData(prevData => {\r\n-      const updatedItems = prevData[type].map(item =>\r\n-        item.id === id ? { ...item, completed: !item.completed } : item\r\n-      );\r\n-      return { ...prevData, [type]: updatedItems };\r\n-    });\r\n-  };\r\n-\r\n-  const onSaveChanges = () => {\r\n-    if (isCompleted) {\r\n-      // Marcar d√≠a como completado y actualizar backend\r\n-      fetch('/update_progress', {\r\n-        method: 'POST',\r\n-        headers: {\r\n-          'Content-Type': 'application/json',\r\n-        },\r\n-        body: JSON.stringify({ dayNumber, completed: true }),\r\n-      })\r\n-      .then(response => response.json())\r\n-      .then(data => {\r\n-        alert('D√≠a completado. El progreso se ha guardado.');\r\n-        onEndDay(); // Notificar que el d√≠a se complet√≥\r\n-      })\r\n-      .catch(error => {\r\n-        console.error('Error saving progress:', error);\r\n-      });\r\n-    } else {\r\n-      alert('Debes completar todas las tareas del d√≠a antes de guardar.');\r\n-    }\r\n-  };\r\n-\r\n-  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"day-plan-container\">\r\n-      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n-        D√≠a {dayNumber}: {dayData.date}\r\n-      </h1>\r\n-      {/* Comidas */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Comidas</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"item\">\r\n-              <span className=\"item-icon\">{meal.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{meal.name}</p>\r\n-                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n-                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n-                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n-                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Ejercicios */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Ejercicios</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"item\">\r\n-              <span className=\"item-icon\">{exercise.icon}</span>\r\n-              <div className=\"item-details\">\r\n-                <p className=\"item-name\">{exercise.name}</p>\r\n-                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n-                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n-                <p>Equipamiento: {exercise.details.equipment}</p>\r\n-                <p>Intensidad: {exercise.details.Intensity}</p>\r\n-                {exercise.details.gifUrl ? (\r\n-                  <img \r\n-                    src={exercise.details.gifUrl} \r\n-                    alt={exercise.name} \r\n-                    className=\"exercise-gif\" \r\n-                    onError={(e) => e.target.style.display = 'none'}\r\n-                  />\r\n-                ) : (\r\n-                  <p>GIF no disponible</p>\r\n-                )}\r\n-              </div>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      {/* Feedback */}\r\n-      <section className=\"section\">\r\n-        <h2 className=\"section-title\">Feedback</h2>\r\n-        <div className=\"items-container\">\r\n-          {dayData.meals.map(meal => (\r\n-            <div key={meal.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{meal.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={meal.completed}\r\n-                  onChange={() => handleToggle('meals', meal.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-          {dayData.exercises.map(exercise => (\r\n-            <div key={exercise.id} className=\"feedback-item\">\r\n-              <p className=\"feedback-name\">{exercise.name}</p>\r\n-              <label className=\"switch\">\r\n-                <input\r\n-                  type=\"checkbox\"\r\n-                  checked={exercise.completed}\r\n-                  onChange={() => handleToggle('exercises', exercise.id)}\r\n-                />\r\n-                <span className=\"slider\"></span>\r\n-              </label>\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n-      </section>\r\n-      <div className=\"buttons-container\">\r\n-        <button onClick={onEndDay} className=\"button button-secondary\">\r\n-          Terminar plan\r\n-        </button>\r\n-        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n-          Guardar cambios\r\n-        </button>\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default DayPlan;\r\n"
                },
                {
                    "date": 1731010004100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,139 @@\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay, onCompleteDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+      if (selectedDayData) {\r\n+        // Recupera el estado del d√≠a desde localStorage\r\n+        const savedData = JSON.parse(localStorage.getItem(`day_${dayNumber}_data`)) || {};\r\n+        \r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            completed: savedData.meals?.[index]?.completed || false,\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            completed: savedData.exercises?.[index]?.completed || false,\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+        setDayData(dayData);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      const newData = { ...prevData, [type]: updatedItems };\r\n+\r\n+      // Guarda el estado en localStorage\r\n+      localStorage.setItem(`day_${dayNumber}_data`, JSON.stringify(newData));\r\n+      return newData;\r\n+    });\r\n+  };\r\n+\r\n+  const isDayComplete = () => {\r\n+    return dayData.meals.every(meal => meal.completed) &&\r\n+           dayData.exercises.every(exercise => exercise.completed);\r\n+  };\r\n+\r\n+  const onSaveChanges = () => {\r\n+    if (isDayComplete()) {\r\n+      onCompleteDay(dayNumber); // Marca el d√≠a como completo\r\n+    } else {\r\n+      alert('Debes completar todas las comidas y ejercicios antes de guardar.');\r\n+    }\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      \r\n+      {/* Secci√≥n de Comidas */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={meal.completed}\r\n+                  onChange={() => handleToggle('meals', meal.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Secci√≥n de Ejercicios */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+              </div>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={exercise.completed}\r\n+                  onChange={() => handleToggle('exercises', exercise.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Botones */}\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar cambios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1731010181271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,141 @@\n+import React, { useState, useEffect } from 'react';\r\n+import '../styles/DayPlan.css';\r\n+\r\n+const DayPlan = ({ dayNumber, plan, onEndDay, onCompleteDay }) => {\r\n+  const [dayData, setDayData] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+\r\n+  useEffect(() => {\r\n+    if (plan && plan.dias) {\r\n+      const selectedDayData = plan.dias.find(dia => dia.dia === dayNumber);\r\n+\r\n+      // Intentamos recuperar el estado guardado de localStorage\r\n+      const savedDayData = JSON.parse(localStorage.getItem(`dayData_${dayNumber}`));\r\n+\r\n+      if (selectedDayData) {\r\n+        const dayData = {\r\n+          date: `D√≠a ${dayNumber}`,\r\n+          meals: selectedDayData.recetas.map((receta, index) => ({\r\n+            id: index + 1,\r\n+            name: receta.Recipe_name,\r\n+            completed: savedDayData?.meals[index]?.completed || false, // Recuperamos el estado guardado si existe\r\n+            icon: 'üçΩÔ∏è',\r\n+            details: receta,\r\n+          })),\r\n+          exercises: selectedDayData.ejercicios.map((ejercicio, index) => ({\r\n+            id: index + 1,\r\n+            name: ejercicio.name,\r\n+            completed: savedDayData?.exercises[index]?.completed || false, // Recuperamos el estado guardado si existe\r\n+            icon: 'üèãÔ∏è',\r\n+            details: ejercicio,\r\n+          })),\r\n+        };\r\n+        setDayData(dayData);\r\n+      }\r\n+      setLoading(false);\r\n+    }\r\n+  }, [plan, dayNumber]);\r\n+\r\n+  const handleToggle = (type, id) => {\r\n+    setDayData(prevData => {\r\n+      const updatedItems = prevData[type].map(item =>\r\n+        item.id === id ? { ...item, completed: !item.completed } : item\r\n+      );\r\n+      const updatedDayData = { ...prevData, [type]: updatedItems };\r\n+\r\n+      // Guardamos el estado actualizado en localStorage\r\n+      localStorage.setItem(`dayData_${dayNumber}`, JSON.stringify(updatedDayData));\r\n+      \r\n+      return updatedDayData;\r\n+    });\r\n+  };\r\n+\r\n+  const isDayComplete = () => {\r\n+    return dayData.meals.every(meal => meal.completed) &&\r\n+           dayData.exercises.every(exercise => exercise.completed);\r\n+  };\r\n+\r\n+  const onSaveChanges = () => {\r\n+    if (isDayComplete()) {\r\n+      onCompleteDay(dayNumber); // Marca el d√≠a como completo\r\n+    } else {\r\n+      alert('Debes completar todas las comidas y ejercicios antes de guardar.');\r\n+    }\r\n+  };\r\n+\r\n+  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"day-plan-container\">\r\n+      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n+        D√≠a {dayNumber}: {dayData.date}\r\n+      </h1>\r\n+      \r\n+      {/* Secci√≥n de Comidas */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Comidas</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.meals.map(meal => (\r\n+            <div key={meal.id} className=\"item\">\r\n+              <span className=\"item-icon\">{meal.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{meal.name}</p>\r\n+                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n+                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n+                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n+                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n+              </div>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={meal.completed}\r\n+                  onChange={() => handleToggle('meals', meal.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Secci√≥n de Ejercicios */}\r\n+      <section className=\"section\">\r\n+        <h2 className=\"section-title\">Ejercicios</h2>\r\n+        <div className=\"items-container\">\r\n+          {dayData.exercises.map(exercise => (\r\n+            <div key={exercise.id} className=\"item\">\r\n+              <span className=\"item-icon\">{exercise.icon}</span>\r\n+              <div className=\"item-details\">\r\n+                <p className=\"item-name\">{exercise.name}</p>\r\n+                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n+                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n+                <p>Equipamiento: {exercise.details.equipment}</p>\r\n+                <p>Intensidad: {exercise.details.Intensity}</p>\r\n+              </div>\r\n+              <label className=\"switch\">\r\n+                <input\r\n+                  type=\"checkbox\"\r\n+                  checked={exercise.completed}\r\n+                  onChange={() => handleToggle('exercises', exercise.id)}\r\n+                />\r\n+                <span className=\"slider\"></span>\r\n+              </label>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n+      </section>\r\n+\r\n+      {/* Botones */}\r\n+      <div className=\"buttons-container\">\r\n+        <button onClick={onEndDay} className=\"button button-secondary\">\r\n+          Terminar plan\r\n+        </button>\r\n+        <button onClick={onSaveChanges} className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n+          Guardar cambios\r\n+        </button>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default DayPlan;\r\n"
                }
            ],
            "date": 1730734249235,
            "name": "Commit-0",
            "content": "// frontend/components/DayPlan.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../styles/DayPlan.css';\r\n\r\nconst DayPlan = ({ dayNumber, plan, onEndDay }) => {\r\n  const [dayData, setDayData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (plan) {\r\n      const dayData = {\r\n        date: `D√≠a ${dayNumber}`,\r\n        meals: plan.recetas.map((receta, index) => ({\r\n          id: index + 1,\r\n          name: receta.Recipe_name,\r\n          time: '', // Puedes asignar horarios si lo deseas\r\n          completed: false,\r\n          icon: 'üçΩÔ∏è', // Puedes asignar iconos seg√∫n el tipo de comida\r\n          details: receta,\r\n        })),\r\n        exercises: plan.ejercicios.map((ejercicio, index) => ({\r\n          id: index + 1,\r\n          name: ejercicio.name,\r\n          time: '', // Puedes asignar horarios si lo deseas\r\n          completed: false,\r\n          icon: 'üèãÔ∏è', // Puedes asignar iconos seg√∫n el tipo de ejercicio\r\n          details: ejercicio,\r\n        })),\r\n      };\r\n\r\n      setDayData(dayData);\r\n      setLoading(false);\r\n    }\r\n  }, [plan, dayNumber]);\r\n\r\n  const handleToggle = (type, id) => {\r\n    setDayData(prevData => {\r\n      const updatedItems = prevData[type].map(item =>\r\n        item.id === id ? { ...item, completed: !item.completed } : item\r\n      );\r\n      return { ...prevData, [type]: updatedItems };\r\n    });\r\n  };\r\n\r\n  if (loading || !dayData) return <p className=\"text-center\">Cargando los datos del d√≠a...</p>;\r\n\r\n  return (\r\n    <div className=\"day-plan-container\">\r\n      <h1 className=\"text-2xl font-bold mb-6 text-center\">\r\n        D√≠a {dayNumber}: {dayData.date}\r\n      </h1>\r\n      {/* Secci√≥n de Comidas */}\r\n      <section className=\"section\">\r\n        <h2 className=\"section-title\">Comidas</h2>\r\n        <div className=\"items-container\">\r\n          {dayData.meals.map(meal => (\r\n            <div key={meal.id} className=\"item\">\r\n              <span className=\"item-icon\">{meal.icon}</span>\r\n              <div className=\"item-details\">\r\n                <p className=\"item-name\">{meal.name}</p>\r\n                <p className=\"item-time\">{meal.time}</p>\r\n                <p>Calor√≠as: {meal.details.Calories.toFixed(0)} kcal</p>\r\n                <p>Prote√≠nas: {meal.details['Protein(g)']}g</p>\r\n                <p>Carbohidratos: {meal.details['Carbs(g)']}g</p>\r\n                <p>Grasas: {meal.details['Fat(g)']}g</p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </section>\r\n      {/* Secci√≥n de Ejercicios */}\r\n      <section className=\"section\">\r\n        <h2 className=\"section-title\">Ejercicios</h2>\r\n        <div className=\"items-container\">\r\n          {dayData.exercises.map(exercise => (\r\n            <div key={exercise.id} className=\"item\">\r\n              <span className=\"item-icon\">{exercise.icon}</span>\r\n              <div className=\"item-details\">\r\n                <p className=\"item-name\">{exercise.name}</p>\r\n                <p className=\"item-time\">{exercise.time}</p>\r\n                <p>Parte del Cuerpo: {exercise.details.bodyPart}</p>\r\n                <p>Objetivo Muscular: {exercise.details.target}</p>\r\n                <p>Equipamiento: {exercise.details.equipment}</p>\r\n                <p>Intensidad: {exercise.details.Intensity}</p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </section>\r\n      {/* Secci√≥n de Feedback */}\r\n      <section className=\"section\">\r\n        <h2 className=\"section-title\">Feedback</h2>\r\n        <div className=\"items-container\">\r\n          {dayData.meals.map(meal => (\r\n            <div key={meal.id} className=\"feedback-item\">\r\n              <p className=\"feedback-name\">{meal.name}</p>\r\n              <label className=\"switch\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={meal.completed}\r\n                  onChange={() => handleToggle('meals', meal.id)}\r\n                />\r\n                <span className=\"slider\"></span>\r\n              </label>\r\n            </div>\r\n          ))}\r\n          {dayData.exercises.map(exercise => (\r\n            <div key={exercise.id} className=\"feedback-item\">\r\n              <p className=\"feedback-name\">{exercise.name}</p>\r\n              <label className=\"switch\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={exercise.completed}\r\n                  onChange={() => handleToggle('exercises', exercise.id)}\r\n                />\r\n                <span className=\"slider\"></span>\r\n              </label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </section>\r\n      {/* Botones */}\r\n      <div className=\"buttons-container\">\r\n        <button onClick={onEndDay} className=\"button button-secondary\">\r\n          Terminar plan\r\n        </button>\r\n        <button className=\"px-6 py-3 bg-yellow-500 text-white rounded-lg font-bold hover:bg-yellow-600\">\r\n          Guardar cambios\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayPlan;\r\n"
        }
    ]
}