{
    "sourceFile": "frontend/src/App.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 23,
            "patches": [
                {
                    "date": 1730404735071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730404763721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });                    \r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730405080445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,73 +17,12 @@\n             const checkUserPlan = async () => {\r\n                 try {\r\n                     const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n                         headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });                    \r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n                     }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n                     const data = await response.json();\r\n                     setHasPlan(data.hasPlan);\r\n                     if (data.hasPlan) {\r\n                         setPlan(data.plan); // Guardar el plan si ya existe\r\n@@ -124,5 +63,5 @@\n         </div>\r\n     );\r\n };\r\n \r\n-export default App;\n\\ No newline at end of file\n+export default App;\r\n"
                },
                {
                    "date": 1730405483595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n                     if (!response.ok) {\r\n                         throw new Error(`HTTP error! status: ${response.status}`);\r\n                     }\r\n                     const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n+                    setHasPlan(data.hasPlan); // Solo cambia a true si el usuario ya tiene un plan\r\n                     if (data.hasPlan) {\r\n                         setPlan(data.plan); // Guardar el plan si ya existe\r\n                     }\r\n                 } catch (error) {\r\n@@ -46,8 +46,13 @@\n     const handleEndDay = () => {\r\n         setCurrentDay(null); // Volver a la vista general después de completar un día\r\n     };\r\n \r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n     return (\r\n         <div className=\"App\">\r\n             {isAuthenticated && <Navbar />}\r\n \r\n@@ -57,9 +62,9 @@\n                 <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n             ) : hasPlan ? (\r\n                 <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n             ) : (\r\n-                <Form setPlan={setPlan} />\r\n+                <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n             )}\r\n         </div>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1730406295374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+  const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+  useEffect(() => {\r\n+    // Verificar si el usuario tiene un plan cuando se autentica\r\n+    if (isAuthenticated) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan); // Solo cambia a true si el usuario ya tiene un plan\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan); // Guardar el plan si ya existe\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setCurrentDay(1); // Iniciar el primer día del plan\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan); // Guardar el nuevo plan creado\r\n+    setHasPlan(true); // Ahora el usuario tiene un plan\r\n+  };\r\n+\r\n+  const handleDeletePlan = () => {\r\n+    setPlan(null);\r\n+    setHasPlan(false);\r\n+    // Aquí también podrías hacer una llamada a la API para eliminar el plan en el backend si es necesario\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar />}\r\n+\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : currentDay ? (\r\n+        <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730406549689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+  const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+  useEffect(() => {\r\n+    // Verificar si el usuario tiene un plan cuando se autentica\r\n+    if (isAuthenticated) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan); // Solo cambia a true si el usuario ya tiene un plan\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan); // Guardar el plan si ya existe\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setCurrentDay(1); // Iniciar el primer día del plan\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan); // Guardar el nuevo plan creado\r\n+    setHasPlan(true); // Ahora el usuario tiene un plan\r\n+  };\r\n+\r\n+  const handleDeletePlan = () => {\r\n+    setPlan(null);\r\n+    setHasPlan(false);\r\n+    // Aquí también podrías hacer una llamada a la API para eliminar el plan en el backend si es necesario\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar />}\r\n+\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : currentDay ? (\r\n+        <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730406607788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730406633391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                   const response = await fetch('/api/check-plan', {\r\n+    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+});\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730406663320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730406706145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                   const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+});\r\n+\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730406712205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730406733034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                   const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+});\r\n+\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730407009279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730407168315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan);\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            \r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730407334708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan); // Guardar el plan si ya existe\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            \r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+        setHasPlan(false); // Reinicia el estado de `hasPlan` en cada nuevo inicio de sesión\r\n+        setPlan(null); // Reinicia el plan en cada inicio de sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan && plan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730407992449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+    const [hasPlan, setHasPlan] = useState(false);\r\n+    const [plan, setPlan] = useState(null);\r\n+    const [currentDay, setCurrentDay] = useState(null);\r\n+\r\n+    useEffect(() => {\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan);\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true);\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1);\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null);\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setHasPlan(false);\r\n+        setPlan(null);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730408228088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+    const [hasPlan, setHasPlan] = useState(false);\r\n+    const [plan, setPlan] = useState(null);\r\n+    const [currentDay, setCurrentDay] = useState(null);\r\n+\r\n+    useEffect(() => {\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan);\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true);\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1);\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null);\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setHasPlan(false);\r\n+        setPlan(null);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730408612210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan); // Guardar el plan si ya existe\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            \r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setHasPlan(false);\r\n+        setPlan(null);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan && plan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730408806932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    } else {\r\n+                        setPlan(null); // Asegurarse de que el plan sea null si no existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                    setHasPlan(false);\r\n+                    setPlan(null);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setPlan(null);\r\n+        setHasPlan(false);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730408822585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan); // Guardar el plan si ya existe\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            \r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setHasPlan(false);\r\n+        setPlan(null);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan && plan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730408957158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan);\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setPlan(null);\r\n+        setHasPlan(false);\r\n+        // Aquí podrías agregar lógica para eliminar el plan del backend si es necesario\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730408971071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan); // Guardar el plan si ya existe\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            \r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setHasPlan(false);\r\n+        setPlan(null);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan && plan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730409085773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,283 +21,15 @@\n                     });\r\n                     if (!response.ok) {\r\n                         throw new Error(`HTTP error! status: ${response.status}`);\r\n                     }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan); // Guardar el plan si ya existe\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            \r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setHasPlan(false);\r\n-        setPlan(null);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan && plan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan);\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setPlan(null);\r\n-        setHasPlan(false);\r\n-        // Aquí podrías agregar lógica para eliminar el plan del backend si es necesario\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan); // Guardar el plan si ya existe\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            \r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setHasPlan(false);\r\n-        setPlan(null);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan && plan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n                     const data = await response.json();\r\n                     setHasPlan(data.hasPlan);\r\n                     if (data.hasPlan) {\r\n                         setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    } else {\r\n-                        setPlan(null); // Asegurarse de que el plan sea null si no existe\r\n                     }\r\n                 } catch (error) {\r\n                     console.error('Error al verificar el plan del usuario:', error);\r\n-                    setHasPlan(false);\r\n-                    setPlan(null);\r\n                 }\r\n             };\r\n             checkUserPlan();\r\n         }\r\n@@ -322,8 +54,9 @@\n \r\n     const handleDeletePlan = () => {\r\n         setPlan(null);\r\n         setHasPlan(false);\r\n+        // Aquí puedes agregar lógica para eliminar el plan del backend si es necesario\r\n     };\r\n \r\n     return (\r\n         <div className=\"App\">\r\n@@ -333,1096 +66,17 @@\n                 <Login onLogin={handleLogin} />\r\n             ) : currentDay ? (\r\n                 <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n             ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan); // Guardar el plan si ya existe\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            \r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setHasPlan(false);\r\n-        setPlan(null);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan && plan ? (\r\n                 <NutritionPlan\r\n                     plan={plan}\r\n                     onStartFirstDay={handleStartFirstDay}\r\n                     onDeletePlan={handleDeletePlan}\r\n                 />\r\n             ) : (\r\n-                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n+                <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n             )}\r\n         </div>\r\n     );\r\n };\r\n \r\n export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-    const [hasPlan, setHasPlan] = useState(false);\r\n-    const [plan, setPlan] = useState(null);\r\n-    const [currentDay, setCurrentDay] = useState(null);\r\n-\r\n-    useEffect(() => {\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan);\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true);\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1);\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null);\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setHasPlan(false);\r\n-        setPlan(null);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-    const [hasPlan, setHasPlan] = useState(false);\r\n-    const [plan, setPlan] = useState(null);\r\n-    const [currentDay, setCurrentDay] = useState(null);\r\n-\r\n-    useEffect(() => {\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan);\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true);\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1);\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null);\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setHasPlan(false);\r\n-        setPlan(null);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan); // Guardar el plan si ya existe\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            \r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-        setHasPlan(false); // Reinicia el estado de `hasPlan` en cada nuevo inicio de sesión\r\n-        setPlan(null); // Reinicia el plan en cada inicio de sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan && plan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan);\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            \r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                   const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-});\r\n-\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                   const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-});\r\n-\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                   const response = await fetch('/api/check-plan', {\r\n-    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-});\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-  const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-  useEffect(() => {\r\n-    // Verificar si el usuario tiene un plan cuando se autentica\r\n-    if (isAuthenticated) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan); // Solo cambia a true si el usuario ya tiene un plan\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan); // Guardar el plan si ya existe\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setCurrentDay(1); // Iniciar el primer día del plan\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan); // Guardar el nuevo plan creado\r\n-    setHasPlan(true); // Ahora el usuario tiene un plan\r\n-  };\r\n-\r\n-  const handleDeletePlan = () => {\r\n-    setPlan(null);\r\n-    setHasPlan(false);\r\n-    // Aquí también podrías hacer una llamada a la API para eliminar el plan en el backend si es necesario\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar />}\r\n-\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : currentDay ? (\r\n-        <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-  const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-  useEffect(() => {\r\n-    // Verificar si el usuario tiene un plan cuando se autentica\r\n-    if (isAuthenticated) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan); // Solo cambia a true si el usuario ya tiene un plan\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan); // Guardar el plan si ya existe\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setCurrentDay(1); // Iniciar el primer día del plan\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan); // Guardar el nuevo plan creado\r\n-    setHasPlan(true); // Ahora el usuario tiene un plan\r\n-  };\r\n-\r\n-  const handleDeletePlan = () => {\r\n-    setPlan(null);\r\n-    setHasPlan(false);\r\n-    // Aquí también podrías hacer una llamada a la API para eliminar el plan en el backend si es necesario\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar />}\r\n-\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : currentDay ? (\r\n-        <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan); // Solo cambia a true si el usuario ya tiene un plan\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n\\ No newline at end of file\n-export default App;\n"
                },
                {
                    "date": 1730410892103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan);\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            \r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setPlan(null);\r\n+        setHasPlan(false);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} setHasPlan={setHasPlan} /> // Asegúrate de pasar setHasPlan como prop\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                }
            ],
            "date": 1730404735071,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport Login from './components/Login';\r\nimport Form from './components/Form';\r\nimport NutritionPlan from './components/NutritionPlan';\r\nimport DayPlan from './components/DayPlan';\r\nimport Navbar from './components/Navbar';\r\n\r\nconst App = () => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n\r\n    useEffect(() => {\r\n        // Verificar si el usuario tiene un plan cuando se autentica\r\n        if (isAuthenticated) {\r\n            const checkUserPlan = async () => {\r\n                try {\r\n                    const response = await fetch('/api/check-plan', {\r\n                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n                    });\r\n                    const data = await response.json();\r\n                    setHasPlan(data.hasPlan);\r\n                    if (data.hasPlan) {\r\n                        setPlan(data.plan); // Guardar el plan si ya existe\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error al verificar el plan del usuario:', error);\r\n                }\r\n            };\r\n            checkUserPlan();\r\n        }\r\n    }, [isAuthenticated]);\r\n\r\n    const handleLogin = () => {\r\n        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n    };\r\n\r\n    const handleStartFirstDay = () => {\r\n        setCurrentDay(1); // Iniciar el primer día del plan\r\n    };\r\n\r\n    const handleEndDay = () => {\r\n        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {isAuthenticated && <Navbar />}\r\n\r\n            {!isAuthenticated ? (\r\n                <Login onLogin={handleLogin} />\r\n            ) : currentDay ? (\r\n                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n            ) : hasPlan ? (\r\n                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n            ) : (\r\n                <Form setPlan={setPlan} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;"
        }
    ]
}