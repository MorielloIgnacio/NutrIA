{
    "sourceFile": "frontend/src/App.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 79,
            "patches": [
                {
                    "date": 1730404735071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730404763721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });                    \r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730405080445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,73 +17,12 @@\n             const checkUserPlan = async () => {\r\n                 try {\r\n                     const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n                         headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });                    \r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n                     }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n                     const data = await response.json();\r\n                     setHasPlan(data.hasPlan);\r\n                     if (data.hasPlan) {\r\n                         setPlan(data.plan); // Guardar el plan si ya existe\r\n@@ -124,5 +63,5 @@\n         </div>\r\n     );\r\n };\r\n \r\n-export default App;\n\\ No newline at end of file\n+export default App;\r\n"
                },
                {
                    "date": 1730405483595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n                     if (!response.ok) {\r\n                         throw new Error(`HTTP error! status: ${response.status}`);\r\n                     }\r\n                     const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n+                    setHasPlan(data.hasPlan); // Solo cambia a true si el usuario ya tiene un plan\r\n                     if (data.hasPlan) {\r\n                         setPlan(data.plan); // Guardar el plan si ya existe\r\n                     }\r\n                 } catch (error) {\r\n@@ -46,8 +46,13 @@\n     const handleEndDay = () => {\r\n         setCurrentDay(null); // Volver a la vista general después de completar un día\r\n     };\r\n \r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n     return (\r\n         <div className=\"App\">\r\n             {isAuthenticated && <Navbar />}\r\n \r\n@@ -57,9 +62,9 @@\n                 <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n             ) : hasPlan ? (\r\n                 <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n             ) : (\r\n-                <Form setPlan={setPlan} />\r\n+                <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n             )}\r\n         </div>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1730406295374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+  const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+  useEffect(() => {\r\n+    // Verificar si el usuario tiene un plan cuando se autentica\r\n+    if (isAuthenticated) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan); // Solo cambia a true si el usuario ya tiene un plan\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan); // Guardar el plan si ya existe\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setCurrentDay(1); // Iniciar el primer día del plan\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan); // Guardar el nuevo plan creado\r\n+    setHasPlan(true); // Ahora el usuario tiene un plan\r\n+  };\r\n+\r\n+  const handleDeletePlan = () => {\r\n+    setPlan(null);\r\n+    setHasPlan(false);\r\n+    // Aquí también podrías hacer una llamada a la API para eliminar el plan en el backend si es necesario\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar />}\r\n+\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : currentDay ? (\r\n+        <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730406549689,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+  const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+  useEffect(() => {\r\n+    // Verificar si el usuario tiene un plan cuando se autentica\r\n+    if (isAuthenticated) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan); // Solo cambia a true si el usuario ya tiene un plan\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan); // Guardar el plan si ya existe\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setCurrentDay(1); // Iniciar el primer día del plan\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan); // Guardar el nuevo plan creado\r\n+    setHasPlan(true); // Ahora el usuario tiene un plan\r\n+  };\r\n+\r\n+  const handleDeletePlan = () => {\r\n+    setPlan(null);\r\n+    setHasPlan(false);\r\n+    // Aquí también podrías hacer una llamada a la API para eliminar el plan en el backend si es necesario\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar />}\r\n+\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : currentDay ? (\r\n+        <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730406607788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730406633391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                   const response = await fetch('/api/check-plan', {\r\n+    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+});\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730406663320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730406706145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                   const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+});\r\n+\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730406712205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730406733034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                   const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+});\r\n+\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730407009279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,64 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730407168315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan);\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            \r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1730407334708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan); // Guardar el plan si ya existe\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            \r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+        setHasPlan(false); // Reinicia el estado de `hasPlan` en cada nuevo inicio de sesión\r\n+        setPlan(null); // Reinicia el plan en cada inicio de sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan && plan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730407992449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+    const [hasPlan, setHasPlan] = useState(false);\r\n+    const [plan, setPlan] = useState(null);\r\n+    const [currentDay, setCurrentDay] = useState(null);\r\n+\r\n+    useEffect(() => {\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan);\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true);\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1);\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null);\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setHasPlan(false);\r\n+        setPlan(null);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730408228088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+    const [hasPlan, setHasPlan] = useState(false);\r\n+    const [plan, setPlan] = useState(null);\r\n+    const [currentDay, setCurrentDay] = useState(null);\r\n+\r\n+    useEffect(() => {\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan);\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true);\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1);\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null);\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setHasPlan(false);\r\n+        setPlan(null);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730408612210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan); // Guardar el plan si ya existe\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            \r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setHasPlan(false);\r\n+        setPlan(null);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan && plan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730408806932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    } else {\r\n+                        setPlan(null); // Asegurarse de que el plan sea null si no existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                    setHasPlan(false);\r\n+                    setPlan(null);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setPlan(null);\r\n+        setHasPlan(false);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730408822585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan); // Guardar el plan si ya existe\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            \r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setHasPlan(false);\r\n+        setPlan(null);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan && plan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730408957158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan);\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setPlan(null);\r\n+        setHasPlan(false);\r\n+        // Aquí podrías agregar lógica para eliminar el plan del backend si es necesario\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730408971071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan); // Guardar el plan si ya existe\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            \r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setHasPlan(false);\r\n+        setPlan(null);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan && plan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730409085773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,283 +21,15 @@\n                     });\r\n                     if (!response.ok) {\r\n                         throw new Error(`HTTP error! status: ${response.status}`);\r\n                     }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan); // Guardar el plan si ya existe\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            \r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setHasPlan(false);\r\n-        setPlan(null);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan && plan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan);\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setPlan(null);\r\n-        setHasPlan(false);\r\n-        // Aquí podrías agregar lógica para eliminar el plan del backend si es necesario\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan); // Guardar el plan si ya existe\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            \r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setHasPlan(false);\r\n-        setPlan(null);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan && plan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n                     const data = await response.json();\r\n                     setHasPlan(data.hasPlan);\r\n                     if (data.hasPlan) {\r\n                         setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    } else {\r\n-                        setPlan(null); // Asegurarse de que el plan sea null si no existe\r\n                     }\r\n                 } catch (error) {\r\n                     console.error('Error al verificar el plan del usuario:', error);\r\n-                    setHasPlan(false);\r\n-                    setPlan(null);\r\n                 }\r\n             };\r\n             checkUserPlan();\r\n         }\r\n@@ -322,8 +54,9 @@\n \r\n     const handleDeletePlan = () => {\r\n         setPlan(null);\r\n         setHasPlan(false);\r\n+        // Aquí puedes agregar lógica para eliminar el plan del backend si es necesario\r\n     };\r\n \r\n     return (\r\n         <div className=\"App\">\r\n@@ -333,1096 +66,17 @@\n                 <Login onLogin={handleLogin} />\r\n             ) : currentDay ? (\r\n                 <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n             ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan); // Guardar el plan si ya existe\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            \r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setHasPlan(false);\r\n-        setPlan(null);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan && plan ? (\r\n                 <NutritionPlan\r\n                     plan={plan}\r\n                     onStartFirstDay={handleStartFirstDay}\r\n                     onDeletePlan={handleDeletePlan}\r\n                 />\r\n             ) : (\r\n-                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n+                <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n             )}\r\n         </div>\r\n     );\r\n };\r\n \r\n export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-    const [hasPlan, setHasPlan] = useState(false);\r\n-    const [plan, setPlan] = useState(null);\r\n-    const [currentDay, setCurrentDay] = useState(null);\r\n-\r\n-    useEffect(() => {\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan);\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true);\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1);\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null);\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setHasPlan(false);\r\n-        setPlan(null);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-    const [hasPlan, setHasPlan] = useState(false);\r\n-    const [plan, setPlan] = useState(null);\r\n-    const [currentDay, setCurrentDay] = useState(null);\r\n-\r\n-    useEffect(() => {\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan);\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true);\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1);\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null);\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setHasPlan(false);\r\n-        setPlan(null);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);  // Solo cambia a true si el usuario ya tiene un plan\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan); // Guardar el plan si ya existe\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            \r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-        setHasPlan(false); // Reinicia el estado de `hasPlan` en cada nuevo inicio de sesión\r\n-        setPlan(null); // Reinicia el plan en cada inicio de sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan && plan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} /> // Muestra el formulario si no tiene un plan\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan);\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            \r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                   const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-});\r\n-\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                   const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-});\r\n-\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                   const response = await fetch('/api/check-plan', {\r\n-    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-});\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-  const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-  useEffect(() => {\r\n-    // Verificar si el usuario tiene un plan cuando se autentica\r\n-    if (isAuthenticated) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan); // Solo cambia a true si el usuario ya tiene un plan\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan); // Guardar el plan si ya existe\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setCurrentDay(1); // Iniciar el primer día del plan\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan); // Guardar el nuevo plan creado\r\n-    setHasPlan(true); // Ahora el usuario tiene un plan\r\n-  };\r\n-\r\n-  const handleDeletePlan = () => {\r\n-    setPlan(null);\r\n-    setHasPlan(false);\r\n-    // Aquí también podrías hacer una llamada a la API para eliminar el plan en el backend si es necesario\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar />}\r\n-\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : currentDay ? (\r\n-        <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-  const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-  useEffect(() => {\r\n-    // Verificar si el usuario tiene un plan cuando se autentica\r\n-    if (isAuthenticated) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan); // Solo cambia a true si el usuario ya tiene un plan\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan); // Guardar el plan si ya existe\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setCurrentDay(1); // Iniciar el primer día del plan\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan); // Guardar el nuevo plan creado\r\n-    setHasPlan(true); // Ahora el usuario tiene un plan\r\n-  };\r\n-\r\n-  const handleDeletePlan = () => {\r\n-    setPlan(null);\r\n-    setHasPlan(false);\r\n-    // Aquí también podrías hacer una llamada a la API para eliminar el plan en el backend si es necesario\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar />}\r\n-\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : currentDay ? (\r\n-        <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan); // Solo cambia a true si el usuario ya tiene un plan\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n\\ No newline at end of file\n-export default App;\n"
                },
                {
                    "date": 1730410892103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const contentType = response.headers.get('content-type');\r\n+                    if (contentType && contentType.includes('application/json')) {\r\n+                        const data = await response.json();\r\n+                        setHasPlan(data.hasPlan);\r\n+                        if (data.hasPlan) {\r\n+                            setPlan(data.plan);\r\n+                        }\r\n+                    } else {\r\n+                        const text = await response.text();\r\n+                        console.error('Respuesta no JSON recibida:', text);\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            \r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setPlan(null);\r\n+        setHasPlan(false);\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n+            ) : (\r\n+                <Form setPlan={setPlan} setHasPlan={setHasPlan} /> // Asegúrate de pasar setHasPlan como prop\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730732791294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,79 +1,40 @@\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n+// frontend/App.js\r\n+import React, { useState } from 'react';\r\n import Form from './components/Form';\r\n import NutritionPlan from './components/NutritionPlan';\r\n import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n \r\n const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+  const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n \r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const contentType = response.headers.get('content-type');\r\n-                    if (contentType && contentType.includes('application/json')) {\r\n-                        const data = await response.json();\r\n-                        setHasPlan(data.hasPlan);\r\n-                        if (data.hasPlan) {\r\n-                            setPlan(data.plan);\r\n-                        }\r\n-                    } else {\r\n-                        const text = await response.text();\r\n-                        console.error('Respuesta no JSON recibida:', text);\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            \r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n+  const handleStartFirstDay = () => {\r\n+    setCurrentDay(1); // Iniciar el primer día del plan\r\n+  };\r\n \r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n+  const handleEndDay = () => {\r\n+    setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+  };\r\n \r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n+  const handleDeletePlan = () => {\r\n+    setPlan(null); // Eliminar el plan actual\r\n+  };\r\n \r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setPlan(null);\r\n-        setHasPlan(false);\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onDeletePlan={handleDeletePlan} />\r\n-            ) : (\r\n-                <Form setPlan={setPlan} setHasPlan={setHasPlan} /> // Asegúrate de pasar setHasPlan como prop\r\n-            )}\r\n-        </div>\r\n-    );\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {currentDay ? (\r\n+        <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n+      ) : plan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={setPlan} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n };\r\n \r\n export default App;\r\n"
                },
                {
                    "date": 1730732822647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,86 +37,4 @@\n   );\r\n };\r\n \r\n export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setPlan(null);\r\n-        setHasPlan(false);\r\n-        // Aquí puedes agregar lógica para eliminar el plan del backend si es necesario\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n"
                },
                {
                    "date": 1730734145516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,44 @@\n+// frontend/App.js\r\n+import React, { useState } from 'react';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+\r\n+const App = () => {\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [currentDay, setCurrentDay] = useState(null);\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setCurrentDay(1);\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setCurrentDay(null);\r\n+  };\r\n+\r\n+  const handleDeletePlan = () => {\r\n+    setPlan(null);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {currentDay ? (\r\n+        <DayPlan\r\n+          dayNumber={currentDay}\r\n+          plan={plan} // Pasamos el plan al DayPlan\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : plan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={setPlan} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730734560326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,82 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setPlan(null);\r\n+        setHasPlan(false);\r\n+        // Aquí puedes agregar lógica para eliminar el plan del backend si es necesario\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} plan={plan} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730734568257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,82 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    const handleDeletePlan = () => {\r\n+        setPlan(null);\r\n+        setHasPlan(false);\r\n+        // Aquí puedes agregar lógica para eliminar el plan del backend si es necesario\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} plan={plan} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730734676066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+// frontend/App.js\r\n import React, { useState, useEffect } from 'react';\r\n import Login from './components/Login';\r\n import Form from './components/Form';\r\n import NutritionPlan from './components/NutritionPlan';\r\n@@ -11,14 +12,22 @@\n     const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n     const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n \r\n     useEffect(() => {\r\n+        // Verificar si el usuario ya está autenticado (por ejemplo, si hay un token en localStorage)\r\n+        const token = localStorage.getItem('token');\r\n+        if (token) {\r\n+            setIsAuthenticated(true);\r\n+        }\r\n+    }, []);\r\n+\r\n+    useEffect(() => {\r\n         // Verificar si el usuario tiene un plan cuando se autentica\r\n         if (isAuthenticated) {\r\n             const checkUserPlan = async () => {\r\n                 try {\r\n                     const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n                     });\r\n                     if (!response.ok) {\r\n                         throw new Error(`HTTP error! status: ${response.status}`);\r\n                     }\r\n@@ -38,8 +47,16 @@\n     const handleLogin = () => {\r\n         setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n     };\r\n \r\n+    const handleLogout = () => {\r\n+        localStorage.removeItem('token');\r\n+        setIsAuthenticated(false);\r\n+        setHasPlan(false);\r\n+        setPlan(null);\r\n+        setCurrentDay(null);\r\n+    };\r\n+\r\n     const handleStartFirstDay = () => {\r\n         setCurrentDay(1); // Iniciar el primer día del plan\r\n     };\r\n \r\n@@ -51,17 +68,27 @@\n         setPlan(newPlan); // Guardar el nuevo plan creado\r\n         setHasPlan(true); // Ahora el usuario tiene un plan\r\n     };\r\n \r\n-    const handleDeletePlan = () => {\r\n-        setPlan(null);\r\n-        setHasPlan(false);\r\n-        // Aquí puedes agregar lógica para eliminar el plan del backend si es necesario\r\n+    const handleDeletePlan = async () => {\r\n+        try {\r\n+            const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+                method: 'POST',\r\n+                headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+            });\r\n+            if (!response.ok) {\r\n+                throw new Error(`HTTP error! status: ${response.status}`);\r\n+            }\r\n+            setPlan(null);\r\n+            setHasPlan(false);\r\n+        } catch (error) {\r\n+            console.error('Error al eliminar el plan:', error);\r\n+        }\r\n     };\r\n \r\n     return (\r\n         <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n+            {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n \r\n             {!isAuthenticated ? (\r\n                 <Login onLogin={handleLogin} />\r\n             ) : currentDay ? (\r\n@@ -72,9 +99,9 @@\n                     onStartFirstDay={handleStartFirstDay}\r\n                     onDeletePlan={handleDeletePlan}\r\n                 />\r\n             ) : (\r\n-                <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n+                <Form setPlan={handlePlanCreated} />\r\n             )}\r\n         </div>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1730734688662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,109 @@\n+// frontend/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario ya está autenticado (por ejemplo, si hay un token en localStorage)\r\n+        const token = localStorage.getItem('token');\r\n+        if (token) {\r\n+            setIsAuthenticated(true);\r\n+        }\r\n+    }, []);\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleLogout = () => {\r\n+        localStorage.removeItem('token');\r\n+        setIsAuthenticated(false);\r\n+        setHasPlan(false);\r\n+        setPlan(null);\r\n+        setCurrentDay(null);\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    const handleDeletePlan = async () => {\r\n+        try {\r\n+            const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+                method: 'POST',\r\n+                headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+            });\r\n+            if (!response.ok) {\r\n+                throw new Error(`HTTP error! status: ${response.status}`);\r\n+            }\r\n+            setPlan(null);\r\n+            setHasPlan(false);\r\n+        } catch (error) {\r\n+            console.error('Error al eliminar el plan:', error);\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} plan={plan} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730734754547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,109 @@\n+// frontend/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario ya está autenticado (por ejemplo, si hay un token en localStorage)\r\n+        const token = localStorage.getItem('token');\r\n+        if (token) {\r\n+            setIsAuthenticated(true);\r\n+        }\r\n+    }, []);\r\n+\r\n+    useEffect(() => {\r\n+        // Verificar si el usuario tiene un plan cuando se autentica\r\n+        if (isAuthenticated) {\r\n+            const checkUserPlan = async () => {\r\n+                try {\r\n+                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+                    });\r\n+                    if (!response.ok) {\r\n+                        throw new Error(`HTTP error! status: ${response.status}`);\r\n+                    }\r\n+                    const data = await response.json();\r\n+                    setHasPlan(data.hasPlan);\r\n+                    if (data.hasPlan) {\r\n+                        setPlan(data.plan); // Guardar el plan si ya existe\r\n+                    }\r\n+                } catch (error) {\r\n+                    console.error('Error al verificar el plan del usuario:', error);\r\n+                }\r\n+            };\r\n+            checkUserPlan();\r\n+        }\r\n+    }, [isAuthenticated]);\r\n+\r\n+    const handleLogin = () => {\r\n+        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+    };\r\n+\r\n+    const handleLogout = () => {\r\n+        localStorage.removeItem('token');\r\n+        setIsAuthenticated(false);\r\n+        setHasPlan(false);\r\n+        setPlan(null);\r\n+        setCurrentDay(null);\r\n+    };\r\n+\r\n+    const handleStartFirstDay = () => {\r\n+        setCurrentDay(1); // Iniciar el primer día del plan\r\n+    };\r\n+\r\n+    const handleEndDay = () => {\r\n+        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n+    };\r\n+\r\n+    const handlePlanCreated = (newPlan) => {\r\n+        setPlan(newPlan); // Guardar el nuevo plan creado\r\n+        setHasPlan(true); // Ahora el usuario tiene un plan\r\n+    };\r\n+\r\n+    const handleDeletePlan = async () => {\r\n+        try {\r\n+            const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+                method: 'POST',\r\n+                headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+            });\r\n+            if (!response.ok) {\r\n+                throw new Error(`HTTP error! status: ${response.status}`);\r\n+            }\r\n+            setPlan(null);\r\n+            setHasPlan(false);\r\n+        } catch (error) {\r\n+            console.error('Error al eliminar el plan:', error);\r\n+        }\r\n+    };\r\n+\r\n+    return (\r\n+        <div className=\"App\">\r\n+            {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+\r\n+            {!isAuthenticated ? (\r\n+                <Login onLogin={handleLogin} />\r\n+            ) : currentDay ? (\r\n+                <DayPlan dayNumber={currentDay} plan={plan} onEndDay={handleEndDay} />\r\n+            ) : hasPlan ? (\r\n+                <NutritionPlan\r\n+                    plan={plan}\r\n+                    onStartFirstDay={handleStartFirstDay}\r\n+                    onDeletePlan={handleDeletePlan}\r\n+                />\r\n+            ) : (\r\n+                <Form setPlan={handlePlanCreated} />\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730735271944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,120 @@\n+// frontend/src/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+    }\r\n+  }, []);\r\n+\r\n+  // Verificar si el usuario tiene un plan cuando se autentica\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan); // Guardar el plan si ya existe\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  // Función para manejar el inicio de sesión\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+  };\r\n+\r\n+  // Función para manejar el cierre de sesión\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  // Función para iniciar el primer día del plan\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1); // Iniciar el primer día del plan\r\n+  };\r\n+\r\n+  // Función para finalizar el día actual y volver al resumen\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null); // Volver al resumen del plan\r\n+  };\r\n+\r\n+  // Función para manejar la creación de un nuevo plan\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan); // Guardar el nuevo plan creado\r\n+    setHasPlan(true); // Ahora el usuario tiene un plan\r\n+  };\r\n+\r\n+  // Función para eliminar el plan actual\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730753212889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,120 +1,53 @@\n-// frontend/src/App.js\r\n+// frontend/components/DayPlan.js\r\n+\r\n import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n+import '../styles/DayPlan.css';\r\n \r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n+const DayPlan = ({ dayNumber, setDayNumber, plan, onEndDay }) => {\r\n+    const [dayData, setDayData] = useState(null);\r\n \r\n-  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-    }\r\n-  }, []);\r\n-\r\n-  // Verificar si el usuario tiene un plan cuando se autentica\r\n-  useEffect(() => {\r\n-    if (isAuthenticated) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan); // Guardar el plan si ya existe\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n+    useEffect(() => {\r\n+        if (plan && plan.dias) {\r\n+            const diaActual = plan.dias.find(dia => dia.dia === dayNumber);\r\n+            if (diaActual) {\r\n+                setDayData(diaActual);\r\n+            }\r\n         }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated]);\r\n+    }, [plan, dayNumber]);\r\n \r\n-  // Función para manejar el inicio de sesión\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-  };\r\n+    if (!dayData) return <p className=\"text-center\">Cargando los datos del día...</p>;\r\n \r\n-  // Función para manejar el cierre de sesión\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n+    // Renderiza los detalles de dayData.ejercicios y dayData.recetas como antes\r\n \r\n-  // Función para iniciar el primer día del plan\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1); // Iniciar el primer día del plan\r\n-  };\r\n-\r\n-  // Función para finalizar el día actual y volver al resumen\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null); // Volver al resumen del plan\r\n-  };\r\n-\r\n-  // Función para manejar la creación de un nuevo plan\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan); // Guardar el nuevo plan creado\r\n-    setHasPlan(true); // Ahora el usuario tiene un plan\r\n-  };\r\n-\r\n-  // Función para eliminar el plan actual\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n+    return (\r\n+        <div className=\"day-plan-container\">\r\n+            <h1 className=\"text-2xl font-bold mb-6 text-center\">Día {dayNumber}</h1>\r\n+            {/* Mostrar las comidas y ejercicios del día */}\r\n+            {/* ... */}\r\n+            {/* Botones para navegar entre días */}\r\n+            <div className=\"buttons-container\">\r\n+                {dayNumber > 1 && (\r\n+                    <button\r\n+                        onClick={() => setDayNumber(dayNumber - 1)}\r\n+                        className=\"button button-secondary\"\r\n+                    >\r\n+                        Día Anterior\r\n+                    </button>\r\n+                )}\r\n+                {dayNumber < plan.dias.length && (\r\n+                    <button\r\n+                        onClick={() => setDayNumber(dayNumber + 1)}\r\n+                        className=\"button button-primary\"\r\n+                    >\r\n+                        Siguiente Día\r\n+                    </button>\r\n+                )}\r\n+                <button onClick={onEndDay} className=\"button button-secondary\">\r\n+                    Volver al Resumen\r\n+                </button>\r\n+            </div>\r\n+        </div>\r\n+    );\r\n };\r\n \r\n-export default App;\r\n+export default DayPlan;\r\n"
                },
                {
                    "date": 1730754526372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,126 @@\n+// frontend/src/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+    }\r\n+  }, []);\r\n+\r\n+  // Verificar si el usuario tiene un plan cuando se autentica\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan); // Guardar el plan si ya existe\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  // Función para manejar el inicio de sesión\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+  };\r\n+\r\n+  // Función para manejar el cierre de sesión\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  // Función para iniciar el primer día del plan\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1); // Iniciar el primer día del plan\r\n+  };\r\n+\r\n+  // Función para iniciar un día específico del plan\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day); // Cambiar el día actual al día seleccionado\r\n+  };\r\n+\r\n+  // Función para finalizar el día actual y volver al resumen\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null); // Volver al resumen del plan\r\n+  };\r\n+\r\n+  // Función para manejar la creación de un nuevo plan\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan); // Guardar el nuevo plan creado\r\n+    setHasPlan(true); // Ahora el usuario tiene un plan\r\n+  };\r\n+\r\n+  // Función para eliminar el plan actual\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onStartDay={handleStartDay}  // Pasamos la función handleStartDay como prop\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730774271195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+// frontend/src/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [loading, setLoading] = useState(true); // Nuevo estado de carga\r\n+\r\n+  // Verificar autenticación y plan al cargar la aplicación\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      fetchUserPlan(token);\r\n+    }\r\n+    setLoading(false);\r\n+  }, []);\r\n+\r\n+  const fetchUserPlan = async (token) => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+        headers: { 'Authorization': `Bearer ${token}` },\r\n+      });\r\n+      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n+      const data = await response.json();\r\n+      setHasPlan(data.hasPlan);\r\n+      if (data.hasPlan) setPlan(data.plan);\r\n+    } catch (error) {\r\n+      console.error('Error al verificar el plan del usuario:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => setDayNumber(1);\r\n+  const handleStartDay = (day) => setDayNumber(day);\r\n+  const handleEndDay = () => setDayNumber(null);\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Renderizar basado en el estado\r\n+  if (loading) return <p className=\"text-center\">Cargando...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber}\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onStartDay={handleStartDay}\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730774280598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+// frontend/src/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [loading, setLoading] = useState(true); // Nuevo estado de carga\r\n+\r\n+  // Verificar autenticación y plan al cargar la aplicación\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      fetchUserPlan(token);\r\n+    }\r\n+    setLoading(false);\r\n+  }, []);\r\n+\r\n+  const fetchUserPlan = async (token) => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+        headers: { 'Authorization': `Bearer ${token}` },\r\n+      });\r\n+      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n+      const data = await response.json();\r\n+      setHasPlan(data.hasPlan);\r\n+      if (data.hasPlan) setPlan(data.plan);\r\n+    } catch (error) {\r\n+      console.error('Error al verificar el plan del usuario:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => setDayNumber(1);\r\n+  const handleStartDay = (day) => setDayNumber(day);\r\n+  const handleEndDay = () => setDayNumber(null);\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Renderizar basado en el estado\r\n+  if (loading) return <p className=\"text-center\">Cargando...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber}\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onStartDay={handleStartDay}\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730774366343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,107 @@\n+// frontend/src/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [checkingAuth, setCheckingAuth] = useState(true); // Nuevo estado para verificar autenticación\r\n+\r\n+  // Verificar autenticación al cargar la aplicación\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      fetchUserPlan(token); // Solo se ejecuta si el usuario está autenticado\r\n+    }\r\n+    setCheckingAuth(false); // Verificación de autenticación completa\r\n+  }, []);\r\n+\r\n+  // Obtener el plan del usuario si está autenticado\r\n+  const fetchUserPlan = async (token) => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+        headers: { 'Authorization': `Bearer ${token}` },\r\n+      });\r\n+      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n+      const data = await response.json();\r\n+      setHasPlan(data.hasPlan);\r\n+      if (data.hasPlan) setPlan(data.plan);\r\n+    } catch (error) {\r\n+      console.error('Error al verificar el plan del usuario:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) fetchUserPlan(token); // Obtener el plan si el usuario acaba de iniciar sesión\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => setDayNumber(1);\r\n+  const handleStartDay = (day) => setDayNumber(day);\r\n+  const handleEndDay = () => setDayNumber(null);\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Condiciones de renderizado de la aplicación\r\n+  if (checkingAuth) return <p className=\"text-center\">Verificando autenticación...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber}\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onStartDay={handleStartDay}\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730774781664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,108 @@\n+// frontend/src/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [checkingAuth, setCheckingAuth] = useState(true); // Estado para verificar autenticación\r\n+\r\n+  // Verificar autenticación al cargar la aplicación\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      fetchUserPlan(token); // Obtener el plan solo si está autenticado\r\n+    }\r\n+    setCheckingAuth(false); // La verificación de autenticación ha terminado\r\n+  }, []);\r\n+\r\n+  // Obtener el plan del usuario solo si está autenticado\r\n+  const fetchUserPlan = async (token) => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+        headers: { 'Authorization': `Bearer ${token}` },\r\n+      });\r\n+      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n+      const data = await response.json();\r\n+      setHasPlan(data.hasPlan);\r\n+      if (data.hasPlan) setPlan(data.plan);\r\n+    } catch (error) {\r\n+      console.error('Error al verificar el plan del usuario:', error);\r\n+      setHasPlan(false); // Si hay error, aseguramos que hasPlan sea false\r\n+    }\r\n+  };\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) fetchUserPlan(token); // Obtener el plan después de iniciar sesión\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => setDayNumber(1);\r\n+  const handleStartDay = (day) => setDayNumber(day);\r\n+  const handleEndDay = () => setDayNumber(null);\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Renderizado condicional con verificación de autenticación completa\r\n+  if (checkingAuth) return <p className=\"text-center\">Verificando autenticación...</p>;\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber}\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : hasPlan && plan ? ( // Solo mostrar NutritionPlan si el usuario tiene un plan válido\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onStartDay={handleStartDay}\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730774910036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,114 @@\n+// frontend/src/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [loadingPlan, setLoadingPlan] = useState(false); // Estado para gestionar la carga del plan\r\n+\r\n+  // Verificar autenticación al cargar la aplicación\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      fetchUserPlan(token); // Solo cargamos el plan si está autenticado\r\n+    }\r\n+  }, []);\r\n+\r\n+  // Obtener el plan del usuario si está autenticado\r\n+  const fetchUserPlan = async (token) => {\r\n+    setLoadingPlan(true); // Iniciar la carga del plan\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+        headers: { 'Authorization': `Bearer ${token}` },\r\n+      });\r\n+      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n+      const data = await response.json();\r\n+      setHasPlan(data.hasPlan);\r\n+      if (data.hasPlan) setPlan(data.plan);\r\n+    } catch (error) {\r\n+      console.error('Error al verificar el plan del usuario:', error);\r\n+      setHasPlan(false);\r\n+    } finally {\r\n+      setLoadingPlan(false); // Finalizar la carga del plan\r\n+    }\r\n+  };\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) fetchUserPlan(token);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => setDayNumber(1);\r\n+  const handleStartDay = (day) => setDayNumber(day);\r\n+  const handleEndDay = () => setDayNumber(null);\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Renderizado condicional ajustado\r\n+  if (!isAuthenticated) {\r\n+    return <Login onLogin={handleLogin} />;\r\n+  }\r\n+\r\n+  if (loadingPlan) {\r\n+    return <p className=\"text-center\">Cargando plan...</p>;\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber}\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : hasPlan && plan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onStartDay={handleStartDay}\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730774916221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,1099 +111,4 @@\n   );\r\n };\r\n \r\n export default App;\r\n-// frontend/src/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [checkingAuth, setCheckingAuth] = useState(true); // Estado para verificar autenticación\r\n-\r\n-  // Verificar autenticación al cargar la aplicación\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      fetchUserPlan(token); // Obtener el plan solo si está autenticado\r\n-    }\r\n-    setCheckingAuth(false); // La verificación de autenticación ha terminado\r\n-  }, []);\r\n-\r\n-  // Obtener el plan del usuario solo si está autenticado\r\n-  const fetchUserPlan = async (token) => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-        headers: { 'Authorization': `Bearer ${token}` },\r\n-      });\r\n-      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n-      const data = await response.json();\r\n-      setHasPlan(data.hasPlan);\r\n-      if (data.hasPlan) setPlan(data.plan);\r\n-    } catch (error) {\r\n-      console.error('Error al verificar el plan del usuario:', error);\r\n-      setHasPlan(false); // Si hay error, aseguramos que hasPlan sea false\r\n-    }\r\n-  };\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) fetchUserPlan(token); // Obtener el plan después de iniciar sesión\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => setDayNumber(1);\r\n-  const handleStartDay = (day) => setDayNumber(day);\r\n-  const handleEndDay = () => setDayNumber(null);\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Renderizado condicional con verificación de autenticación completa\r\n-  if (checkingAuth) return <p className=\"text-center\">Verificando autenticación...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber}\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n-      ) : hasPlan && plan ? ( // Solo mostrar NutritionPlan si el usuario tiene un plan válido\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onStartDay={handleStartDay}\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/src/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [checkingAuth, setCheckingAuth] = useState(true); // Nuevo estado para verificar autenticación\r\n-\r\n-  // Verificar autenticación al cargar la aplicación\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      fetchUserPlan(token); // Solo se ejecuta si el usuario está autenticado\r\n-    }\r\n-    setCheckingAuth(false); // Verificación de autenticación completa\r\n-  }, []);\r\n-\r\n-  // Obtener el plan del usuario si está autenticado\r\n-  const fetchUserPlan = async (token) => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-        headers: { 'Authorization': `Bearer ${token}` },\r\n-      });\r\n-      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n-      const data = await response.json();\r\n-      setHasPlan(data.hasPlan);\r\n-      if (data.hasPlan) setPlan(data.plan);\r\n-    } catch (error) {\r\n-      console.error('Error al verificar el plan del usuario:', error);\r\n-    }\r\n-  };\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) fetchUserPlan(token); // Obtener el plan si el usuario acaba de iniciar sesión\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => setDayNumber(1);\r\n-  const handleStartDay = (day) => setDayNumber(day);\r\n-  const handleEndDay = () => setDayNumber(null);\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Condiciones de renderizado de la aplicación\r\n-  if (checkingAuth) return <p className=\"text-center\">Verificando autenticación...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber}\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onStartDay={handleStartDay}\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/src/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [loading, setLoading] = useState(true); // Nuevo estado de carga\r\n-\r\n-  // Verificar autenticación y plan al cargar la aplicación\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      fetchUserPlan(token);\r\n-    }\r\n-    setLoading(false);\r\n-  }, []);\r\n-\r\n-  const fetchUserPlan = async (token) => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-        headers: { 'Authorization': `Bearer ${token}` },\r\n-      });\r\n-      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n-      const data = await response.json();\r\n-      setHasPlan(data.hasPlan);\r\n-      if (data.hasPlan) setPlan(data.plan);\r\n-    } catch (error) {\r\n-      console.error('Error al verificar el plan del usuario:', error);\r\n-    }\r\n-  };\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => setDayNumber(1);\r\n-  const handleStartDay = (day) => setDayNumber(day);\r\n-  const handleEndDay = () => setDayNumber(null);\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Renderizar basado en el estado\r\n-  if (loading) return <p className=\"text-center\">Cargando...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber}\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onStartDay={handleStartDay}\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/src/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [loading, setLoading] = useState(true); // Nuevo estado de carga\r\n-\r\n-  // Verificar autenticación y plan al cargar la aplicación\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      fetchUserPlan(token);\r\n-    }\r\n-    setLoading(false);\r\n-  }, []);\r\n-\r\n-  const fetchUserPlan = async (token) => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-        headers: { 'Authorization': `Bearer ${token}` },\r\n-      });\r\n-      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n-      const data = await response.json();\r\n-      setHasPlan(data.hasPlan);\r\n-      if (data.hasPlan) setPlan(data.plan);\r\n-    } catch (error) {\r\n-      console.error('Error al verificar el plan del usuario:', error);\r\n-    }\r\n-  };\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => setDayNumber(1);\r\n-  const handleStartDay = (day) => setDayNumber(day);\r\n-  const handleEndDay = () => setDayNumber(null);\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Renderizar basado en el estado\r\n-  if (loading) return <p className=\"text-center\">Cargando...</p>;\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber}\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onStartDay={handleStartDay}\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/src/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-    }\r\n-  }, []);\r\n-\r\n-  // Verificar si el usuario tiene un plan cuando se autentica\r\n-  useEffect(() => {\r\n-    if (isAuthenticated) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan); // Guardar el plan si ya existe\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  // Función para manejar el inicio de sesión\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-  };\r\n-\r\n-  // Función para manejar el cierre de sesión\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  // Función para iniciar el primer día del plan\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1); // Iniciar el primer día del plan\r\n-  };\r\n-\r\n-  // Función para iniciar un día específico del plan\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day); // Cambiar el día actual al día seleccionado\r\n-  };\r\n-\r\n-  // Función para finalizar el día actual y volver al resumen\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null); // Volver al resumen del plan\r\n-  };\r\n-\r\n-  // Función para manejar la creación de un nuevo plan\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan); // Guardar el nuevo plan creado\r\n-    setHasPlan(true); // Ahora el usuario tiene un plan\r\n-  };\r\n-\r\n-  // Función para eliminar el plan actual\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onStartDay={handleStartDay}  // Pasamos la función handleStartDay como prop\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/components/DayPlan.js\r\n-\r\n-import React, { useState, useEffect } from 'react';\r\n-import '../styles/DayPlan.css';\r\n-\r\n-const DayPlan = ({ dayNumber, setDayNumber, plan, onEndDay }) => {\r\n-    const [dayData, setDayData] = useState(null);\r\n-\r\n-    useEffect(() => {\r\n-        if (plan && plan.dias) {\r\n-            const diaActual = plan.dias.find(dia => dia.dia === dayNumber);\r\n-            if (diaActual) {\r\n-                setDayData(diaActual);\r\n-            }\r\n-        }\r\n-    }, [plan, dayNumber]);\r\n-\r\n-    if (!dayData) return <p className=\"text-center\">Cargando los datos del día...</p>;\r\n-\r\n-    // Renderiza los detalles de dayData.ejercicios y dayData.recetas como antes\r\n-\r\n-    return (\r\n-        <div className=\"day-plan-container\">\r\n-            <h1 className=\"text-2xl font-bold mb-6 text-center\">Día {dayNumber}</h1>\r\n-            {/* Mostrar las comidas y ejercicios del día */}\r\n-            {/* ... */}\r\n-            {/* Botones para navegar entre días */}\r\n-            <div className=\"buttons-container\">\r\n-                {dayNumber > 1 && (\r\n-                    <button\r\n-                        onClick={() => setDayNumber(dayNumber - 1)}\r\n-                        className=\"button button-secondary\"\r\n-                    >\r\n-                        Día Anterior\r\n-                    </button>\r\n-                )}\r\n-                {dayNumber < plan.dias.length && (\r\n-                    <button\r\n-                        onClick={() => setDayNumber(dayNumber + 1)}\r\n-                        className=\"button button-primary\"\r\n-                    >\r\n-                        Siguiente Día\r\n-                    </button>\r\n-                )}\r\n-                <button onClick={onEndDay} className=\"button button-secondary\">\r\n-                    Volver al Resumen\r\n-                </button>\r\n-            </div>\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default DayPlan;\r\n-// frontend/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario ya está autenticado (por ejemplo, si hay un token en localStorage)\r\n-        const token = localStorage.getItem('token');\r\n-        if (token) {\r\n-            setIsAuthenticated(true);\r\n-        }\r\n-    }, []);\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleLogout = () => {\r\n-        localStorage.removeItem('token');\r\n-        setIsAuthenticated(false);\r\n-        setHasPlan(false);\r\n-        setPlan(null);\r\n-        setCurrentDay(null);\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    const handleDeletePlan = async () => {\r\n-        try {\r\n-            const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-                method: 'POST',\r\n-                headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-            });\r\n-            if (!response.ok) {\r\n-                throw new Error(`HTTP error! status: ${response.status}`);\r\n-            }\r\n-            setPlan(null);\r\n-            setHasPlan(false);\r\n-        } catch (error) {\r\n-            console.error('Error al eliminar el plan:', error);\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} plan={plan} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario ya está autenticado (por ejemplo, si hay un token en localStorage)\r\n-        const token = localStorage.getItem('token');\r\n-        if (token) {\r\n-            setIsAuthenticated(true);\r\n-        }\r\n-    }, []);\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleLogout = () => {\r\n-        localStorage.removeItem('token');\r\n-        setIsAuthenticated(false);\r\n-        setHasPlan(false);\r\n-        setPlan(null);\r\n-        setCurrentDay(null);\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    const handleDeletePlan = async () => {\r\n-        try {\r\n-            const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-                method: 'POST',\r\n-                headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-            });\r\n-            if (!response.ok) {\r\n-                throw new Error(`HTTP error! status: ${response.status}`);\r\n-            }\r\n-            setPlan(null);\r\n-            setHasPlan(false);\r\n-        } catch (error) {\r\n-            console.error('Error al eliminar el plan:', error);\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} plan={plan} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario ya está autenticado (por ejemplo, si hay un token en localStorage)\r\n-        const token = localStorage.getItem('token');\r\n-        if (token) {\r\n-            setIsAuthenticated(true);\r\n-        }\r\n-    }, []);\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleLogout = () => {\r\n-        localStorage.removeItem('token');\r\n-        setIsAuthenticated(false);\r\n-        setHasPlan(false);\r\n-        setPlan(null);\r\n-        setCurrentDay(null);\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    const handleDeletePlan = async () => {\r\n-        try {\r\n-            const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-                method: 'POST',\r\n-                headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-            });\r\n-            if (!response.ok) {\r\n-                throw new Error(`HTTP error! status: ${response.status}`);\r\n-            }\r\n-            setPlan(null);\r\n-            setHasPlan(false);\r\n-        } catch (error) {\r\n-            console.error('Error al eliminar el plan:', error);\r\n-        }\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} plan={plan} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} />\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-    useEffect(() => {\r\n-        // Verificar si el usuario tiene un plan cuando se autentica\r\n-        if (isAuthenticated) {\r\n-            const checkUserPlan = async () => {\r\n-                try {\r\n-                    const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n-                    });\r\n-                    if (!response.ok) {\r\n-                        throw new Error(`HTTP error! status: ${response.status}`);\r\n-                    }\r\n-                    const data = await response.json();\r\n-                    setHasPlan(data.hasPlan);\r\n-                    if (data.hasPlan) {\r\n-                        setPlan(data.plan); // Guardar el plan si ya existe\r\n-                    }\r\n-                } catch (error) {\r\n-                    console.error('Error al verificar el plan del usuario:', error);\r\n-                }\r\n-            };\r\n-            checkUserPlan();\r\n-        }\r\n-    }, [isAuthenticated]);\r\n-\r\n-    const handleLogin = () => {\r\n-        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-    };\r\n-\r\n-    const handleStartFirstDay = () => {\r\n-        setCurrentDay(1); // Iniciar el primer día del plan\r\n-    };\r\n-\r\n-    const handleEndDay = () => {\r\n-        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-    };\r\n-\r\n-    const handlePlanCreated = (newPlan) => {\r\n-        setPlan(newPlan); // Guardar el nuevo plan creado\r\n-        setHasPlan(true); // Ahora el usuario tiene un plan\r\n-    };\r\n-\r\n-    const handleDeletePlan = () => {\r\n-        setPlan(null);\r\n-        setHasPlan(false);\r\n-        // Aquí puedes agregar lógica para eliminar el plan del backend si es necesario\r\n-    };\r\n-\r\n-    return (\r\n-        <div className=\"App\">\r\n-            {isAuthenticated && <Navbar />}\r\n-\r\n-            {!isAuthenticated ? (\r\n-                <Login onLogin={handleLogin} />\r\n-            ) : currentDay ? (\r\n-                <DayPlan dayNumber={currentDay} plan={plan} onEndDay={handleEndDay} />\r\n-            ) : hasPlan ? (\r\n-                <NutritionPlan\r\n-                    plan={plan}\r\n-                    onStartFirstDay={handleStartFirstDay}\r\n-                    onDeletePlan={handleDeletePlan}\r\n-                />\r\n-            ) : (\r\n-                <Form setPlan={handlePlanCreated} /> // Si no tiene un plan, muestra el formulario\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/App.js\r\n-import React, { useState } from 'react';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-\r\n-const App = () => {\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [currentDay, setCurrentDay] = useState(null);\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setCurrentDay(1);\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setCurrentDay(null);\r\n-  };\r\n-\r\n-  const handleDeletePlan = () => {\r\n-    setPlan(null);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {currentDay ? (\r\n-        <DayPlan\r\n-          dayNumber={currentDay}\r\n-          plan={plan} // Pasamos el plan al DayPlan\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n-      ) : plan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={setPlan} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/App.js\r\n-import React, { useState } from 'react';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-\r\n-const App = () => {\r\n-  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-  const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setCurrentDay(1); // Iniciar el primer día del plan\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setCurrentDay(null); // Volver a la vista general después de completar un día\r\n-  };\r\n-\r\n-  const handleDeletePlan = () => {\r\n-    setPlan(null); // Eliminar el plan actual\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {currentDay ? (\r\n-        <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n-      ) : plan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={setPlan} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n"
                },
                {
                    "date": 1730775883171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+// frontend/src/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n+  const [isLoading, setIsLoading] = useState(true); // Estado de carga\r\n+\r\n+  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+    }\r\n+    setIsLoading(false); // Terminar la carga inicial\r\n+  }, []);\r\n+\r\n+  // Verificar si el usuario tiene un plan cuando se autentica\r\n+  useEffect(() => {\r\n+    const checkUserPlan = async () => {\r\n+      try {\r\n+        const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+        });\r\n+        if (!response.ok) {\r\n+          throw new Error(`HTTP error! status: ${response.status}`);\r\n+        }\r\n+        const data = await response.json();\r\n+        setHasPlan(data.hasPlan);\r\n+        if (data.hasPlan) {\r\n+          setPlan(data.plan); // Guardar el plan si ya existe\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error al verificar el plan del usuario:', error);\r\n+      }\r\n+    };\r\n+\r\n+    if (isAuthenticated) {\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  // Función para manejar el inicio de sesión\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+  };\r\n+\r\n+  // Función para manejar el cierre de sesión\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  // Función para iniciar el primer día del plan\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1); // Iniciar el primer día del plan\r\n+  };\r\n+\r\n+  // Función para iniciar un día específico del plan\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day); // Cambiar el día actual al día seleccionado\r\n+  };\r\n+\r\n+  // Función para finalizar el día actual y volver al resumen\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null); // Volver al resumen del plan\r\n+  };\r\n+\r\n+  // Función para manejar la creación de un nuevo plan\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan); // Guardar el nuevo plan creado\r\n+    setHasPlan(true); // Ahora el usuario tiene un plan\r\n+  };\r\n+\r\n+  // Función para eliminar el plan actual\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Muestra un mensaje de carga mientras espera la autenticación y el plan\r\n+  if (isLoading) {\r\n+    return <p>Cargando...</p>;\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onStartDay={handleStartDay}  // Pasamos la función handleStartDay como prop\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730775891505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+// frontend/src/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n+  const [isLoading, setIsLoading] = useState(true); // Estado de carga\r\n+\r\n+  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+    }\r\n+    setIsLoading(false); // Terminar la carga inicial\r\n+  }, []);\r\n+\r\n+  // Verificar si el usuario tiene un plan cuando se autentica\r\n+  useEffect(() => {\r\n+    const checkUserPlan = async () => {\r\n+      try {\r\n+        const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+        });\r\n+        if (!response.ok) {\r\n+          throw new Error(`HTTP error! status: ${response.status}`);\r\n+        }\r\n+        const data = await response.json();\r\n+        setHasPlan(data.hasPlan);\r\n+        if (data.hasPlan) {\r\n+          setPlan(data.plan); // Guardar el plan si ya existe\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error al verificar el plan del usuario:', error);\r\n+      }\r\n+    };\r\n+\r\n+    if (isAuthenticated) {\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  // Función para manejar el inicio de sesión\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+  };\r\n+\r\n+  // Función para manejar el cierre de sesión\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  // Función para iniciar el primer día del plan\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1); // Iniciar el primer día del plan\r\n+  };\r\n+\r\n+  // Función para iniciar un día específico del plan\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day); // Cambiar el día actual al día seleccionado\r\n+  };\r\n+\r\n+  // Función para finalizar el día actual y volver al resumen\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null); // Volver al resumen del plan\r\n+  };\r\n+\r\n+  // Función para manejar la creación de un nuevo plan\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan); // Guardar el nuevo plan creado\r\n+    setHasPlan(true); // Ahora el usuario tiene un plan\r\n+  };\r\n+\r\n+  // Función para eliminar el plan actual\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Muestra un mensaje de carga mientras espera la autenticación y el plan\r\n+  if (isLoading) {\r\n+    return <p>Cargando...</p>;\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onStartDay={handleStartDay}  // Pasamos la función handleStartDay como prop\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730776062888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,139 @@\n+// frontend/src/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n+  const [isLoading, setIsLoading] = useState(true); // Estado de carga inicial\r\n+  const [isCheckingPlan, setIsCheckingPlan] = useState(false); // Estado de verificación de plan\r\n+\r\n+  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      setIsCheckingPlan(true);\r\n+    }\r\n+    setIsLoading(false); // Termina la carga inicial\r\n+  }, []);\r\n+\r\n+  // Verificar si el usuario tiene un plan después de autenticarse\r\n+  useEffect(() => {\r\n+    const checkUserPlan = async () => {\r\n+      try {\r\n+        const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+        });\r\n+        if (!response.ok) {\r\n+          throw new Error(`HTTP error! status: ${response.status}`);\r\n+        }\r\n+        const data = await response.json();\r\n+        setHasPlan(data.hasPlan);\r\n+        if (data.hasPlan) {\r\n+          setPlan(data.plan); // Guardar el plan si ya existe\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error al verificar el plan del usuario:', error);\r\n+      } finally {\r\n+        setIsCheckingPlan(false); // Finaliza verificación de plan\r\n+      }\r\n+    };\r\n+\r\n+    if (isAuthenticated && isCheckingPlan) {\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, isCheckingPlan]);\r\n+\r\n+  // Función para manejar el inicio de sesión\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+    setIsCheckingPlan(true); // Inicia verificación del plan al autenticarse\r\n+  };\r\n+\r\n+  // Función para manejar el cierre de sesión\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  // Función para iniciar el primer día del plan\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  // Función para iniciar un día específico del plan\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+  };\r\n+\r\n+  // Función para finalizar el día actual y volver al resumen\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  // Función para manejar la creación de un nuevo plan\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+  };\r\n+\r\n+  // Función para eliminar el plan actual\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Muestra un mensaje de carga mientras espera la autenticación y el plan\r\n+  if (isLoading || isCheckingPlan) {\r\n+    return <p>Cargando...</p>;\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber}\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onStartDay={handleStartDay}\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730776289912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,134 @@\n+// frontend/src/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n+  const [isLoading, setIsLoading] = useState(true); // Estado de carga inicial\r\n+\r\n+  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+    }\r\n+    setIsLoading(false); // Termina la carga inicial\r\n+  }, []);\r\n+\r\n+  // Verificar si el usuario tiene un plan después de autenticarse\r\n+  useEffect(() => {\r\n+    const checkUserPlan = async () => {\r\n+      try {\r\n+        const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+        });\r\n+        if (!response.ok) {\r\n+          throw new Error(`HTTP error! status: ${response.status}`);\r\n+        }\r\n+        const data = await response.json();\r\n+        setHasPlan(data.hasPlan);\r\n+        if (data.hasPlan) {\r\n+          setPlan(data.plan); // Guardar el plan si ya existe\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error al verificar el plan del usuario:', error);\r\n+      }\r\n+    };\r\n+\r\n+    if (isAuthenticated) {\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  // Función para manejar el inicio de sesión\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  // Función para manejar el cierre de sesión\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  // Función para iniciar el primer día del plan\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1); // Iniciar el primer día del plan\r\n+  };\r\n+\r\n+  // Función para iniciar un día específico del plan\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day); // Cambiar el día actual al día seleccionado\r\n+  };\r\n+\r\n+  // Función para finalizar el día actual y volver al resumen\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null); // Volver al resumen del plan\r\n+  };\r\n+\r\n+  // Función para manejar la creación de un nuevo plan\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan); // Guardar el nuevo plan creado\r\n+    setHasPlan(true); // Ahora el usuario tiene un plan\r\n+  };\r\n+\r\n+  // Función para eliminar el plan actual\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Mostrar un mensaje de carga mientras se verifica el plan\r\n+  if (isLoading) {\r\n+    return <p>Cargando...</p>;\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onStartDay={handleStartDay}  // Pasamos la función handleStartDay como prop\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730776404685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,137 @@\n+// frontend/src/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n+  const [isLoading, setIsLoading] = useState(true); // Estado de carga inicial\r\n+\r\n+  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+    }\r\n+    setIsLoading(false); // Termina la carga inicial\r\n+  }, []);\r\n+\r\n+  // Verificar si el usuario tiene un plan después de autenticarse\r\n+  useEffect(() => {\r\n+    const checkUserPlan = async () => {\r\n+      try {\r\n+        const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+        });\r\n+        if (!response.ok) {\r\n+          throw new Error(`HTTP error! status: ${response.status}`);\r\n+        }\r\n+        const data = await response.json();\r\n+        setHasPlan(data.hasPlan);\r\n+        if (data.hasPlan) {\r\n+          setPlan(data.plan); // Guardar el plan si ya existe\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error al verificar el plan del usuario:', error);\r\n+      }\r\n+      setIsLoading(false); // Termina la carga después de la verificación\r\n+    };\r\n+\r\n+    if (isAuthenticated) {\r\n+      checkUserPlan();\r\n+    } else {\r\n+      setIsLoading(false); // Si no está autenticado, termina la carga\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  // Función para manejar el inicio de sesión\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  // Función para manejar el cierre de sesión\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  // Función para iniciar el primer día del plan\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1); // Iniciar el primer día del plan\r\n+  };\r\n+\r\n+  // Función para iniciar un día específico del plan\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day); // Cambiar el día actual al día seleccionado\r\n+  };\r\n+\r\n+  // Función para finalizar el día actual y volver al resumen\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null); // Volver al resumen del plan\r\n+  };\r\n+\r\n+  // Función para manejar la creación de un nuevo plan\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan); // Guardar el nuevo plan creado\r\n+    setHasPlan(true); // Ahora el usuario tiene un plan\r\n+  };\r\n+\r\n+  // Función para eliminar el plan actual\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Mostrar un mensaje de carga mientras se verifica el plan\r\n+  if (isLoading) {\r\n+    return <p>Cargando...</p>;\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onStartDay={handleStartDay}  // Pasamos la función handleStartDay como prop\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730776485296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,138 @@\n+// frontend/src/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n+  const [isLoading, setIsLoading] = useState(true); // Estado de carga inicial\r\n+\r\n+  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+    }\r\n+    setIsLoading(false); // Termina la carga inicial\r\n+  }, []);\r\n+\r\n+  // Verificar si el usuario tiene un plan después de autenticarse\r\n+  useEffect(() => {\r\n+    const checkUserPlan = async () => {\r\n+      setIsLoading(true); // Cargar mientras se verifica el plan\r\n+      try {\r\n+        const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+        });\r\n+        if (!response.ok) {\r\n+          throw new Error(`HTTP error! status: ${response.status}`);\r\n+        }\r\n+        const data = await response.json();\r\n+        setHasPlan(data.hasPlan);\r\n+        if (data.hasPlan) {\r\n+          setPlan(data.plan); // Guardar el plan si ya existe\r\n+        }\r\n+      } catch (error) {\r\n+        console.error('Error al verificar el plan del usuario:', error);\r\n+      }\r\n+      setIsLoading(false); // Termina la carga después de la verificación\r\n+    };\r\n+\r\n+    if (isAuthenticated) {\r\n+      checkUserPlan();\r\n+    } else {\r\n+      setIsLoading(false); // Si no está autenticado, termina la carga\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  // Función para manejar el inicio de sesión\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  // Función para manejar el cierre de sesión\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  // Función para iniciar el primer día del plan\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1); // Iniciar el primer día del plan\r\n+  };\r\n+\r\n+  // Función para iniciar un día específico del plan\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day); // Cambiar el día actual al día seleccionado\r\n+  };\r\n+\r\n+  // Función para finalizar el día actual y volver al resumen\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null); // Volver al resumen del plan\r\n+  };\r\n+\r\n+  // Función para manejar la creación de un nuevo plan\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan); // Guardar el nuevo plan creado\r\n+    setHasPlan(true); // Ahora el usuario tiene un plan\r\n+  };\r\n+\r\n+  // Función para eliminar el plan actual\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Mostrar un mensaje de carga mientras se verifica el plan\r\n+  if (isLoading) {\r\n+    return <p>Cargando...</p>;\r\n+  }\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onStartDay={handleStartDay}  // Pasamos la función handleStartDay como prop\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730776758202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,126 @@\n+// frontend/src/App.js\r\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n+  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n+  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n+  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n+\r\n+  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+    }\r\n+  }, []);\r\n+\r\n+  // Verificar si el usuario tiene un plan cuando se autentica\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan); // Guardar el plan si ya existe\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  // Función para manejar el inicio de sesión\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n+  };\r\n+\r\n+  // Función para manejar el cierre de sesión\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  // Función para iniciar el primer día del plan\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1); // Iniciar el primer día del plan\r\n+  };\r\n+\r\n+  // Función para iniciar un día específico del plan\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day); // Cambiar el día actual al día seleccionado\r\n+  };\r\n+\r\n+  // Función para finalizar el día actual y volver al resumen\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null); // Volver al resumen del plan\r\n+  };\r\n+\r\n+  // Función para manejar la creación de un nuevo plan\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan); // Guardar el nuevo plan creado\r\n+    setHasPlan(true); // Ahora el usuario tiene un plan\r\n+  };\r\n+\r\n+  // Función para eliminar el plan actual\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onStartDay={handleStartDay}  // Pasamos la función handleStartDay como prop\r\n+          onDeletePlan={handleDeletePlan}\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730778462505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,119 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState([]); // Estado para días completados\r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+    setCompletedDays([]);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      setCompletedDays([]);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleCompleteDay = (day) => {\r\n+    setCompletedDays((prevDays) => [...prevDays, day]);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber}\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+          onCompleteDay={handleCompleteDay} // Pasa la función handleCompleteDay\r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan\r\n+          plan={plan}\r\n+          onStartFirstDay={handleStartFirstDay}\r\n+          onStartDay={handleStartDay}\r\n+          onDeletePlan={handleDeletePlan}\r\n+          completedDays={completedDays} // Pasa los días completados\r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730820681744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,14 +9,16 @@\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n   const [hasPlan, setHasPlan] = useState(false);\r\n   const [plan, setPlan] = useState(null);\r\n   const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState([]); // Estado para días completados\r\n \r\n+  // Verificar token al iniciar la aplicación\r\n   useEffect(() => {\r\n     const token = localStorage.getItem('token');\r\n     if (token) {\r\n       setIsAuthenticated(true);\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n     }\r\n   }, []);\r\n \r\n   useEffect(() => {\r\n@@ -25,136 +27,15 @@\n         try {\r\n           const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n             headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n           });\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-    setCompletedDays([]);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      setCompletedDays([]);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  const handleCompleteDay = (day) => {\r\n-    setCompletedDays((prevDays) => [...prevDays, day]);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber}\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-          onCompleteDay={handleCompleteDay} // Pasa la función handleCompleteDay\r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onStartDay={handleStartDay}\r\n-          onDeletePlan={handleDeletePlan}\r\n-          completedDays={completedDays} // Pasa los días completados\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/src/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n-\r\n-  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-    }\r\n-  }, []);\r\n-\r\n-  // Verificar si el usuario tiene un plan cuando se autentica\r\n-  useEffect(() => {\r\n-    if (isAuthenticated) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n           if (!response.ok) {\r\n             throw new Error(`HTTP error! status: ${response.status}`);\r\n           }\r\n           const data = await response.json();\r\n           setHasPlan(data.hasPlan);\r\n           if (data.hasPlan) {\r\n-            setPlan(data.plan); // Guardar el plan si ya existe\r\n+            setPlan(data.plan);\r\n           }\r\n         } catch (error) {\r\n           console.error('Error al verificar el plan del usuario:', error);\r\n         }\r\n@@ -162,587 +43,37 @@\n       checkUserPlan();\r\n     }\r\n   }, [isAuthenticated]);\r\n \r\n-  // Función para manejar el inicio de sesión\r\n   const handleLogin = () => {\r\n-    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-  };\r\n-\r\n-  // Función para manejar el cierre de sesión\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  // Función para iniciar el primer día del plan\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1); // Iniciar el primer día del plan\r\n-  };\r\n-\r\n-  // Función para iniciar un día específico del plan\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day); // Cambiar el día actual al día seleccionado\r\n-  };\r\n-\r\n-  // Función para finalizar el día actual y volver al resumen\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null); // Volver al resumen del plan\r\n-  };\r\n-\r\n-  // Función para manejar la creación de un nuevo plan\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan); // Guardar el nuevo plan creado\r\n-    setHasPlan(true); // Ahora el usuario tiene un plan\r\n-  };\r\n-\r\n-  // Función para eliminar el plan actual\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onStartDay={handleStartDay}  // Pasamos la función handleStartDay como prop\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/src/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n-  const [isLoading, setIsLoading] = useState(true); // Estado de carga inicial\r\n-\r\n-  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-    }\r\n-    setIsLoading(false); // Termina la carga inicial\r\n-  }, []);\r\n-\r\n-  // Verificar si el usuario tiene un plan después de autenticarse\r\n-  useEffect(() => {\r\n-    const checkUserPlan = async () => {\r\n-      setIsLoading(true); // Cargar mientras se verifica el plan\r\n-      try {\r\n-        const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-        });\r\n-        if (!response.ok) {\r\n-          throw new Error(`HTTP error! status: ${response.status}`);\r\n-        }\r\n-        const data = await response.json();\r\n-        setHasPlan(data.hasPlan);\r\n-        if (data.hasPlan) {\r\n-          setPlan(data.plan); // Guardar el plan si ya existe\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error al verificar el plan del usuario:', error);\r\n-      }\r\n-      setIsLoading(false); // Termina la carga después de la verificación\r\n-    };\r\n-\r\n-    if (isAuthenticated) {\r\n-      checkUserPlan();\r\n-    } else {\r\n-      setIsLoading(false); // Si no está autenticado, termina la carga\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  // Función para manejar el inicio de sesión\r\n-  const handleLogin = () => {\r\n     setIsAuthenticated(true);\r\n   };\r\n \r\n-  // Función para manejar el cierre de sesión\r\n   const handleLogout = () => {\r\n     localStorage.removeItem('token');\r\n     setIsAuthenticated(false);\r\n     setHasPlan(false);\r\n     setPlan(null);\r\n     setDayNumber(null);\r\n   };\r\n \r\n-  // Función para iniciar el primer día del plan\r\n   const handleStartFirstDay = () => {\r\n-    setDayNumber(1); // Iniciar el primer día del plan\r\n-  };\r\n-\r\n-  // Función para iniciar un día específico del plan\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day); // Cambiar el día actual al día seleccionado\r\n-  };\r\n-\r\n-  // Función para finalizar el día actual y volver al resumen\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null); // Volver al resumen del plan\r\n-  };\r\n-\r\n-  // Función para manejar la creación de un nuevo plan\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan); // Guardar el nuevo plan creado\r\n-    setHasPlan(true); // Ahora el usuario tiene un plan\r\n-  };\r\n-\r\n-  // Función para eliminar el plan actual\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Mostrar un mensaje de carga mientras se verifica el plan\r\n-  if (isLoading) {\r\n-    return <p>Cargando...</p>;\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onStartDay={handleStartDay}  // Pasamos la función handleStartDay como prop\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/src/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n-  const [isLoading, setIsLoading] = useState(true); // Estado de carga inicial\r\n-\r\n-  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-    }\r\n-    setIsLoading(false); // Termina la carga inicial\r\n-  }, []);\r\n-\r\n-  // Verificar si el usuario tiene un plan después de autenticarse\r\n-  useEffect(() => {\r\n-    const checkUserPlan = async () => {\r\n-      try {\r\n-        const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-        });\r\n-        if (!response.ok) {\r\n-          throw new Error(`HTTP error! status: ${response.status}`);\r\n-        }\r\n-        const data = await response.json();\r\n-        setHasPlan(data.hasPlan);\r\n-        if (data.hasPlan) {\r\n-          setPlan(data.plan); // Guardar el plan si ya existe\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error al verificar el plan del usuario:', error);\r\n-      }\r\n-      setIsLoading(false); // Termina la carga después de la verificación\r\n-    };\r\n-\r\n-    if (isAuthenticated) {\r\n-      checkUserPlan();\r\n-    } else {\r\n-      setIsLoading(false); // Si no está autenticado, termina la carga\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  // Función para manejar el inicio de sesión\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  // Función para manejar el cierre de sesión\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  // Función para iniciar el primer día del plan\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1); // Iniciar el primer día del plan\r\n-  };\r\n-\r\n-  // Función para iniciar un día específico del plan\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day); // Cambiar el día actual al día seleccionado\r\n-  };\r\n-\r\n-  // Función para finalizar el día actual y volver al resumen\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null); // Volver al resumen del plan\r\n-  };\r\n-\r\n-  // Función para manejar la creación de un nuevo plan\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan); // Guardar el nuevo plan creado\r\n-    setHasPlan(true); // Ahora el usuario tiene un plan\r\n-  };\r\n-\r\n-  // Función para eliminar el plan actual\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Mostrar un mensaje de carga mientras se verifica el plan\r\n-  if (isLoading) {\r\n-    return <p>Cargando...</p>;\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onStartDay={handleStartDay}  // Pasamos la función handleStartDay como prop\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/src/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n-  const [isLoading, setIsLoading] = useState(true); // Estado de carga inicial\r\n-\r\n-  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-    }\r\n-    setIsLoading(false); // Termina la carga inicial\r\n-  }, []);\r\n-\r\n-  // Verificar si el usuario tiene un plan después de autenticarse\r\n-  useEffect(() => {\r\n-    const checkUserPlan = async () => {\r\n-      try {\r\n-        const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-        });\r\n-        if (!response.ok) {\r\n-          throw new Error(`HTTP error! status: ${response.status}`);\r\n-        }\r\n-        const data = await response.json();\r\n-        setHasPlan(data.hasPlan);\r\n-        if (data.hasPlan) {\r\n-          setPlan(data.plan); // Guardar el plan si ya existe\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error al verificar el plan del usuario:', error);\r\n-      }\r\n-    };\r\n-\r\n-    if (isAuthenticated) {\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  // Función para manejar el inicio de sesión\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  // Función para manejar el cierre de sesión\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  // Función para iniciar el primer día del plan\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1); // Iniciar el primer día del plan\r\n-  };\r\n-\r\n-  // Función para iniciar un día específico del plan\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day); // Cambiar el día actual al día seleccionado\r\n-  };\r\n-\r\n-  // Función para finalizar el día actual y volver al resumen\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null); // Volver al resumen del plan\r\n-  };\r\n-\r\n-  // Función para manejar la creación de un nuevo plan\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan); // Guardar el nuevo plan creado\r\n-    setHasPlan(true); // Ahora el usuario tiene un plan\r\n-  };\r\n-\r\n-  // Función para eliminar el plan actual\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Mostrar un mensaje de carga mientras se verifica el plan\r\n-  if (isLoading) {\r\n-    return <p>Cargando...</p>;\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onStartDay={handleStartDay}  // Pasamos la función handleStartDay como prop\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/src/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n-  const [isLoading, setIsLoading] = useState(true); // Estado de carga inicial\r\n-  const [isCheckingPlan, setIsCheckingPlan] = useState(false); // Estado de verificación de plan\r\n-\r\n-  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      setIsCheckingPlan(true);\r\n-    }\r\n-    setIsLoading(false); // Termina la carga inicial\r\n-  }, []);\r\n-\r\n-  // Verificar si el usuario tiene un plan después de autenticarse\r\n-  useEffect(() => {\r\n-    const checkUserPlan = async () => {\r\n-      try {\r\n-        const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-        });\r\n-        if (!response.ok) {\r\n-          throw new Error(`HTTP error! status: ${response.status}`);\r\n-        }\r\n-        const data = await response.json();\r\n-        setHasPlan(data.hasPlan);\r\n-        if (data.hasPlan) {\r\n-          setPlan(data.plan); // Guardar el plan si ya existe\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error al verificar el plan del usuario:', error);\r\n-      } finally {\r\n-        setIsCheckingPlan(false); // Finaliza verificación de plan\r\n-      }\r\n-    };\r\n-\r\n-    if (isAuthenticated && isCheckingPlan) {\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated, isCheckingPlan]);\r\n-\r\n-  // Función para manejar el inicio de sesión\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-    setIsCheckingPlan(true); // Inicia verificación del plan al autenticarse\r\n-  };\r\n-\r\n-  // Función para manejar el cierre de sesión\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  // Función para iniciar el primer día del plan\r\n-  const handleStartFirstDay = () => {\r\n     setDayNumber(1);\r\n   };\r\n \r\n-  // Función para iniciar un día específico del plan\r\n   const handleStartDay = (day) => {\r\n     setDayNumber(day);\r\n   };\r\n \r\n-  // Función para finalizar el día actual y volver al resumen\r\n   const handleEndDay = () => {\r\n     setDayNumber(null);\r\n   };\r\n \r\n-  // Función para manejar la creación de un nuevo plan\r\n   const handlePlanCreated = (newPlan) => {\r\n     setPlan(newPlan);\r\n     setHasPlan(true);\r\n   };\r\n \r\n-  // Función para eliminar el plan actual\r\n   const handleDeletePlan = async () => {\r\n     try {\r\n       const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n         method: 'POST',\r\n@@ -757,419 +88,21 @@\n       console.error('Error al eliminar el plan:', error);\r\n     }\r\n   };\r\n \r\n-  // Muestra un mensaje de carga mientras espera la autenticación y el plan\r\n-  if (isLoading || isCheckingPlan) {\r\n-    return <p>Cargando...</p>;\r\n-  }\r\n-\r\n   return (\r\n     <div className=\"App\">\r\n       {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-\r\n       {!isAuthenticated ? (\r\n         <Login onLogin={handleLogin} />\r\n       ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber}\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n+        <DayPlan dayNumber={dayNumber} setDayNumber={setDayNumber} plan={plan} onEndDay={handleEndDay} />\r\n       ) : hasPlan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onStartDay={handleStartDay}\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n+        <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onStartDay={handleStartDay} onDeletePlan={handleDeletePlan} />\r\n       ) : (\r\n         <Form setPlan={handlePlanCreated} />\r\n       )}\r\n     </div>\r\n   );\r\n };\r\n \r\n export default App;\r\n-// frontend/src/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n-  const [isLoading, setIsLoading] = useState(true); // Estado de carga\r\n-\r\n-  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-    }\r\n-    setIsLoading(false); // Terminar la carga inicial\r\n-  }, []);\r\n-\r\n-  // Verificar si el usuario tiene un plan cuando se autentica\r\n-  useEffect(() => {\r\n-    const checkUserPlan = async () => {\r\n-      try {\r\n-        const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-        });\r\n-        if (!response.ok) {\r\n-          throw new Error(`HTTP error! status: ${response.status}`);\r\n-        }\r\n-        const data = await response.json();\r\n-        setHasPlan(data.hasPlan);\r\n-        if (data.hasPlan) {\r\n-          setPlan(data.plan); // Guardar el plan si ya existe\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error al verificar el plan del usuario:', error);\r\n-      }\r\n-    };\r\n-\r\n-    if (isAuthenticated) {\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  // Función para manejar el inicio de sesión\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-  };\r\n-\r\n-  // Función para manejar el cierre de sesión\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  // Función para iniciar el primer día del plan\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1); // Iniciar el primer día del plan\r\n-  };\r\n-\r\n-  // Función para iniciar un día específico del plan\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day); // Cambiar el día actual al día seleccionado\r\n-  };\r\n-\r\n-  // Función para finalizar el día actual y volver al resumen\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null); // Volver al resumen del plan\r\n-  };\r\n-\r\n-  // Función para manejar la creación de un nuevo plan\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan); // Guardar el nuevo plan creado\r\n-    setHasPlan(true); // Ahora el usuario tiene un plan\r\n-  };\r\n-\r\n-  // Función para eliminar el plan actual\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Muestra un mensaje de carga mientras espera la autenticación y el plan\r\n-  if (isLoading) {\r\n-    return <p>Cargando...</p>;\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onStartDay={handleStartDay}  // Pasamos la función handleStartDay como prop\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/src/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n-  const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n-  const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n-  const [dayNumber, setDayNumber] = useState(null); // Estado para gestionar el día actual\r\n-  const [isLoading, setIsLoading] = useState(true); // Estado de carga\r\n-\r\n-  // Verificar si el usuario ya está autenticado al cargar la aplicación\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-    }\r\n-    setIsLoading(false); // Terminar la carga inicial\r\n-  }, []);\r\n-\r\n-  // Verificar si el usuario tiene un plan cuando se autentica\r\n-  useEffect(() => {\r\n-    const checkUserPlan = async () => {\r\n-      try {\r\n-        const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-          headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-        });\r\n-        if (!response.ok) {\r\n-          throw new Error(`HTTP error! status: ${response.status}`);\r\n-        }\r\n-        const data = await response.json();\r\n-        setHasPlan(data.hasPlan);\r\n-        if (data.hasPlan) {\r\n-          setPlan(data.plan); // Guardar el plan si ya existe\r\n-        }\r\n-      } catch (error) {\r\n-        console.error('Error al verificar el plan del usuario:', error);\r\n-      }\r\n-    };\r\n-\r\n-    if (isAuthenticated) {\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  // Función para manejar el inicio de sesión\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n-  };\r\n-\r\n-  // Función para manejar el cierre de sesión\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  // Función para iniciar el primer día del plan\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1); // Iniciar el primer día del plan\r\n-  };\r\n-\r\n-  // Función para iniciar un día específico del plan\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day); // Cambiar el día actual al día seleccionado\r\n-  };\r\n-\r\n-  // Función para finalizar el día actual y volver al resumen\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null); // Volver al resumen del plan\r\n-  };\r\n-\r\n-  // Función para manejar la creación de un nuevo plan\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan); // Guardar el nuevo plan creado\r\n-    setHasPlan(true); // Ahora el usuario tiene un plan\r\n-  };\r\n-\r\n-  // Función para eliminar el plan actual\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Muestra un mensaje de carga mientras espera la autenticación y el plan\r\n-  if (isLoading) {\r\n-    return <p>Cargando...</p>;\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber} // Pasamos setDayNumber para navegar entre días\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onStartDay={handleStartDay}  // Pasamos la función handleStartDay como prop\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-// frontend/src/App.js\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [loadingPlan, setLoadingPlan] = useState(false); // Estado para gestionar la carga del plan\r\n-\r\n-  // Verificar autenticación al cargar la aplicación\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      fetchUserPlan(token); // Solo cargamos el plan si está autenticado\r\n-    }\r\n-  }, []);\r\n-\r\n-  // Obtener el plan del usuario si está autenticado\r\n-  const fetchUserPlan = async (token) => {\r\n-    setLoadingPlan(true); // Iniciar la carga del plan\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-        headers: { 'Authorization': `Bearer ${token}` },\r\n-      });\r\n-      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n-      const data = await response.json();\r\n-      setHasPlan(data.hasPlan);\r\n-      if (data.hasPlan) setPlan(data.plan);\r\n-    } catch (error) {\r\n-      console.error('Error al verificar el plan del usuario:', error);\r\n-      setHasPlan(false);\r\n-    } finally {\r\n-      setLoadingPlan(false); // Finalizar la carga del plan\r\n-    }\r\n-  };\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) fetchUserPlan(token);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => setDayNumber(1);\r\n-  const handleStartDay = (day) => setDayNumber(day);\r\n-  const handleEndDay = () => setDayNumber(null);\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Renderizado condicional ajustado\r\n-  if (!isAuthenticated) {\r\n-    return <Login onLogin={handleLogin} />;\r\n-  }\r\n-\r\n-  if (loadingPlan) {\r\n-    return <p className=\"text-center\">Cargando plan...</p>;\r\n-  }\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber}\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-        />\r\n-      ) : hasPlan && plan ? (\r\n-        <NutritionPlan\r\n-          plan={plan}\r\n-          onStartFirstDay={handleStartFirstDay}\r\n-          onStartDay={handleStartDay}\r\n-          onDeletePlan={handleDeletePlan}\r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n"
                },
                {
                    "date": 1730821216390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n   const [hasPlan, setHasPlan] = useState(false);\r\n   const [plan, setPlan] = useState(null);\r\n   const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState([]);\r\n \r\n-  // Verificar token al iniciar la aplicación\r\n   useEffect(() => {\r\n     const token = localStorage.getItem('token');\r\n     if (token) {\r\n       setIsAuthenticated(true);\r\n@@ -67,8 +67,12 @@\n   const handleEndDay = () => {\r\n     setDayNumber(null);\r\n   };\r\n \r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => [...prevCompletedDays, day]);\r\n+  };\r\n+\r\n   const handlePlanCreated = (newPlan) => {\r\n     setPlan(newPlan);\r\n     setHasPlan(true);\r\n   };\r\n@@ -94,11 +98,23 @@\n       {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n       {!isAuthenticated ? (\r\n         <Login onLogin={handleLogin} />\r\n       ) : dayNumber ? (\r\n-        <DayPlan dayNumber={dayNumber} setDayNumber={setDayNumber} plan={plan} onEndDay={handleEndDay} />\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n       ) : hasPlan ? (\r\n-        <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} onStartDay={handleStartDay} onDeletePlan={handleDeletePlan} />\r\n+        <NutritionPlan \r\n+          plan={plan} \r\n+          onStartFirstDay={handleStartFirstDay} \r\n+          onStartDay={handleStartDay} \r\n+          onDeletePlan={handleDeletePlan} \r\n+          completedDays={completedDays} \r\n+        />\r\n       ) : (\r\n         <Form setPlan={handlePlanCreated} />\r\n       )}\r\n     </div>\r\n"
                },
                {
                    "date": 1730821860526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,125 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState([]);\r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => [...prevCompletedDays, day]);\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan)); // Guardar el plan en localStorage\r\n+  };\r\n+  \r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan \r\n+          plan={plan} \r\n+          onStartFirstDay={handleStartFirstDay} \r\n+          onStartDay={handleStartDay} \r\n+          onDeletePlan={handleDeletePlan} \r\n+          completedDays={completedDays} \r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730821890586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState([]);\r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {  // Verifica si ya existe un plan guardado\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    localStorage.removeItem('plan'); // Eliminar el plan del localStorage al cerrar sesión\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => [...prevCompletedDays, day]);\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan)); // Guardar el plan en localStorage\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      localStorage.removeItem('plan'); // Eliminar el plan del localStorage al reiniciar\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan \r\n+          plan={plan} \r\n+          onStartFirstDay={handleStartFirstDay} \r\n+          onStartDay={handleStartDay} \r\n+          onDeletePlan={handleDeletePlan} \r\n+          completedDays={completedDays} \r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730821898765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,253 +130,4 @@\n   );\r\n };\r\n \r\n export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState([]);\r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => [...prevCompletedDays, day]);\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan)); // Guardar el plan en localStorage\r\n-  };\r\n-  \r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan \r\n-          plan={plan} \r\n-          onStartFirstDay={handleStartFirstDay} \r\n-          onStartDay={handleStartDay} \r\n-          onDeletePlan={handleDeletePlan} \r\n-          completedDays={completedDays} \r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState([]);\r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => [...prevCompletedDays, day]);\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan \r\n-          plan={plan} \r\n-          onStartFirstDay={handleStartFirstDay} \r\n-          onStartDay={handleStartDay} \r\n-          onDeletePlan={handleDeletePlan} \r\n-          completedDays={completedDays} \r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n"
                },
                {
                    "date": 1730821951035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState([]);\r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {  // Verifica si ya existe un plan guardado\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    localStorage.removeItem('plan'); // Eliminar el plan del localStorage al cerrar sesión\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => [...prevCompletedDays, day]);\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan)); // Guardar el plan en localStorage\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      localStorage.removeItem('plan'); // Eliminar el plan del localStorage al reiniciar\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan \r\n+          plan={plan} \r\n+          onStartFirstDay={handleStartFirstDay} \r\n+          onStartDay={handleStartDay} \r\n+          onDeletePlan={handleDeletePlan} \r\n+          completedDays={completedDays} \r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1730821956362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,137 +130,4 @@\n   );\r\n };\r\n \r\n export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState([]);\r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {  // Verifica si ya existe un plan guardado\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    localStorage.removeItem('plan'); // Eliminar el plan del localStorage al cerrar sesión\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => [...prevCompletedDays, day]);\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan)); // Guardar el plan en localStorage\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      localStorage.removeItem('plan'); // Eliminar el plan del localStorage al reiniciar\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan \r\n-          plan={plan} \r\n-          onStartFirstDay={handleStartFirstDay} \r\n-          onStartDay={handleStartDay} \r\n-          onDeletePlan={handleDeletePlan} \r\n-          completedDays={completedDays} \r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n"
                },
                {
                    "date": 1730822310953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,150 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState(() => {\r\n+    const storedCompletedDays = localStorage.getItem('completedDays');\r\n+    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n+  });\r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated && !hasPlan) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, hasPlan]);\r\n+\r\n+  useEffect(() => {\r\n+    if (completedDays.length > 0) {\r\n+      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n+    }\r\n+  }, [completedDays]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    localStorage.removeItem('plan');\r\n+    localStorage.removeItem('completedDays');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+    setCompletedDays([]);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => {\r\n+      const updatedCompletedDays = [...prevCompletedDays, day];\r\n+      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n+      return updatedCompletedDays;\r\n+    });\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      localStorage.removeItem('plan');\r\n+      localStorage.removeItem('completedDays');\r\n+      setCompletedDays([]);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan \r\n+          plan={plan} \r\n+          onStartFirstDay={handleStartFirstDay} \r\n+          onStartDay={handleStartDay} \r\n+          onDeletePlan={handleDeletePlan} \r\n+          completedDays={completedDays} \r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1731003601715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n import Form from './components/Form';\r\n import NutritionPlan from './components/NutritionPlan';\r\n import DayPlan from './components/DayPlan';\r\n import Navbar from './components/Navbar';\r\n+import ProgressForm from './components/ProgressForm';\r\n+import Predictions from './components/Predictions';\r\n \r\n const App = () => {\r\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n   const [hasPlan, setHasPlan] = useState(false);\r\n@@ -13,8 +15,10 @@\n   const [completedDays, setCompletedDays] = useState(() => {\r\n     const storedCompletedDays = localStorage.getItem('completedDays');\r\n     return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n   });\r\n+  const [predictions, setPredictions] = useState(null); // Estado para las predicciones\r\n+  const [showProgressForm, setShowProgressForm] = useState(false); // Estado para mostrar el formulario de progreso\r\n \r\n   useEffect(() => {\r\n     const token = localStorage.getItem('token');\r\n     const storedPlan = localStorage.getItem('plan');\r\n@@ -71,8 +75,9 @@\n     setHasPlan(false);\r\n     setPlan(null);\r\n     setDayNumber(null);\r\n     setCompletedDays([]);\r\n+    setPredictions(null); // Restablecer predicciones al cerrar sesión\r\n   };\r\n \r\n   const handleStartFirstDay = () => {\r\n     setDayNumber(1);\r\n@@ -83,8 +88,9 @@\n   };\r\n \r\n   const handleEndDay = () => {\r\n     setDayNumber(null);\r\n+    setShowProgressForm(true); // Mostrar formulario de progreso después de completar el día\r\n   };\r\n \r\n   const onCompleteDay = (day) => {\r\n     setCompletedDays((prevCompletedDays) => {\r\n@@ -118,141 +124,13 @@\n       console.error('Error al eliminar el plan:', error);\r\n     }\r\n   };\r\n \r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan \r\n-          plan={plan} \r\n-          onStartFirstDay={handleStartFirstDay} \r\n-          onStartDay={handleStartDay} \r\n-          onDeletePlan={handleDeletePlan} \r\n-          completedDays={completedDays} \r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState([]);\r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {  // Verifica si ya existe un plan guardado\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n+  const handlePredictionsReceived = (data) => {\r\n+    setPredictions(data);\r\n+    setShowProgressForm(false); // Ocultar formulario de progreso y mostrar predicciones\r\n   };\r\n \r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    localStorage.removeItem('plan'); // Eliminar el plan del localStorage al cerrar sesión\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => [...prevCompletedDays, day]);\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan)); // Guardar el plan en localStorage\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      localStorage.removeItem('plan'); // Eliminar el plan del localStorage al reiniciar\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n   return (\r\n     <div className=\"App\">\r\n       {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n       {!isAuthenticated ? (\r\n@@ -265,15 +143,23 @@\n           onEndDay={handleEndDay} \r\n           onCompleteDay={onCompleteDay} \r\n         />\r\n       ) : hasPlan ? (\r\n-        <NutritionPlan \r\n-          plan={plan} \r\n-          onStartFirstDay={handleStartFirstDay} \r\n-          onStartDay={handleStartDay} \r\n-          onDeletePlan={handleDeletePlan} \r\n-          completedDays={completedDays} \r\n-        />\r\n+        <>\r\n+          <NutritionPlan \r\n+            plan={plan} \r\n+            onStartFirstDay={handleStartFirstDay} \r\n+            onStartDay={handleStartDay} \r\n+            onDeletePlan={handleDeletePlan} \r\n+            completedDays={completedDays} \r\n+          />\r\n+          {showProgressForm && (\r\n+            <ProgressForm onPredictionsReceived={handlePredictionsReceived} />\r\n+          )}\r\n+          {predictions && (\r\n+            <Predictions predictions={predictions} />\r\n+          )}\r\n+        </>\r\n       ) : (\r\n         <Form setPlan={handlePlanCreated} />\r\n       )}\r\n     </div>\r\n"
                },
                {
                    "date": 1731003923957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import DayPlan from './components/DayPlan';\r\n import Navbar from './components/Navbar';\r\n import ProgressForm from './components/ProgressForm';\r\n import Predictions from './components/Predictions';\r\n+import Modal from './components/Modal';\r\n \r\n const App = () => {\r\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n   const [hasPlan, setHasPlan] = useState(false);\r\n@@ -15,10 +16,10 @@\n   const [completedDays, setCompletedDays] = useState(() => {\r\n     const storedCompletedDays = localStorage.getItem('completedDays');\r\n     return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n   });\r\n-  const [predictions, setPredictions] = useState(null); // Estado para las predicciones\r\n-  const [showProgressForm, setShowProgressForm] = useState(false); // Estado para mostrar el formulario de progreso\r\n+  const [predictions, setPredictions] = useState(null); \r\n+  const [showProgressModal, setShowProgressModal] = useState(false); \r\n \r\n   useEffect(() => {\r\n     const token = localStorage.getItem('token');\r\n     const storedPlan = localStorage.getItem('plan');\r\n@@ -75,9 +76,9 @@\n     setHasPlan(false);\r\n     setPlan(null);\r\n     setDayNumber(null);\r\n     setCompletedDays([]);\r\n-    setPredictions(null); // Restablecer predicciones al cerrar sesión\r\n+    setPredictions(null);\r\n   };\r\n \r\n   const handleStartFirstDay = () => {\r\n     setDayNumber(1);\r\n@@ -88,9 +89,9 @@\n   };\r\n \r\n   const handleEndDay = () => {\r\n     setDayNumber(null);\r\n-    setShowProgressForm(true); // Mostrar formulario de progreso después de completar el día\r\n+    setShowProgressModal(true); // Mostrar el modal de progreso al completar el día\r\n   };\r\n \r\n   const onCompleteDay = (day) => {\r\n     setCompletedDays((prevCompletedDays) => {\r\n@@ -126,9 +127,8 @@\n   };\r\n \r\n   const handlePredictionsReceived = (data) => {\r\n     setPredictions(data);\r\n-    setShowProgressForm(false); // Ocultar formulario de progreso y mostrar predicciones\r\n   };\r\n \r\n   return (\r\n     <div className=\"App\">\r\n@@ -151,14 +151,15 @@\n             onStartDay={handleStartDay} \r\n             onDeletePlan={handleDeletePlan} \r\n             completedDays={completedDays} \r\n           />\r\n-          {showProgressForm && (\r\n-            <ProgressForm onPredictionsReceived={handlePredictionsReceived} />\r\n-          )}\r\n-          {predictions && (\r\n-            <Predictions predictions={predictions} />\r\n-          )}\r\n+          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n+            {predictions ? (\r\n+              <Predictions predictions={predictions} />\r\n+            ) : (\r\n+              <ProgressForm onPredictionsReceived={(data) => { handlePredictionsReceived(data); setShowProgressModal(false); }} />\r\n+            )}\r\n+          </Modal>\r\n         </>\r\n       ) : (\r\n         <Form setPlan={handlePlanCreated} />\r\n       )}\r\n"
                },
                {
                    "date": 1731004202717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,174 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+import ProgressForm from './components/ProgressForm';\r\n+import Predictions from './components/Predictions';\r\n+import Modal from './components/Modal';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState(() => {\r\n+    const storedCompletedDays = localStorage.getItem('completedDays');\r\n+    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n+  });\r\n+  const [predictions, setPredictions] = useState(null); \r\n+  const [showProgressModal, setShowProgressModal] = useState(false); \r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated && !hasPlan) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, hasPlan]);\r\n+\r\n+  useEffect(() => {\r\n+    if (completedDays.length > 0) {\r\n+      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n+    }\r\n+  }, [completedDays]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    localStorage.removeItem('plan');\r\n+    localStorage.removeItem('completedDays');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+    setCompletedDays([]);\r\n+    setPredictions(null);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+\r\n+    // Abrir el formulario de progreso en el día 5 de cada semana excepto la primera\r\n+    if (day % 7 === 5 && day > 7) {\r\n+      setShowProgressModal(true);\r\n+    }\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => {\r\n+      const updatedCompletedDays = [...prevCompletedDays, day];\r\n+      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n+      return updatedCompletedDays;\r\n+    });\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      localStorage.removeItem('plan');\r\n+      localStorage.removeItem('completedDays');\r\n+      setCompletedDays([]);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const handlePredictionsReceived = (data) => {\r\n+    setPredictions(data);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <>\r\n+          <NutritionPlan \r\n+            plan={plan} \r\n+            onStartFirstDay={handleStartFirstDay} \r\n+            onStartDay={handleStartDay} \r\n+            onDeletePlan={handleDeletePlan} \r\n+            completedDays={completedDays} \r\n+          />\r\n+          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n+            {predictions ? (\r\n+              <Predictions predictions={predictions} />\r\n+            ) : (\r\n+              <ProgressForm onPredictionsReceived={(data) => { handlePredictionsReceived(data); setShowProgressModal(false); }} />\r\n+            )}\r\n+          </Modal>\r\n+        </>\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1731004326062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,10 +86,9 @@\n \r\n   const handleStartDay = (day) => {\r\n     setDayNumber(day);\r\n \r\n-    // Abrir el formulario de progreso en el día 5 de cada semana excepto la primera\r\n-    if (day % 7 === 5 && day > 7) {\r\n+    if (day % 7 === 1 && day > 7) {\r\n       setShowProgressModal(true);\r\n     }\r\n   };\r\n \r\n@@ -171,174 +170,4 @@\n   );\r\n };\r\n \r\n export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-import ProgressForm from './components/ProgressForm';\r\n-import Predictions from './components/Predictions';\r\n-import Modal from './components/Modal';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState(() => {\r\n-    const storedCompletedDays = localStorage.getItem('completedDays');\r\n-    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n-  });\r\n-  const [predictions, setPredictions] = useState(null); \r\n-  const [showProgressModal, setShowProgressModal] = useState(false); \r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated && !hasPlan) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated, hasPlan]);\r\n-\r\n-  useEffect(() => {\r\n-    if (completedDays.length > 0) {\r\n-      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n-    }\r\n-  }, [completedDays]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    localStorage.removeItem('plan');\r\n-    localStorage.removeItem('completedDays');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-    setCompletedDays([]);\r\n-    setPredictions(null);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-    setShowProgressModal(true); // Mostrar el modal de progreso al completar el día\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => {\r\n-      const updatedCompletedDays = [...prevCompletedDays, day];\r\n-      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n-      return updatedCompletedDays;\r\n-    });\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      localStorage.removeItem('plan');\r\n-      localStorage.removeItem('completedDays');\r\n-      setCompletedDays([]);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  const handlePredictionsReceived = (data) => {\r\n-    setPredictions(data);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <>\r\n-          <NutritionPlan \r\n-            plan={plan} \r\n-            onStartFirstDay={handleStartFirstDay} \r\n-            onStartDay={handleStartDay} \r\n-            onDeletePlan={handleDeletePlan} \r\n-            completedDays={completedDays} \r\n-          />\r\n-          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n-            {predictions ? (\r\n-              <Predictions predictions={predictions} />\r\n-            ) : (\r\n-              <ProgressForm onPredictionsReceived={(data) => { handlePredictionsReceived(data); setShowProgressModal(false); }} />\r\n-            )}\r\n-          </Modal>\r\n-        </>\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n"
                },
                {
                    "date": 1731005607972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,13 +69,9 @@\n   };\r\n \r\n   const handleLogout = () => {\r\n     localStorage.removeItem('token');\r\n-    localStorage.removeItem('plan');\r\n-    localStorage.removeItem('completedDays');\r\n     setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n     setDayNumber(null);\r\n     setCompletedDays([]);\r\n     setPredictions(null);\r\n   };\r\n@@ -85,10 +81,9 @@\n   };\r\n \r\n   const handleStartDay = (day) => {\r\n     setDayNumber(day);\r\n-\r\n-    if (day % 7 === 1 && day > 7) {\r\n+    if (day % 7 === 5 && day > 7) {\r\n       setShowProgressModal(true);\r\n     }\r\n   };\r\n \r\n"
                },
                {
                    "date": 1731005866523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+import ProgressForm from './components/ProgressForm';\r\n+import Predictions from './components/Predictions';\r\n+import Modal from './components/Modal';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState(() => {\r\n+    const storedCompletedDays = localStorage.getItem('completedDays');\r\n+    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n+  });\r\n+  const [predictions, setPredictions] = useState(null); \r\n+  const [showProgressModal, setShowProgressModal] = useState(false); \r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated && !hasPlan) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, hasPlan]);\r\n+\r\n+  useEffect(() => {\r\n+    if (completedDays.length > 0) {\r\n+      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n+    }\r\n+  }, [completedDays]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setDayNumber(null);\r\n+    setCompletedDays([]);\r\n+    setPredictions(null);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+    if (day % 7 === 1 && day > 7) {\r\n+      setShowProgressModal(true);\r\n+    }\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => {\r\n+      const updatedCompletedDays = [...prevCompletedDays, day];\r\n+      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n+      return updatedCompletedDays;\r\n+    });\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      localStorage.removeItem('plan');\r\n+      localStorage.removeItem('completedDays');\r\n+      setCompletedDays([]);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const handlePredictionsReceived = (data) => {\r\n+    setPredictions(data);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <>\r\n+          <NutritionPlan \r\n+            plan={plan} \r\n+            onStartFirstDay={handleStartFirstDay} \r\n+            onStartDay={handleStartDay} \r\n+            onDeletePlan={handleDeletePlan} \r\n+            completedDays={completedDays} \r\n+          />\r\n+          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n+            {predictions ? (\r\n+              <Predictions predictions={predictions} />\r\n+            ) : (\r\n+              <ProgressForm onPredictionsReceived={(data) => { handlePredictionsReceived(data); setShowProgressModal(false); }} />\r\n+            )}\r\n+          </Modal>\r\n+        </>\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1731005982537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+import ProgressForm from './components/ProgressForm';\r\n+import Predictions from './components/Predictions';\r\n+import Modal from './components/Modal';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState(() => {\r\n+    const storedCompletedDays = localStorage.getItem('completedDays');\r\n+    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n+  });\r\n+  const [predictions, setPredictions] = useState(null); \r\n+  const [showProgressModal, setShowProgressModal] = useState(false); \r\n+\r\n+  // Efecto para cargar el token y el plan al inicio\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated && !hasPlan) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, hasPlan]);\r\n+\r\n+  useEffect(() => {\r\n+    if (completedDays.length > 0) {\r\n+      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n+    }\r\n+  }, [completedDays]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+    if (storedPlan) {\r\n+      setPlan(JSON.parse(storedPlan));\r\n+      setHasPlan(true);\r\n+    }\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+\r\n+    if (day % 7 === 1 && day > 7) {\r\n+      setShowProgressModal(true);\r\n+    }\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => {\r\n+      const updatedCompletedDays = [...prevCompletedDays, day];\r\n+      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n+      return updatedCompletedDays;\r\n+    });\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      localStorage.removeItem('plan');\r\n+      localStorage.removeItem('completedDays');\r\n+      setCompletedDays([]);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const handlePredictionsReceived = (data) => {\r\n+    setPredictions(data);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <>\r\n+          <NutritionPlan \r\n+            plan={plan} \r\n+            onStartFirstDay={handleStartFirstDay} \r\n+            onStartDay={handleStartDay} \r\n+            onDeletePlan={handleDeletePlan} \r\n+            completedDays={completedDays} \r\n+          />\r\n+          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n+            {predictions ? (\r\n+              <Predictions predictions={predictions} />\r\n+            ) : (\r\n+              <ProgressForm onPredictionsReceived={(data) => { handlePredictionsReceived(data); setShowProgressModal(false); }} />\r\n+            )}\r\n+          </Modal>\r\n+        </>\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1731005987798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,170 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+import ProgressForm from './components/ProgressForm';\r\n+import Predictions from './components/Predictions';\r\n+import Modal from './components/Modal';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState(() => {\r\n+    const storedCompletedDays = localStorage.getItem('completedDays');\r\n+    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n+  });\r\n+  const [predictions, setPredictions] = useState(null); \r\n+  const [showProgressModal, setShowProgressModal] = useState(false); \r\n+\r\n+  // Efecto para cargar el token y el plan al inicio\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated && !hasPlan) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, hasPlan]);\r\n+\r\n+  useEffect(() => {\r\n+    if (completedDays.length > 0) {\r\n+      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n+    }\r\n+  }, [completedDays]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+    if (storedPlan) {\r\n+      setPlan(JSON.parse(storedPlan));\r\n+      setHasPlan(true);\r\n+    }\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+\r\n+    if (day % 7 === 1 && day > 7) {\r\n+      setShowProgressModal(true);\r\n+    }\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => {\r\n+      const updatedCompletedDays = [...prevCompletedDays, day];\r\n+      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n+      return updatedCompletedDays;\r\n+    });\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      localStorage.removeItem('plan');\r\n+      localStorage.removeItem('completedDays');\r\n+      setCompletedDays([]);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const handlePredictionsReceived = (data) => {\r\n+    setPredictions(data);\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <>\r\n+          <NutritionPlan \r\n+            plan={plan} \r\n+            onStartFirstDay={handleStartFirstDay} \r\n+            onStartDay={handleStartDay} \r\n+            onDeletePlan={handleDeletePlan} \r\n+            completedDays={completedDays} \r\n+          />\r\n+          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n+            {predictions ? (\r\n+              <Predictions predictions={predictions} />\r\n+            ) : (\r\n+              <ProgressForm onPredictionsReceived={(data) => { handlePredictionsReceived(data); setShowProgressModal(false); }} />\r\n+            )}\r\n+          </Modal>\r\n+        </>\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1731007298806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n import NutritionPlan from './components/NutritionPlan';\r\n import DayPlan from './components/DayPlan';\r\n import Navbar from './components/Navbar';\r\n import ProgressForm from './components/ProgressForm';\r\n-import Predictions from './components/Predictions';\r\n import Modal from './components/Modal';\r\n \r\n const App = () => {\r\n   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n@@ -16,12 +15,10 @@\n   const [completedDays, setCompletedDays] = useState(() => {\r\n     const storedCompletedDays = localStorage.getItem('completedDays');\r\n     return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n   });\r\n-  const [predictions, setPredictions] = useState(null); \r\n   const [showProgressModal, setShowProgressModal] = useState(false); \r\n \r\n-  // Efecto para cargar el token y el plan al inicio\r\n   useEffect(() => {\r\n     const token = localStorage.getItem('token');\r\n     const storedPlan = localStorage.getItem('plan');\r\n \r\n@@ -30,347 +27,8 @@\n       if (storedPlan) {\r\n         setHasPlan(true);\r\n         setPlan(JSON.parse(storedPlan));\r\n       }\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated && !hasPlan) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated, hasPlan]);\r\n-\r\n-  useEffect(() => {\r\n-    if (completedDays.length > 0) {\r\n-      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n-    }\r\n-  }, [completedDays]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-    if (storedPlan) {\r\n-      setPlan(JSON.parse(storedPlan));\r\n-      setHasPlan(true);\r\n-    }\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-\r\n-    if (day % 7 === 1 && day > 7) {\r\n-      setShowProgressModal(true);\r\n-    }\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => {\r\n-      const updatedCompletedDays = [...prevCompletedDays, day];\r\n-      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n-      return updatedCompletedDays;\r\n-    });\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      localStorage.removeItem('plan');\r\n-      localStorage.removeItem('completedDays');\r\n-      setCompletedDays([]);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  const handlePredictionsReceived = (data) => {\r\n-    setPredictions(data);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <>\r\n-          <NutritionPlan \r\n-            plan={plan} \r\n-            onStartFirstDay={handleStartFirstDay} \r\n-            onStartDay={handleStartDay} \r\n-            onDeletePlan={handleDeletePlan} \r\n-            completedDays={completedDays} \r\n-          />\r\n-          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n-            {predictions ? (\r\n-              <Predictions predictions={predictions} />\r\n-            ) : (\r\n-              <ProgressForm onPredictionsReceived={(data) => { handlePredictionsReceived(data); setShowProgressModal(false); }} />\r\n-            )}\r\n-          </Modal>\r\n-        </>\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-import ProgressForm from './components/ProgressForm';\r\n-import Predictions from './components/Predictions';\r\n-import Modal from './components/Modal';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState(() => {\r\n-    const storedCompletedDays = localStorage.getItem('completedDays');\r\n-    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n-  });\r\n-  const [predictions, setPredictions] = useState(null); \r\n-  const [showProgressModal, setShowProgressModal] = useState(false); \r\n-\r\n-  // Efecto para cargar el token y el plan al inicio\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated && !hasPlan) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated, hasPlan]);\r\n-\r\n-  useEffect(() => {\r\n-    if (completedDays.length > 0) {\r\n-      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n-    }\r\n-  }, [completedDays]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-    if (storedPlan) {\r\n-      setPlan(JSON.parse(storedPlan));\r\n-      setHasPlan(true);\r\n-    }\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-\r\n-    if (day % 7 === 1 && day > 7) {\r\n-      setShowProgressModal(true);\r\n-    }\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => {\r\n-      const updatedCompletedDays = [...prevCompletedDays, day];\r\n-      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n-      return updatedCompletedDays;\r\n-    });\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      localStorage.removeItem('plan');\r\n-      localStorage.removeItem('completedDays');\r\n-      setCompletedDays([]);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  const handlePredictionsReceived = (data) => {\r\n-    setPredictions(data);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <>\r\n-          <NutritionPlan \r\n-            plan={plan} \r\n-            onStartFirstDay={handleStartFirstDay} \r\n-            onStartDay={handleStartDay} \r\n-            onDeletePlan={handleDeletePlan} \r\n-            completedDays={completedDays} \r\n-          />\r\n-          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n-            {predictions ? (\r\n-              <Predictions predictions={predictions} />\r\n-            ) : (\r\n-              <ProgressForm onPredictionsReceived={(data) => { handlePredictionsReceived(data); setShowProgressModal(false); }} />\r\n-            )}\r\n-          </Modal>\r\n-        </>\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-import ProgressForm from './components/ProgressForm';\r\n-import Predictions from './components/Predictions';\r\n-import Modal from './components/Modal';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState(() => {\r\n-    const storedCompletedDays = localStorage.getItem('completedDays');\r\n-    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n-  });\r\n-  const [predictions, setPredictions] = useState(null); \r\n-  const [showProgressModal, setShowProgressModal] = useState(false); \r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n     } else {\r\n       setIsAuthenticated(false);\r\n     }\r\n   }, []);\r\n@@ -410,20 +68,22 @@\n \r\n   const handleLogout = () => {\r\n     localStorage.removeItem('token');\r\n     setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n     setDayNumber(null);\r\n     setCompletedDays([]);\r\n-    setPredictions(null);\r\n   };\r\n \r\n   const handleStartFirstDay = () => {\r\n     setDayNumber(1);\r\n   };\r\n \r\n   const handleStartDay = (day) => {\r\n     setDayNumber(day);\r\n-    if (day % 7 === 1 && day > 7) {\r\n+\r\n+    if (day % 7 === 1 && day > 7) {  // Abrir ProgressForm en el primer día de cada nueva semana\r\n       setShowProgressModal(true);\r\n     }\r\n   };\r\n \r\n@@ -463,180 +123,33 @@\n       console.error('Error al eliminar el plan:', error);\r\n     }\r\n   };\r\n \r\n-  const handlePredictionsReceived = (data) => {\r\n-    setPredictions(data);\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <>\r\n-          <NutritionPlan \r\n-            plan={plan} \r\n-            onStartFirstDay={handleStartFirstDay} \r\n-            onStartDay={handleStartDay} \r\n-            onDeletePlan={handleDeletePlan} \r\n-            completedDays={completedDays} \r\n-          />\r\n-          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n-            {predictions ? (\r\n-              <Predictions predictions={predictions} />\r\n-            ) : (\r\n-              <ProgressForm onPredictionsReceived={(data) => { handlePredictionsReceived(data); setShowProgressModal(false); }} />\r\n-            )}\r\n-          </Modal>\r\n-        </>\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-import ProgressForm from './components/ProgressForm';\r\n-import Predictions from './components/Predictions';\r\n-import Modal from './components/Modal';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState(() => {\r\n-    const storedCompletedDays = localStorage.getItem('completedDays');\r\n-    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n-  });\r\n-  const [predictions, setPredictions] = useState(null); \r\n-  const [showProgressModal, setShowProgressModal] = useState(false); \r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated && !hasPlan) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated, hasPlan]);\r\n-\r\n-  useEffect(() => {\r\n-    if (completedDays.length > 0) {\r\n-      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n-    }\r\n-  }, [completedDays]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setDayNumber(null);\r\n-    setCompletedDays([]);\r\n-    setPredictions(null);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-    if (day % 7 === 5 && day > 7) {\r\n-      setShowProgressModal(true);\r\n-    }\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => {\r\n-      const updatedCompletedDays = [...prevCompletedDays, day];\r\n-      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n-      return updatedCompletedDays;\r\n-    });\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n+  // Nueva función para procesar los datos de progreso y actualizar el plan\r\n+  const handleProgressSubmit = async (data) => {\r\n     try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+      const token = localStorage.getItem('token');\r\n+      const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n         method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+        headers: {\r\n+          'Authorization': `Bearer ${token}`,\r\n+          'Content-Type': 'application/json',\r\n+        },\r\n+        body: JSON.stringify(data),\r\n       });\r\n+\r\n       if (!response.ok) {\r\n         throw new Error(`HTTP error! status: ${response.status}`);\r\n       }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      localStorage.removeItem('plan');\r\n-      localStorage.removeItem('completedDays');\r\n-      setCompletedDays([]);\r\n+\r\n+      const updatedPlan = await response.json();\r\n+      setPlan(updatedPlan);\r\n+      setShowProgressModal(false);\r\n     } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n+      console.error('Error al actualizar el plan:', error);\r\n     }\r\n   };\r\n \r\n-  const handlePredictionsReceived = (data) => {\r\n-    setPredictions(data);\r\n-  };\r\n-\r\n   return (\r\n     <div className=\"App\">\r\n       {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n       {!isAuthenticated ? (\r\n@@ -658,13 +171,9 @@\n             onDeletePlan={handleDeletePlan} \r\n             completedDays={completedDays} \r\n           />\r\n           <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n-            {predictions ? (\r\n-              <Predictions predictions={predictions} />\r\n-            ) : (\r\n-              <ProgressForm onPredictionsReceived={(data) => { handlePredictionsReceived(data); setShowProgressModal(false); }} />\r\n-            )}\r\n+            <ProgressForm onProgressSubmit={handleProgressSubmit} />\r\n           </Modal>\r\n         </>\r\n       ) : (\r\n         <Form setPlan={handlePlanCreated} />\r\n"
                },
                {
                    "date": 1731007845503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState(() => {\r\n+    const storedCompletedDays = localStorage.getItem('completedDays');\r\n+    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n+  });\r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated && !hasPlan) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, hasPlan]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    localStorage.removeItem('plan');\r\n+    localStorage.removeItem('completedDays');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+    setCompletedDays([]);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => {\r\n+      const updatedCompletedDays = [...prevCompletedDays, day];\r\n+      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n+      return updatedCompletedDays;\r\n+    });\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      localStorage.removeItem('plan');\r\n+      localStorage.removeItem('completedDays');\r\n+      setCompletedDays([]);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan \r\n+          plan={plan} \r\n+          onStartFirstDay={handleStartFirstDay} \r\n+          onStartDay={handleStartDay} \r\n+          onDeletePlan={handleDeletePlan} \r\n+          completedDays={completedDays} \r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1731008461644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState(() => {\r\n+    const storedCompletedDays = localStorage.getItem('completedDays');\r\n+    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n+  });\r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated && !hasPlan) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, hasPlan]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    localStorage.removeItem('plan');\r\n+    localStorage.removeItem('completedDays');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+    setCompletedDays([]);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => {\r\n+      const updatedCompletedDays = [...prevCompletedDays, day];\r\n+      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n+      return updatedCompletedDays;\r\n+    });\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      localStorage.removeItem('plan');\r\n+      localStorage.removeItem('completedDays');\r\n+      setCompletedDays([]);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan \r\n+          plan={plan} \r\n+          onStartFirstDay={handleStartFirstDay} \r\n+          onStartDay={handleStartDay} \r\n+          onDeletePlan={handleDeletePlan} \r\n+          completedDays={completedDays} \r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1731008482359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,144 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState(() => {\r\n+    const storedCompletedDays = localStorage.getItem('completedDays');\r\n+    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n+  });\r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated && !hasPlan) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, hasPlan]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    localStorage.removeItem('plan');\r\n+    localStorage.removeItem('completedDays');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+    setCompletedDays([]);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => {\r\n+      const updatedCompletedDays = [...prevCompletedDays, day];\r\n+      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n+      return updatedCompletedDays;\r\n+    });\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      localStorage.removeItem('plan');\r\n+      localStorage.removeItem('completedDays');\r\n+      setCompletedDays([]);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <NutritionPlan \r\n+          plan={plan} \r\n+          onStartFirstDay={handleStartFirstDay} \r\n+          onStartDay={handleStartDay} \r\n+          onDeletePlan={handleDeletePlan} \r\n+          completedDays={completedDays} \r\n+        />\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1731008526290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,477 +141,4 @@\n   );\r\n };\r\n \r\n export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState(() => {\r\n-    const storedCompletedDays = localStorage.getItem('completedDays');\r\n-    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n-  });\r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated && !hasPlan) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated, hasPlan]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    localStorage.removeItem('plan');\r\n-    localStorage.removeItem('completedDays');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-    setCompletedDays([]);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => {\r\n-      const updatedCompletedDays = [...prevCompletedDays, day];\r\n-      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n-      return updatedCompletedDays;\r\n-    });\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      localStorage.removeItem('plan');\r\n-      localStorage.removeItem('completedDays');\r\n-      setCompletedDays([]);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan \r\n-          plan={plan} \r\n-          onStartFirstDay={handleStartFirstDay} \r\n-          onStartDay={handleStartDay} \r\n-          onDeletePlan={handleDeletePlan} \r\n-          completedDays={completedDays} \r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState(() => {\r\n-    const storedCompletedDays = localStorage.getItem('completedDays');\r\n-    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n-  });\r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated && !hasPlan) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated, hasPlan]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    localStorage.removeItem('plan');\r\n-    localStorage.removeItem('completedDays');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-    setCompletedDays([]);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => {\r\n-      const updatedCompletedDays = [...prevCompletedDays, day];\r\n-      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n-      return updatedCompletedDays;\r\n-    });\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      localStorage.removeItem('plan');\r\n-      localStorage.removeItem('completedDays');\r\n-      setCompletedDays([]);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan \r\n-          plan={plan} \r\n-          onStartFirstDay={handleStartFirstDay} \r\n-          onStartDay={handleStartDay} \r\n-          onDeletePlan={handleDeletePlan} \r\n-          completedDays={completedDays} \r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-import ProgressForm from './components/ProgressForm';\r\n-import Modal from './components/Modal';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState(() => {\r\n-    const storedCompletedDays = localStorage.getItem('completedDays');\r\n-    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n-  });\r\n-  const [showProgressModal, setShowProgressModal] = useState(false); \r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated && !hasPlan) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated, hasPlan]);\r\n-\r\n-  useEffect(() => {\r\n-    if (completedDays.length > 0) {\r\n-      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n-    }\r\n-  }, [completedDays]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-    setCompletedDays([]);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-\r\n-    if (day % 7 === 1 && day > 7) {  // Abrir ProgressForm en el primer día de cada nueva semana\r\n-      setShowProgressModal(true);\r\n-    }\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => {\r\n-      const updatedCompletedDays = [...prevCompletedDays, day];\r\n-      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n-      return updatedCompletedDays;\r\n-    });\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      localStorage.removeItem('plan');\r\n-      localStorage.removeItem('completedDays');\r\n-      setCompletedDays([]);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Nueva función para procesar los datos de progreso y actualizar el plan\r\n-  const handleProgressSubmit = async (data) => {\r\n-    try {\r\n-      const token = localStorage.getItem('token');\r\n-      const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n-        method: 'POST',\r\n-        headers: {\r\n-          'Authorization': `Bearer ${token}`,\r\n-          'Content-Type': 'application/json',\r\n-        },\r\n-        body: JSON.stringify(data),\r\n-      });\r\n-\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-\r\n-      const updatedPlan = await response.json();\r\n-      setPlan(updatedPlan);\r\n-      setShowProgressModal(false);\r\n-    } catch (error) {\r\n-      console.error('Error al actualizar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <>\r\n-          <NutritionPlan \r\n-            plan={plan} \r\n-            onStartFirstDay={handleStartFirstDay} \r\n-            onStartDay={handleStartDay} \r\n-            onDeletePlan={handleDeletePlan} \r\n-            completedDays={completedDays} \r\n-          />\r\n-          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n-            <ProgressForm onProgressSubmit={handleProgressSubmit} />\r\n-          </Modal>\r\n-        </>\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n"
                },
                {
                    "date": 1731008590770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,185 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+import ProgressForm from './components/ProgressForm';\r\n+import Modal from './components/Modal';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState(() => {\r\n+    const storedCompletedDays = localStorage.getItem('completedDays');\r\n+    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n+  });\r\n+  const [showProgressModal, setShowProgressModal] = useState(false); \r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated && !hasPlan) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, hasPlan]);\r\n+\r\n+  useEffect(() => {\r\n+    if (completedDays.length > 0) {\r\n+      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n+    }\r\n+  }, [completedDays]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+    setCompletedDays([]);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+\r\n+    if (day % 7 === 1 && day > 7) {  // Abrir ProgressForm en el primer día de cada nueva semana\r\n+      setShowProgressModal(true);\r\n+    }\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => {\r\n+      const updatedCompletedDays = [...prevCompletedDays, day];\r\n+      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n+      return updatedCompletedDays;\r\n+    });\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      localStorage.removeItem('plan');\r\n+      localStorage.removeItem('completedDays');\r\n+      setCompletedDays([]);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Nueva función para procesar los datos de progreso y actualizar el plan\r\n+  const handleProgressSubmit = async (data) => {\r\n+    try {\r\n+      const token = localStorage.getItem('token');\r\n+      const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n+        method: 'POST',\r\n+        headers: {\r\n+          'Authorization': `Bearer ${token}`,\r\n+          'Content-Type': 'application/json',\r\n+        },\r\n+        body: JSON.stringify(data),\r\n+      });\r\n+\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+\r\n+      const updatedPlan = await response.json();\r\n+      setPlan(updatedPlan);\r\n+      setShowProgressModal(false);\r\n+    } catch (error) {\r\n+      console.error('Error al actualizar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <>\r\n+          <NutritionPlan \r\n+            plan={plan} \r\n+            onStartFirstDay={handleStartFirstDay} \r\n+            onStartDay={handleStartDay} \r\n+            onDeletePlan={handleDeletePlan} \r\n+            completedDays={completedDays} \r\n+          />\r\n+          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n+            <ProgressForm onProgressSubmit={handleProgressSubmit} />\r\n+          </Modal>\r\n+        </>\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1731008843325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,148 +182,4 @@\n   );\r\n };\r\n \r\n export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState(() => {\r\n-    const storedCompletedDays = localStorage.getItem('completedDays');\r\n-    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n-  });\r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated && !hasPlan) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated, hasPlan]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    localStorage.removeItem('plan');\r\n-    localStorage.removeItem('completedDays');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-    setCompletedDays([]);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => {\r\n-      const updatedCompletedDays = [...prevCompletedDays, day];\r\n-      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n-      return updatedCompletedDays;\r\n-    });\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      localStorage.removeItem('plan');\r\n-      localStorage.removeItem('completedDays');\r\n-      setCompletedDays([]);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <NutritionPlan \r\n-          plan={plan} \r\n-          onStartFirstDay={handleStartFirstDay} \r\n-          onStartDay={handleStartDay} \r\n-          onDeletePlan={handleDeletePlan} \r\n-          completedDays={completedDays} \r\n-        />\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n"
                },
                {
                    "date": 1731010679421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,181 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+import ProgressForm from './components/ProgressForm';\r\n+import Modal from './components/Modal';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState(() => {\r\n+    const storedCompletedDays = localStorage.getItem('completedDays');\r\n+    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n+  });\r\n+  const [showProgressModal, setShowProgressModal] = useState(false);\r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated && !hasPlan) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, hasPlan]);\r\n+\r\n+  useEffect(() => {\r\n+    if (completedDays.length > 0) {\r\n+      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n+    }\r\n+  }, [completedDays]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    // No eliminamos el plan aquí para que se mantenga después de cerrar sesión\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+\r\n+    if (day % 7 === 1 && day > 7) {  // Abrir ProgressForm en el primer día de cada nueva semana\r\n+      setShowProgressModal(true);\r\n+    }\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => {\r\n+      const updatedCompletedDays = [...prevCompletedDays, day];\r\n+      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n+      return updatedCompletedDays;\r\n+    });\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      localStorage.removeItem('plan');\r\n+      localStorage.removeItem('completedDays');\r\n+      setCompletedDays([]);\r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleProgressSubmit = async (data) => {\r\n+    try {\r\n+      const token = localStorage.getItem('token');\r\n+      const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n+        method: 'POST',\r\n+        headers: {\r\n+          Authorization: `Bearer ${token}`,\r\n+          'Content-Type': 'application/json',\r\n+        },\r\n+        body: JSON.stringify(data),\r\n+      });\r\n+\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+\r\n+      const updatedPlan = await response.json();\r\n+      setPlan(updatedPlan);\r\n+      setShowProgressModal(false);\r\n+    } catch (error) {\r\n+      console.error('Error al actualizar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan\r\n+          dayNumber={dayNumber}\r\n+          setDayNumber={setDayNumber}\r\n+          plan={plan}\r\n+          onEndDay={handleEndDay}\r\n+          onCompleteDay={onCompleteDay}\r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <>\r\n+          <NutritionPlan\r\n+            plan={plan}\r\n+            onStartFirstDay={handleStartFirstDay}\r\n+            onStartDay={handleStartDay}\r\n+            onDeletePlan={handleDeletePlan}\r\n+            completedDays={completedDays}\r\n+          />\r\n+          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n+            <ProgressForm onProgressSubmit={handleProgressSubmit} />\r\n+          </Modal>\r\n+        </>\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1731010978240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,189 +15,8 @@\n   const [completedDays, setCompletedDays] = useState(() => {\r\n     const storedCompletedDays = localStorage.getItem('completedDays');\r\n     return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n   });\r\n-  const [showProgressModal, setShowProgressModal] = useState(false);\r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated && !hasPlan) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated, hasPlan]);\r\n-\r\n-  useEffect(() => {\r\n-    if (completedDays.length > 0) {\r\n-      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n-    }\r\n-  }, [completedDays]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    // No eliminamos el plan aquí para que se mantenga después de cerrar sesión\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-\r\n-    if (day % 7 === 1 && day > 7) {  // Abrir ProgressForm en el primer día de cada nueva semana\r\n-      setShowProgressModal(true);\r\n-    }\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => {\r\n-      const updatedCompletedDays = [...prevCompletedDays, day];\r\n-      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n-      return updatedCompletedDays;\r\n-    });\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      localStorage.removeItem('plan');\r\n-      localStorage.removeItem('completedDays');\r\n-      setCompletedDays([]);\r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  const handleProgressSubmit = async (data) => {\r\n-    try {\r\n-      const token = localStorage.getItem('token');\r\n-      const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n-        method: 'POST',\r\n-        headers: {\r\n-          Authorization: `Bearer ${token}`,\r\n-          'Content-Type': 'application/json',\r\n-        },\r\n-        body: JSON.stringify(data),\r\n-      });\r\n-\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-\r\n-      const updatedPlan = await response.json();\r\n-      setPlan(updatedPlan);\r\n-      setShowProgressModal(false);\r\n-    } catch (error) {\r\n-      console.error('Error al actualizar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan\r\n-          dayNumber={dayNumber}\r\n-          setDayNumber={setDayNumber}\r\n-          plan={plan}\r\n-          onEndDay={handleEndDay}\r\n-          onCompleteDay={onCompleteDay}\r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <>\r\n-          <NutritionPlan\r\n-            plan={plan}\r\n-            onStartFirstDay={handleStartFirstDay}\r\n-            onStartDay={handleStartDay}\r\n-            onDeletePlan={handleDeletePlan}\r\n-            completedDays={completedDays}\r\n-          />\r\n-          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n-            <ProgressForm onProgressSubmit={handleProgressSubmit} />\r\n-          </Modal>\r\n-        </>\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-import ProgressForm from './components/ProgressForm';\r\n-import Modal from './components/Modal';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState(() => {\r\n-    const storedCompletedDays = localStorage.getItem('completedDays');\r\n-    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n-  });\r\n   const [showProgressModal, setShowProgressModal] = useState(false); \r\n \r\n   useEffect(() => {\r\n     const token = localStorage.getItem('token');\r\n@@ -294,13 +113,17 @@\n       });\r\n       if (!response.ok) {\r\n         throw new Error(`HTTP error! status: ${response.status}`);\r\n       }\r\n+\r\n+      // Limpiamos todo el localStorage para evitar datos residuales\r\n+      localStorage.clear();\r\n+\r\n+      // Restablecemos el estado de la aplicación\r\n       setPlan(null);\r\n       setHasPlan(false);\r\n-      localStorage.removeItem('plan');\r\n-      localStorage.removeItem('completedDays');\r\n       setCompletedDays([]);\r\n+      \r\n     } catch (error) {\r\n       console.error('Error al eliminar el plan:', error);\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1731010983891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,189 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+import ProgressForm from './components/ProgressForm';\r\n+import Modal from './components/Modal';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState(() => {\r\n+    const storedCompletedDays = localStorage.getItem('completedDays');\r\n+    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n+  });\r\n+  const [showProgressModal, setShowProgressModal] = useState(false); \r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated && !hasPlan) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, hasPlan]);\r\n+\r\n+  useEffect(() => {\r\n+    if (completedDays.length > 0) {\r\n+      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n+    }\r\n+  }, [completedDays]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+    setCompletedDays([]);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+\r\n+    if (day % 7 === 1 && day > 7) {  // Abrir ProgressForm en el primer día de cada nueva semana\r\n+      setShowProgressModal(true);\r\n+    }\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => {\r\n+      const updatedCompletedDays = [...prevCompletedDays, day];\r\n+      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n+      return updatedCompletedDays;\r\n+    });\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+\r\n+      // Limpiamos todo el localStorage para evitar datos residuales\r\n+      localStorage.clear();\r\n+\r\n+      // Restablecemos el estado de la aplicación\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      setCompletedDays([]);\r\n+      \r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Nueva función para procesar los datos de progreso y actualizar el plan\r\n+  const handleProgressSubmit = async (data) => {\r\n+    try {\r\n+      const token = localStorage.getItem('token');\r\n+      const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n+        method: 'POST',\r\n+        headers: {\r\n+          'Authorization': `Bearer ${token}`,\r\n+          'Content-Type': 'application/json',\r\n+        },\r\n+        body: JSON.stringify(data),\r\n+      });\r\n+\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+\r\n+      const updatedPlan = await response.json();\r\n+      setPlan(updatedPlan);\r\n+      setShowProgressModal(false);\r\n+    } catch (error) {\r\n+      console.error('Error al actualizar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <>\r\n+          <NutritionPlan \r\n+            plan={plan} \r\n+            onStartFirstDay={handleStartFirstDay} \r\n+            onStartDay={handleStartDay} \r\n+            onDeletePlan={handleDeletePlan} \r\n+            completedDays={completedDays} \r\n+          />\r\n+          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n+            <ProgressForm onProgressSubmit={handleProgressSubmit} />\r\n+          </Modal>\r\n+        </>\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1731011016461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,189 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+import ProgressForm from './components/ProgressForm';\r\n+import Modal from './components/Modal';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState(() => {\r\n+    const storedCompletedDays = localStorage.getItem('completedDays');\r\n+    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n+  });\r\n+  const [showProgressModal, setShowProgressModal] = useState(false); \r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated && !hasPlan) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, hasPlan]);\r\n+\r\n+  useEffect(() => {\r\n+    if (completedDays.length > 0) {\r\n+      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n+    }\r\n+  }, [completedDays]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+    setCompletedDays([]);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+\r\n+    if (day % 7 === 1 && day > 7) {  // Abrir ProgressForm en el primer día de cada nueva semana\r\n+      setShowProgressModal(true);\r\n+    }\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => {\r\n+      const updatedCompletedDays = [...prevCompletedDays, day];\r\n+      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n+      return updatedCompletedDays;\r\n+    });\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+\r\n+      // Limpiamos todo el localStorage para evitar datos residuales\r\n+      localStorage.clear();\r\n+\r\n+      // Restablecemos el estado de la aplicación\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      setCompletedDays([]);\r\n+      \r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Nueva función para procesar los datos de progreso y actualizar el plan\r\n+  const handleProgressSubmit = async (data) => {\r\n+    try {\r\n+      const token = localStorage.getItem('token');\r\n+      const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n+        method: 'POST',\r\n+        headers: {\r\n+          'Authorization': `Bearer ${token}`,\r\n+          'Content-Type': 'application/json',\r\n+        },\r\n+        body: JSON.stringify(data),\r\n+      });\r\n+\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+\r\n+      const updatedPlan = await response.json();\r\n+      setPlan(updatedPlan);\r\n+      setShowProgressModal(false);\r\n+    } catch (error) {\r\n+      console.error('Error al actualizar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <>\r\n+          <NutritionPlan \r\n+            plan={plan} \r\n+            onStartFirstDay={handleStartFirstDay} \r\n+            onStartDay={handleStartDay} \r\n+            onDeletePlan={handleDeletePlan} \r\n+            completedDays={completedDays} \r\n+          />\r\n+          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n+            <ProgressForm onProgressSubmit={handleProgressSubmit} />\r\n+          </Modal>\r\n+        </>\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1731011177970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,190 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+import ProgressForm from './components/ProgressForm';\r\n+import Modal from './components/Modal';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState(() => {\r\n+    const storedCompletedDays = localStorage.getItem('completedDays');\r\n+    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n+  });\r\n+  const [showProgressModal, setShowProgressModal] = useState(false); \r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated && !hasPlan) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, hasPlan]);\r\n+\r\n+  useEffect(() => {\r\n+    if (completedDays.length > 0) {\r\n+      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n+    }\r\n+  }, [completedDays]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n+    setDayNumber(null);\r\n+    setCompletedDays([]);\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+\r\n+    if (day % 7 === 1 && day > 7) {  // Abrir ProgressForm en el primer día de cada nueva semana\r\n+      setShowProgressModal(true);\r\n+    }\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => {\r\n+      const updatedCompletedDays = [...prevCompletedDays, day];\r\n+      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n+      return updatedCompletedDays;\r\n+    });\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+\r\n+      // Limpiamos todo el localStorage para evitar datos residuales\r\n+      localStorage.clear();\r\n+\r\n+      // Restablecemos el estado de la aplicación\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      setCompletedDays([]);\r\n+      setDayNumber(null); // Reiniciar el día seleccionado\r\n+      \r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Nueva función para procesar los datos de progreso y actualizar el plan\r\n+  const handleProgressSubmit = async (data) => {\r\n+    try {\r\n+      const token = localStorage.getItem('token');\r\n+      const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n+        method: 'POST',\r\n+        headers: {\r\n+          'Authorization': `Bearer ${token}`,\r\n+          'Content-Type': 'application/json',\r\n+        },\r\n+        body: JSON.stringify(data),\r\n+      });\r\n+\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+\r\n+      const updatedPlan = await response.json();\r\n+      setPlan(updatedPlan);\r\n+      setShowProgressModal(false);\r\n+    } catch (error) {\r\n+      console.error('Error al actualizar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <>\r\n+          <NutritionPlan \r\n+            plan={plan} \r\n+            onStartFirstDay={handleStartFirstDay} \r\n+            onStartDay={handleStartDay} \r\n+            onDeletePlan={handleDeletePlan} \r\n+            completedDays={completedDays} \r\n+          />\r\n+          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n+            <ProgressForm onProgressSubmit={handleProgressSubmit} />\r\n+          </Modal>\r\n+        </>\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1731011358806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,12 +68,10 @@\n \r\n   const handleLogout = () => {\r\n     localStorage.removeItem('token');\r\n     setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n     setDayNumber(null);\r\n-    setCompletedDays([]);\r\n+    setCompletedDays([]); // Mantener el plan en localStorage y no eliminarlo al cerrar sesión\r\n   };\r\n \r\n   const handleStartFirstDay = () => {\r\n     setDayNumber(1);\r\n@@ -115,22 +113,22 @@\n         throw new Error(`HTTP error! status: ${response.status}`);\r\n       }\r\n \r\n       // Limpiamos todo el localStorage para evitar datos residuales\r\n-      localStorage.clear();\r\n+      localStorage.removeItem('plan');\r\n+      localStorage.removeItem('completedDays');\r\n \r\n       // Restablecemos el estado de la aplicación\r\n       setPlan(null);\r\n       setHasPlan(false);\r\n       setCompletedDays([]);\r\n-      setDayNumber(null); // Reiniciar el día seleccionado\r\n+      setDayNumber(null);\r\n       \r\n     } catch (error) {\r\n       console.error('Error al eliminar el plan:', error);\r\n     }\r\n   };\r\n \r\n-  // Nueva función para procesar los datos de progreso y actualizar el plan\r\n   const handleProgressSubmit = async (data) => {\r\n     try {\r\n       const token = localStorage.getItem('token');\r\n       const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n@@ -187,571 +185,4 @@\n   );\r\n };\r\n \r\n export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-import ProgressForm from './components/ProgressForm';\r\n-import Modal from './components/Modal';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState(() => {\r\n-    const storedCompletedDays = localStorage.getItem('completedDays');\r\n-    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n-  });\r\n-  const [showProgressModal, setShowProgressModal] = useState(false); \r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated && !hasPlan) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated, hasPlan]);\r\n-\r\n-  useEffect(() => {\r\n-    if (completedDays.length > 0) {\r\n-      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n-    }\r\n-  }, [completedDays]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-    setCompletedDays([]);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-\r\n-    if (day % 7 === 1 && day > 7) {  // Abrir ProgressForm en el primer día de cada nueva semana\r\n-      setShowProgressModal(true);\r\n-    }\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => {\r\n-      const updatedCompletedDays = [...prevCompletedDays, day];\r\n-      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n-      return updatedCompletedDays;\r\n-    });\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-\r\n-      // Limpiamos todo el localStorage para evitar datos residuales\r\n-      localStorage.clear();\r\n-\r\n-      // Restablecemos el estado de la aplicación\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      setCompletedDays([]);\r\n-      \r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Nueva función para procesar los datos de progreso y actualizar el plan\r\n-  const handleProgressSubmit = async (data) => {\r\n-    try {\r\n-      const token = localStorage.getItem('token');\r\n-      const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n-        method: 'POST',\r\n-        headers: {\r\n-          'Authorization': `Bearer ${token}`,\r\n-          'Content-Type': 'application/json',\r\n-        },\r\n-        body: JSON.stringify(data),\r\n-      });\r\n-\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-\r\n-      const updatedPlan = await response.json();\r\n-      setPlan(updatedPlan);\r\n-      setShowProgressModal(false);\r\n-    } catch (error) {\r\n-      console.error('Error al actualizar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <>\r\n-          <NutritionPlan \r\n-            plan={plan} \r\n-            onStartFirstDay={handleStartFirstDay} \r\n-            onStartDay={handleStartDay} \r\n-            onDeletePlan={handleDeletePlan} \r\n-            completedDays={completedDays} \r\n-          />\r\n-          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n-            <ProgressForm onProgressSubmit={handleProgressSubmit} />\r\n-          </Modal>\r\n-        </>\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-import ProgressForm from './components/ProgressForm';\r\n-import Modal from './components/Modal';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState(() => {\r\n-    const storedCompletedDays = localStorage.getItem('completedDays');\r\n-    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n-  });\r\n-  const [showProgressModal, setShowProgressModal] = useState(false); \r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated && !hasPlan) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated, hasPlan]);\r\n-\r\n-  useEffect(() => {\r\n-    if (completedDays.length > 0) {\r\n-      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n-    }\r\n-  }, [completedDays]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-    setCompletedDays([]);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-\r\n-    if (day % 7 === 1 && day > 7) {  // Abrir ProgressForm en el primer día de cada nueva semana\r\n-      setShowProgressModal(true);\r\n-    }\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => {\r\n-      const updatedCompletedDays = [...prevCompletedDays, day];\r\n-      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n-      return updatedCompletedDays;\r\n-    });\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-\r\n-      // Limpiamos todo el localStorage para evitar datos residuales\r\n-      localStorage.clear();\r\n-\r\n-      // Restablecemos el estado de la aplicación\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      setCompletedDays([]);\r\n-      \r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Nueva función para procesar los datos de progreso y actualizar el plan\r\n-  const handleProgressSubmit = async (data) => {\r\n-    try {\r\n-      const token = localStorage.getItem('token');\r\n-      const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n-        method: 'POST',\r\n-        headers: {\r\n-          'Authorization': `Bearer ${token}`,\r\n-          'Content-Type': 'application/json',\r\n-        },\r\n-        body: JSON.stringify(data),\r\n-      });\r\n-\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-\r\n-      const updatedPlan = await response.json();\r\n-      setPlan(updatedPlan);\r\n-      setShowProgressModal(false);\r\n-    } catch (error) {\r\n-      console.error('Error al actualizar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <>\r\n-          <NutritionPlan \r\n-            plan={plan} \r\n-            onStartFirstDay={handleStartFirstDay} \r\n-            onStartDay={handleStartDay} \r\n-            onDeletePlan={handleDeletePlan} \r\n-            completedDays={completedDays} \r\n-          />\r\n-          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n-            <ProgressForm onProgressSubmit={handleProgressSubmit} />\r\n-          </Modal>\r\n-        </>\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-import ProgressForm from './components/ProgressForm';\r\n-import Modal from './components/Modal';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState(() => {\r\n-    const storedCompletedDays = localStorage.getItem('completedDays');\r\n-    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n-  });\r\n-  const [showProgressModal, setShowProgressModal] = useState(false); \r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated && !hasPlan) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated, hasPlan]);\r\n-\r\n-  useEffect(() => {\r\n-    if (completedDays.length > 0) {\r\n-      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n-    }\r\n-  }, [completedDays]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setHasPlan(false);\r\n-    setPlan(null);\r\n-    setDayNumber(null);\r\n-    setCompletedDays([]);\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-\r\n-    if (day % 7 === 1 && day > 7) {  // Abrir ProgressForm en el primer día de cada nueva semana\r\n-      setShowProgressModal(true);\r\n-    }\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => {\r\n-      const updatedCompletedDays = [...prevCompletedDays, day];\r\n-      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n-      return updatedCompletedDays;\r\n-    });\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-\r\n-      // Limpiamos todo el localStorage para evitar datos residuales\r\n-      localStorage.clear();\r\n-\r\n-      // Restablecemos el estado de la aplicación\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      setCompletedDays([]);\r\n-      \r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  // Nueva función para procesar los datos de progreso y actualizar el plan\r\n-  const handleProgressSubmit = async (data) => {\r\n-    try {\r\n-      const token = localStorage.getItem('token');\r\n-      const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n-        method: 'POST',\r\n-        headers: {\r\n-          'Authorization': `Bearer ${token}`,\r\n-          'Content-Type': 'application/json',\r\n-        },\r\n-        body: JSON.stringify(data),\r\n-      });\r\n-\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-\r\n-      const updatedPlan = await response.json();\r\n-      setPlan(updatedPlan);\r\n-      setShowProgressModal(false);\r\n-    } catch (error) {\r\n-      console.error('Error al actualizar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <>\r\n-          <NutritionPlan \r\n-            plan={plan} \r\n-            onStartFirstDay={handleStartFirstDay} \r\n-            onStartDay={handleStartDay} \r\n-            onDeletePlan={handleDeletePlan} \r\n-            completedDays={completedDays} \r\n-          />\r\n-          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n-            <ProgressForm onProgressSubmit={handleProgressSubmit} />\r\n-          </Modal>\r\n-        </>\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n"
                },
                {
                    "date": 1731011381083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+import React, { useState, useEffect } from 'react';\r\n+import Login from './components/Login';\r\n+import Form from './components/Form';\r\n+import NutritionPlan from './components/NutritionPlan';\r\n+import DayPlan from './components/DayPlan';\r\n+import Navbar from './components/Navbar';\r\n+import ProgressForm from './components/ProgressForm';\r\n+import Modal from './components/Modal';\r\n+\r\n+const App = () => {\r\n+  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n+  const [hasPlan, setHasPlan] = useState(false);\r\n+  const [plan, setPlan] = useState(null);\r\n+  const [dayNumber, setDayNumber] = useState(null);\r\n+  const [completedDays, setCompletedDays] = useState(() => {\r\n+    const storedCompletedDays = localStorage.getItem('completedDays');\r\n+    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n+  });\r\n+  const [showProgressModal, setShowProgressModal] = useState(false); \r\n+\r\n+  useEffect(() => {\r\n+    const token = localStorage.getItem('token');\r\n+    const storedPlan = localStorage.getItem('plan');\r\n+\r\n+    if (token) {\r\n+      setIsAuthenticated(true);\r\n+      if (storedPlan) {\r\n+        setHasPlan(true);\r\n+        setPlan(JSON.parse(storedPlan));\r\n+      }\r\n+    } else {\r\n+      setIsAuthenticated(false);\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated && !hasPlan) {\r\n+      const checkUserPlan = async () => {\r\n+        try {\r\n+          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n+            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+          });\r\n+          if (!response.ok) {\r\n+            throw new Error(`HTTP error! status: ${response.status}`);\r\n+          }\r\n+          const data = await response.json();\r\n+          setHasPlan(data.hasPlan);\r\n+          if (data.hasPlan) {\r\n+            setPlan(data.plan);\r\n+          }\r\n+        } catch (error) {\r\n+          console.error('Error al verificar el plan del usuario:', error);\r\n+        }\r\n+      };\r\n+      checkUserPlan();\r\n+    }\r\n+  }, [isAuthenticated, hasPlan]);\r\n+\r\n+  useEffect(() => {\r\n+    if (completedDays.length > 0) {\r\n+      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n+    }\r\n+  }, [completedDays]);\r\n+\r\n+  const handleLogin = () => {\r\n+    setIsAuthenticated(true);\r\n+  };\r\n+\r\n+  const handleLogout = () => {\r\n+    localStorage.removeItem('token');\r\n+    setIsAuthenticated(false);\r\n+    setDayNumber(null);\r\n+    setCompletedDays([]); // Mantener el plan en localStorage y no eliminarlo al cerrar sesión\r\n+  };\r\n+\r\n+  const handleStartFirstDay = () => {\r\n+    setDayNumber(1);\r\n+  };\r\n+\r\n+  const handleStartDay = (day) => {\r\n+    setDayNumber(day);\r\n+\r\n+    if (day % 7 === 1 && day > 7) {  // Abrir ProgressForm en el primer día de cada nueva semana\r\n+      setShowProgressModal(true);\r\n+    }\r\n+  };\r\n+\r\n+  const handleEndDay = () => {\r\n+    setDayNumber(null);\r\n+  };\r\n+\r\n+  const onCompleteDay = (day) => {\r\n+    setCompletedDays((prevCompletedDays) => {\r\n+      const updatedCompletedDays = [...prevCompletedDays, day];\r\n+      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n+      return updatedCompletedDays;\r\n+    });\r\n+  };\r\n+\r\n+  const handlePlanCreated = (newPlan) => {\r\n+    setPlan(newPlan);\r\n+    setHasPlan(true);\r\n+    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n+  };\r\n+\r\n+  const handleDeletePlan = async () => {\r\n+    try {\r\n+      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n+        method: 'POST',\r\n+        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n+      });\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+\r\n+      // Limpiamos todo el localStorage para evitar datos residuales\r\n+      localStorage.removeItem('plan');\r\n+      localStorage.removeItem('completedDays');\r\n+\r\n+      // Restablecemos el estado de la aplicación\r\n+      setPlan(null);\r\n+      setHasPlan(false);\r\n+      setCompletedDays([]);\r\n+      setDayNumber(null);\r\n+      \r\n+    } catch (error) {\r\n+      console.error('Error al eliminar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  const handleProgressSubmit = async (data) => {\r\n+    try {\r\n+      const token = localStorage.getItem('token');\r\n+      const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n+        method: 'POST',\r\n+        headers: {\r\n+          'Authorization': `Bearer ${token}`,\r\n+          'Content-Type': 'application/json',\r\n+        },\r\n+        body: JSON.stringify(data),\r\n+      });\r\n+\r\n+      if (!response.ok) {\r\n+        throw new Error(`HTTP error! status: ${response.status}`);\r\n+      }\r\n+\r\n+      const updatedPlan = await response.json();\r\n+      setPlan(updatedPlan);\r\n+      setShowProgressModal(false);\r\n+    } catch (error) {\r\n+      console.error('Error al actualizar el plan:', error);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"App\">\r\n+      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n+      {!isAuthenticated ? (\r\n+        <Login onLogin={handleLogin} />\r\n+      ) : dayNumber ? (\r\n+        <DayPlan \r\n+          dayNumber={dayNumber} \r\n+          setDayNumber={setDayNumber} \r\n+          plan={plan} \r\n+          onEndDay={handleEndDay} \r\n+          onCompleteDay={onCompleteDay} \r\n+        />\r\n+      ) : hasPlan ? (\r\n+        <>\r\n+          <NutritionPlan \r\n+            plan={plan} \r\n+            onStartFirstDay={handleStartFirstDay} \r\n+            onStartDay={handleStartDay} \r\n+            onDeletePlan={handleDeletePlan} \r\n+            completedDays={completedDays} \r\n+          />\r\n+          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n+            <ProgressForm onProgressSubmit={handleProgressSubmit} />\r\n+          </Modal>\r\n+        </>\r\n+      ) : (\r\n+        <Form setPlan={handlePlanCreated} />\r\n+      )}\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default App;\r\n"
                },
                {
                    "date": 1731011631957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,10 +68,12 @@\n \r\n   const handleLogout = () => {\r\n     localStorage.removeItem('token');\r\n     setIsAuthenticated(false);\r\n+    setHasPlan(false);\r\n+    setPlan(null);\r\n     setDayNumber(null);\r\n-    setCompletedDays([]); // Mantener el plan en localStorage y no eliminarlo al cerrar sesión\r\n+    setCompletedDays([]);\r\n   };\r\n \r\n   const handleStartFirstDay = () => {\r\n     setDayNumber(1);\r\n@@ -113,22 +115,22 @@\n         throw new Error(`HTTP error! status: ${response.status}`);\r\n       }\r\n \r\n       // Limpiamos todo el localStorage para evitar datos residuales\r\n-      localStorage.removeItem('plan');\r\n-      localStorage.removeItem('completedDays');\r\n+      localStorage.clear();\r\n \r\n       // Restablecemos el estado de la aplicación\r\n       setPlan(null);\r\n       setHasPlan(false);\r\n       setCompletedDays([]);\r\n-      setDayNumber(null);\r\n+      setDayNumber(null); // Reiniciar el día seleccionado\r\n       \r\n     } catch (error) {\r\n       console.error('Error al eliminar el plan:', error);\r\n     }\r\n   };\r\n \r\n+  // Nueva función para procesar los datos de progreso y actualizar el plan\r\n   const handleProgressSubmit = async (data) => {\r\n     try {\r\n       const token = localStorage.getItem('token');\r\n       const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n@@ -185,192 +187,4 @@\n   );\r\n };\r\n \r\n export default App;\r\n-import React, { useState, useEffect } from 'react';\r\n-import Login from './components/Login';\r\n-import Form from './components/Form';\r\n-import NutritionPlan from './components/NutritionPlan';\r\n-import DayPlan from './components/DayPlan';\r\n-import Navbar from './components/Navbar';\r\n-import ProgressForm from './components/ProgressForm';\r\n-import Modal from './components/Modal';\r\n-\r\n-const App = () => {\r\n-  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n-  const [hasPlan, setHasPlan] = useState(false);\r\n-  const [plan, setPlan] = useState(null);\r\n-  const [dayNumber, setDayNumber] = useState(null);\r\n-  const [completedDays, setCompletedDays] = useState(() => {\r\n-    const storedCompletedDays = localStorage.getItem('completedDays');\r\n-    return storedCompletedDays ? JSON.parse(storedCompletedDays) : [];\r\n-  });\r\n-  const [showProgressModal, setShowProgressModal] = useState(false); \r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    const storedPlan = localStorage.getItem('plan');\r\n-\r\n-    if (token) {\r\n-      setIsAuthenticated(true);\r\n-      if (storedPlan) {\r\n-        setHasPlan(true);\r\n-        setPlan(JSON.parse(storedPlan));\r\n-      }\r\n-    } else {\r\n-      setIsAuthenticated(false);\r\n-    }\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    if (isAuthenticated && !hasPlan) {\r\n-      const checkUserPlan = async () => {\r\n-        try {\r\n-          const response = await fetch('http://127.0.0.1:8000/api/check-plan', {\r\n-            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-          });\r\n-          if (!response.ok) {\r\n-            throw new Error(`HTTP error! status: ${response.status}`);\r\n-          }\r\n-          const data = await response.json();\r\n-          setHasPlan(data.hasPlan);\r\n-          if (data.hasPlan) {\r\n-            setPlan(data.plan);\r\n-          }\r\n-        } catch (error) {\r\n-          console.error('Error al verificar el plan del usuario:', error);\r\n-        }\r\n-      };\r\n-      checkUserPlan();\r\n-    }\r\n-  }, [isAuthenticated, hasPlan]);\r\n-\r\n-  useEffect(() => {\r\n-    if (completedDays.length > 0) {\r\n-      localStorage.setItem('completedDays', JSON.stringify(completedDays));\r\n-    }\r\n-  }, [completedDays]);\r\n-\r\n-  const handleLogin = () => {\r\n-    setIsAuthenticated(true);\r\n-  };\r\n-\r\n-  const handleLogout = () => {\r\n-    localStorage.removeItem('token');\r\n-    setIsAuthenticated(false);\r\n-    setDayNumber(null);\r\n-    setCompletedDays([]); // Mantener el plan en localStorage y no eliminarlo al cerrar sesión\r\n-  };\r\n-\r\n-  const handleStartFirstDay = () => {\r\n-    setDayNumber(1);\r\n-  };\r\n-\r\n-  const handleStartDay = (day) => {\r\n-    setDayNumber(day);\r\n-\r\n-    if (day % 7 === 1 && day > 7) {  // Abrir ProgressForm en el primer día de cada nueva semana\r\n-      setShowProgressModal(true);\r\n-    }\r\n-  };\r\n-\r\n-  const handleEndDay = () => {\r\n-    setDayNumber(null);\r\n-  };\r\n-\r\n-  const onCompleteDay = (day) => {\r\n-    setCompletedDays((prevCompletedDays) => {\r\n-      const updatedCompletedDays = [...prevCompletedDays, day];\r\n-      localStorage.setItem('completedDays', JSON.stringify(updatedCompletedDays));\r\n-      return updatedCompletedDays;\r\n-    });\r\n-  };\r\n-\r\n-  const handlePlanCreated = (newPlan) => {\r\n-    setPlan(newPlan);\r\n-    setHasPlan(true);\r\n-    localStorage.setItem('plan', JSON.stringify(newPlan));\r\n-  };\r\n-\r\n-  const handleDeletePlan = async () => {\r\n-    try {\r\n-      const response = await fetch('http://127.0.0.1:8000/api/reset-plan', {\r\n-        method: 'POST',\r\n-        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\r\n-      });\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-\r\n-      // Limpiamos todo el localStorage para evitar datos residuales\r\n-      localStorage.removeItem('plan');\r\n-      localStorage.removeItem('completedDays');\r\n-\r\n-      // Restablecemos el estado de la aplicación\r\n-      setPlan(null);\r\n-      setHasPlan(false);\r\n-      setCompletedDays([]);\r\n-      setDayNumber(null);\r\n-      \r\n-    } catch (error) {\r\n-      console.error('Error al eliminar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  const handleProgressSubmit = async (data) => {\r\n-    try {\r\n-      const token = localStorage.getItem('token');\r\n-      const response = await fetch('http://127.0.0.1:8000/update_plan', {\r\n-        method: 'POST',\r\n-        headers: {\r\n-          'Authorization': `Bearer ${token}`,\r\n-          'Content-Type': 'application/json',\r\n-        },\r\n-        body: JSON.stringify(data),\r\n-      });\r\n-\r\n-      if (!response.ok) {\r\n-        throw new Error(`HTTP error! status: ${response.status}`);\r\n-      }\r\n-\r\n-      const updatedPlan = await response.json();\r\n-      setPlan(updatedPlan);\r\n-      setShowProgressModal(false);\r\n-    } catch (error) {\r\n-      console.error('Error al actualizar el plan:', error);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"App\">\r\n-      {isAuthenticated && <Navbar onLogout={handleLogout} />}\r\n-      {!isAuthenticated ? (\r\n-        <Login onLogin={handleLogin} />\r\n-      ) : dayNumber ? (\r\n-        <DayPlan \r\n-          dayNumber={dayNumber} \r\n-          setDayNumber={setDayNumber} \r\n-          plan={plan} \r\n-          onEndDay={handleEndDay} \r\n-          onCompleteDay={onCompleteDay} \r\n-        />\r\n-      ) : hasPlan ? (\r\n-        <>\r\n-          <NutritionPlan \r\n-            plan={plan} \r\n-            onStartFirstDay={handleStartFirstDay} \r\n-            onStartDay={handleStartDay} \r\n-            onDeletePlan={handleDeletePlan} \r\n-            completedDays={completedDays} \r\n-          />\r\n-          <Modal isOpen={showProgressModal} onClose={() => setShowProgressModal(false)}>\r\n-            <ProgressForm onProgressSubmit={handleProgressSubmit} />\r\n-          </Modal>\r\n-        </>\r\n-      ) : (\r\n-        <Form setPlan={handlePlanCreated} />\r\n-      )}\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default App;\r\n"
                }
            ],
            "date": 1730404735071,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport Login from './components/Login';\r\nimport Form from './components/Form';\r\nimport NutritionPlan from './components/NutritionPlan';\r\nimport DayPlan from './components/DayPlan';\r\nimport Navbar from './components/Navbar';\r\n\r\nconst App = () => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false); // Estado de autenticación\r\n    const [hasPlan, setHasPlan] = useState(false); // Estado que indica si el usuario tiene un plan\r\n    const [plan, setPlan] = useState(null); // Estado del plan nutricional\r\n    const [currentDay, setCurrentDay] = useState(null); // Estado para gestionar el día actual\r\n\r\n    useEffect(() => {\r\n        // Verificar si el usuario tiene un plan cuando se autentica\r\n        if (isAuthenticated) {\r\n            const checkUserPlan = async () => {\r\n                try {\r\n                    const response = await fetch('/api/check-plan', {\r\n                        headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }\r\n                    });\r\n                    const data = await response.json();\r\n                    setHasPlan(data.hasPlan);\r\n                    if (data.hasPlan) {\r\n                        setPlan(data.plan); // Guardar el plan si ya existe\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error al verificar el plan del usuario:', error);\r\n                }\r\n            };\r\n            checkUserPlan();\r\n        }\r\n    }, [isAuthenticated]);\r\n\r\n    const handleLogin = () => {\r\n        setIsAuthenticated(true); // Cambia el estado a autenticado cuando el usuario inicie sesión\r\n    };\r\n\r\n    const handleStartFirstDay = () => {\r\n        setCurrentDay(1); // Iniciar el primer día del plan\r\n    };\r\n\r\n    const handleEndDay = () => {\r\n        setCurrentDay(null); // Volver a la vista general después de completar un día\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {isAuthenticated && <Navbar />}\r\n\r\n            {!isAuthenticated ? (\r\n                <Login onLogin={handleLogin} />\r\n            ) : currentDay ? (\r\n                <DayPlan dayNumber={currentDay} onEndDay={handleEndDay} />\r\n            ) : hasPlan ? (\r\n                <NutritionPlan plan={plan} onStartFirstDay={handleStartFirstDay} />\r\n            ) : (\r\n                <Form setPlan={setPlan} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;"
        }
    ]
}