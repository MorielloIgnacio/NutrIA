{
    "sourceFile": "backend/train_model.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1730676065998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730676072007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,25 @@\n+import pandas as pd\r\n+from sklearn.tree import DecisionTreeClassifier\r\n+from sklearn.model_selection import train_test_split\r\n+import joblib\r\n+\r\n+# Cargar datos\r\n+data = pd.read_csv('dataset.csv')  # Tu conjunto de datos\r\n+\r\n+# Preprocesamiento y selección de características\r\n+X = data.drop('plan_recomendado', axis=1)  # Características de entrada\r\n+y = data['plan_recomendado']               # Salida deseada\r\n+\r\n+# Dividir en conjuntos de entrenamiento y prueba\r\n+X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\r\n+\r\n+# Crear y entrenar el modelo\r\n+model = DecisionTreeClassifier()\r\n+model.fit(X_train, y_train)\r\n+\r\n+# Evaluar el modelo (opcional)\r\n+score = model.score(X_test, y_test)\r\n+print(f'Precisión del modelo: {score}')\r\n+\r\n+# Guardar el modelo entrenado\r\n+joblib.dump(model, 'modelo_entrenado.pkl')\r\n"
                },
                {
                    "date": 1730679666996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from sklearn.model_selection import train_test_split\r\n import joblib\r\n \r\n # Cargar datos\r\n-data = pd.read_csv('dataset.csv')  # Tu conjunto de datos\r\n+data = pd.read_csv('data/dataset.csv')  # Tu conjunto de datos\r\n \r\n # Preprocesamiento y selección de características\r\n X = data.drop('plan_recomendado', axis=1)  # Características de entrada\r\n y = data['plan_recomendado']               # Salida deseada\r\n"
                },
                {
                    "date": 1730679789419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,25 @@\n+import pandas as pd\r\n+from sklearn.tree import DecisionTreeClassifier\r\n+from sklearn.model_selection import train_test_split\r\n+import joblib\r\n+\r\n+# Cargar datos\r\n+data = pd.read_csv('C:\\users\\morie\\Documents\\Workspace\\NutrIA\\backend\\data\\dataset.csv')  # Tu conjunto de datos\r\n+\r\n+# Preprocesamiento y selección de características\r\n+X = data.drop('plan_recomendado', axis=1)  # Características de entrada\r\n+y = data['plan_recomendado']               # Salida deseada\r\n+\r\n+# Dividir en conjuntos de entrenamiento y prueba\r\n+X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\r\n+\r\n+# Crear y entrenar el modelo\r\n+model = DecisionTreeClassifier()\r\n+model.fit(X_train, y_train)\r\n+\r\n+# Evaluar el modelo (opcional)\r\n+score = model.score(X_test, y_test)\r\n+print(f'Precisión del modelo: {score}')\r\n+\r\n+# Guardar el modelo entrenado\r\n+joblib.dump(model, 'modelo_entrenado.pkl')\r\n"
                },
                {
                    "date": 1730762473179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,19 @@\n+import pandas as pd\r\n+from data_processing import cargar_datos_usuario, generar_secuencias\r\n+from lstm_model import crear_modelo_lstm\r\n+\r\n+# Cargar y preparar datos\r\n+ruta = \"user_data.csv\"\r\n+user_data = cargar_datos_usuario(ruta)\r\n+time_steps = 7\r\n+n_features = 8\r\n+\r\n+# Generar secuencias para tres objetivos (ejemplo para 'peso')\r\n+generator = generar_secuencias(user_data, target_column='peso', time_steps=time_steps)\r\n+\r\n+# Crear y entrenar el modelo\r\n+model = crear_modelo_lstm(time_steps, n_features)\r\n+model.fit(generator, epochs=100)\r\n+\r\n+# Guardar el modelo entrenado\r\n+model.save(\"modelo_nutria_lstm.h5\")\r\n"
                },
                {
                    "date": 1730762495995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,19 @@\n+import pandas as pd\r\n+from data_processing import cargar_datos_usuario, generar_secuencias\r\n+from lstm_model import crear_modelo_lstm\r\n+\r\n+# Cargar y preparar datos\r\n+ruta = \"user_data.csv\"\r\n+user_data = cargar_datos_usuario(ruta)\r\n+time_steps = 7\r\n+n_features = 8\r\n+\r\n+# Generar secuencias para tres objetivos (ejemplo para 'peso')\r\n+generator = generar_secuencias(user_data, target_column='peso', time_steps=time_steps)\r\n+\r\n+# Crear y entrenar el modelo\r\n+model = crear_modelo_lstm(time_steps, n_features)\r\n+model.fit(generator, epochs=100)\r\n+\r\n+# Guardar el modelo entrenado\r\n+model.save(\"modelo_nutria_lstm.h5\")\r\n"
                },
                {
                    "date": 1730762526957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,19 @@\n+import pandas as pd\r\n+from data_processing import cargar_datos_usuario, generar_secuencias\r\n+from lstm_model import crear_modelo_lstm\r\n+\r\n+# Cargar y preparar datos\r\n+ruta = \"user_data.csv\"\r\n+user_data = cargar_datos_usuario(ruta)\r\n+time_steps = 2\r\n+n_features = 8\r\n+\r\n+# Generar secuencias para tres objetivos (ejemplo para 'peso')\r\n+generator = generar_secuencias(user_data, target_column='peso', time_steps=time_steps)\r\n+\r\n+# Crear y entrenar el modelo\r\n+model = crear_modelo_lstm(time_steps, n_features)\r\n+model.fit(generator, epochs=100)\r\n+\r\n+# Guardar el modelo entrenado\r\n+model.save(\"modelo_nutria_lstm.h5\")\r\n"
                },
                {
                    "date": 1730762534062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,19 @@\n+import pandas as pd\r\n+from data_processing import cargar_datos_usuario, generar_secuencias\r\n+from lstm_model import crear_modelo_lstm\r\n+\r\n+# Cargar y preparar datos\r\n+ruta = \"user_data.csv\"\r\n+user_data = cargar_datos_usuario(ruta)\r\n+time_steps = 2  # Cambiado para adaptarse a los datos\r\n+n_features = 8\r\n+\r\n+# Generar secuencias para tres objetivos (ejemplo para 'peso')\r\n+generator = generar_secuencias(user_data, target_column='peso', time_steps=time_steps)\r\n+\r\n+# Crear y entrenar el modelo\r\n+model = crear_modelo_lstm(time_steps, n_features)\r\n+model.fit(generator, epochs=100)\r\n+\r\n+# Guardar el modelo entrenado\r\n+model.save(\"modelo_nutria_lstm.h5\")\r\n"
                },
                {
                    "date": 1730762567334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n # Cargar y preparar datos\r\n ruta = \"user_data.csv\"\r\n user_data = cargar_datos_usuario(ruta)\r\n time_steps = 2  # Cambiado para adaptarse a los datos\r\n-n_features = 8\r\n+n_features = 6  # Ajustado a la cantidad real de características\r\n \r\n # Generar secuencias para tres objetivos (ejemplo para 'peso')\r\n generator = generar_secuencias(user_data, target_column='peso', time_steps=time_steps)\r\n \r\n@@ -16,111 +16,4 @@\n model.fit(generator, epochs=100)\r\n \r\n # Guardar el modelo entrenado\r\n model.save(\"modelo_nutria_lstm.h5\")\r\n-import pandas as pd\r\n-from data_processing import cargar_datos_usuario, generar_secuencias\r\n-from lstm_model import crear_modelo_lstm\r\n-\r\n-# Cargar y preparar datos\r\n-ruta = \"user_data.csv\"\r\n-user_data = cargar_datos_usuario(ruta)\r\n-time_steps = 2\r\n-n_features = 8\r\n-\r\n-# Generar secuencias para tres objetivos (ejemplo para 'peso')\r\n-generator = generar_secuencias(user_data, target_column='peso', time_steps=time_steps)\r\n-\r\n-# Crear y entrenar el modelo\r\n-model = crear_modelo_lstm(time_steps, n_features)\r\n-model.fit(generator, epochs=100)\r\n-\r\n-# Guardar el modelo entrenado\r\n-model.save(\"modelo_nutria_lstm.h5\")\r\n-import pandas as pd\r\n-from data_processing import cargar_datos_usuario, generar_secuencias\r\n-from lstm_model import crear_modelo_lstm\r\n-\r\n-# Cargar y preparar datos\r\n-ruta = \"user_data.csv\"\r\n-user_data = cargar_datos_usuario(ruta)\r\n-time_steps = 7\r\n-n_features = 8\r\n-\r\n-# Generar secuencias para tres objetivos (ejemplo para 'peso')\r\n-generator = generar_secuencias(user_data, target_column='peso', time_steps=time_steps)\r\n-\r\n-# Crear y entrenar el modelo\r\n-model = crear_modelo_lstm(time_steps, n_features)\r\n-model.fit(generator, epochs=100)\r\n-\r\n-# Guardar el modelo entrenado\r\n-model.save(\"modelo_nutria_lstm.h5\")\r\n-import pandas as pd\r\n-from data_processing import cargar_datos_usuario, generar_secuencias\r\n-from lstm_model import crear_modelo_lstm\r\n-\r\n-# Cargar y preparar datos\r\n-ruta = \"user_data.csv\"\r\n-user_data = cargar_datos_usuario(ruta)\r\n-time_steps = 7\r\n-n_features = 8\r\n-\r\n-# Generar secuencias para tres objetivos (ejemplo para 'peso')\r\n-generator = generar_secuencias(user_data, target_column='peso', time_steps=time_steps)\r\n-\r\n-# Crear y entrenar el modelo\r\n-model = crear_modelo_lstm(time_steps, n_features)\r\n-model.fit(generator, epochs=100)\r\n-\r\n-# Guardar el modelo entrenado\r\n-model.save(\"modelo_nutria_lstm.h5\")\r\n-import pandas as pd\r\n-from sklearn.tree import DecisionTreeClassifier\r\n-from sklearn.model_selection import train_test_split\r\n-import joblib\r\n-\r\n-# Cargar datos\r\n-data = pd.read_csv('C:\\users\\morie\\Documents\\Workspace\\NutrIA\\backend\\data\\dataset.csv')  # Tu conjunto de datos\r\n-\r\n-# Preprocesamiento y selección de características\r\n-X = data.drop('plan_recomendado', axis=1)  # Características de entrada\r\n-y = data['plan_recomendado']               # Salida deseada\r\n-\r\n-# Dividir en conjuntos de entrenamiento y prueba\r\n-X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\r\n-\r\n-# Crear y entrenar el modelo\r\n-model = DecisionTreeClassifier()\r\n-model.fit(X_train, y_train)\r\n-\r\n-# Evaluar el modelo (opcional)\r\n-score = model.score(X_test, y_test)\r\n-print(f'Precisión del modelo: {score}')\r\n-\r\n-# Guardar el modelo entrenado\r\n-joblib.dump(model, 'modelo_entrenado.pkl')\r\n-import pandas as pd\r\n-from sklearn.tree import DecisionTreeClassifier\r\n-from sklearn.model_selection import train_test_split\r\n-import joblib\r\n-\r\n-# Cargar datos\r\n-data = pd.read_csv('data/dataset.csv')  # Tu conjunto de datos\r\n-\r\n-# Preprocesamiento y selección de características\r\n-X = data.drop('plan_recomendado', axis=1)  # Características de entrada\r\n-y = data['plan_recomendado']               # Salida deseada\r\n-\r\n-# Dividir en conjuntos de entrenamiento y prueba\r\n-X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\r\n-\r\n-# Crear y entrenar el modelo\r\n-model = DecisionTreeClassifier()\r\n-model.fit(X_train, y_train)\r\n-\r\n-# Evaluar el modelo (opcional)\r\n-score = model.score(X_test, y_test)\r\n-print(f'Precisión del modelo: {score}')\r\n-\r\n-# Guardar el modelo entrenado\r\n-joblib.dump(model, 'modelo_entrenado.pkl')\r\n"
                }
            ],
            "date": 1730676065998,
            "name": "Commit-0",
            "content": ""
        }
    ]
}