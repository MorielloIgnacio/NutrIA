{
    "sourceFile": "backend/main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1730404422682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730404430467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Datos que recibimos del frontend\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n"
                },
                {
                    "date": 1730405234661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,16 @@\n     allow_methods=[\"*\"],\r\n     allow_headers=[\"*\"],\r\n )\r\n \r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n # Datos que recibimos del frontend\r\n from pydantic import BaseModel, Field\r\n from typing import List, Optional\r\n \r\n@@ -113,101 +121,4 @@\n     \r\n     # Generar recomendaciones\r\n     recommendations = generate_recommendations(user_data)\r\n     return recommendations\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Género del usuario\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Nivel de actividad\")\r\n-    goals: List[str] = Field(..., description=\"Objetivos de acondicionamiento del usuario\")\r\n-    routine_preference: str = Field(..., description=\"Preferencia de rutina del usuario\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Restricciones dietéticas\")\r\n-\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = (calories * protein_ratio) / 4\r\n-    carb_grams = (calories * carb_ratio) / 4\r\n-    fat_grams = (calories * fat_ratio) / 9\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    calorias_ajustadas = tdee\r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n"
                },
                {
                    "date": 1730405942657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n+# Datos que recibimos del frontend\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n"
                }
            ],
            "date": 1730404422682,
            "name": "Commit-0",
            "content": "from fastapi import FastAPI, HTTPException\r\nfrom fastapi.middleware.cors import CORSMiddleware\r\nfrom pydantic import BaseModel, Field\r\nfrom typing import List, Optional\r\n\r\napp = FastAPI()\r\n\r\napp.add_middleware(\r\n    CORSMiddleware,\r\n    allow_origins=[\"*\"],\r\n    allow_credentials=True,\r\n    allow_methods=[\"*\"],\r\n    allow_headers=[\"*\"],\r\n)\r\n\r\nclass UserData(BaseModel):\r\n    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n    age: int = Field(..., description=\"Edad del usuario\")\r\n    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Género del usuario\")\r\n    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Nivel de actividad\")\r\n    goals: List[str] = Field(..., description=\"Objetivos de acondicionamiento del usuario\")\r\n    routine_preference: str = Field(..., description=\"Preferencia de rutina del usuario\")\r\n    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Restricciones dietéticas\")\r\n\r\ndef calcular_tmb(weight, height, age, gender):\r\n    if gender == 'male':\r\n        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n    else:\r\n        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n\r\ndef calcular_tdee(tmb, activity_level):\r\n    activity_factors = {\r\n        'sedentary': 1.2,\r\n        'lightly_active': 1.375,\r\n        'moderately_active': 1.55,\r\n        'very_active': 1.725,\r\n        'super_active': 1.9\r\n    }\r\n    return tmb * activity_factors[activity_level]\r\n\r\ndef generar_plan_macronutrientes(calories, goals):\r\n    if 'Ganar masa muscular' in goals:\r\n        protein_ratio = 0.35\r\n        carb_ratio = 0.45\r\n        fat_ratio = 0.20\r\n    elif 'Perder peso' in goals:\r\n        protein_ratio = 0.40\r\n        carb_ratio = 0.35\r\n        fat_ratio = 0.25\r\n    else:\r\n        protein_ratio = 0.30\r\n        carb_ratio = 0.50\r\n        fat_ratio = 0.20\r\n\r\n    protein_grams = (calories * protein_ratio) / 4\r\n    carb_grams = (calories * carb_ratio) / 4\r\n    fat_grams = (calories * fat_ratio) / 9\r\n\r\n    return {\r\n        'proteins': protein_grams,\r\n        'carbs': carb_grams,\r\n        'fats': fat_grams\r\n    }\r\n\r\ndef generar_rutina_ejercicio(activity_level, routine_preference):\r\n    routines = {\r\n        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n    }\r\n    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n\r\ndef generate_recommendations(data: UserData):\r\n    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n    tdee = calcular_tdee(tmb, data.activity_level)\r\n    calorias_ajustadas = tdee\r\n    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n    return {\r\n        \"exercise_plan\": exercise_plan,\r\n        \"nutrition_plan\": {\r\n            \"calories\": calorias_ajustadas,\r\n            \"protein\": plan_macronutrientes['proteins'],\r\n            \"carbs\": plan_macronutrientes['carbs'],\r\n            \"fats\": plan_macronutrientes['fats']\r\n        }\r\n    }\r\n\r\n@app.post(\"/generate_plan/\")\r\ndef generate_plan(user_data: UserData):\r\n    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n    recommendations = generate_recommendations(user_data)\r\n    return recommendations\r\n"
        }
    ]
}