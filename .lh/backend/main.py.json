{
    "sourceFile": "backend/main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 67,
            "patches": [
                {
                    "date": 1730404422682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730404430467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Datos que recibimos del frontend\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n"
                },
                {
                    "date": 1730405234661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,16 @@\n     allow_methods=[\"*\"],\r\n     allow_headers=[\"*\"],\r\n )\r\n \r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n # Datos que recibimos del frontend\r\n from pydantic import BaseModel, Field\r\n from typing import List, Optional\r\n \r\n@@ -113,101 +121,4 @@\n     \r\n     # Generar recomendaciones\r\n     recommendations = generate_recommendations(user_data)\r\n     return recommendations\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Género del usuario\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Nivel de actividad\")\r\n-    goals: List[str] = Field(..., description=\"Objetivos de acondicionamiento del usuario\")\r\n-    routine_preference: str = Field(..., description=\"Preferencia de rutina del usuario\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Restricciones dietéticas\")\r\n-\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = (calories * protein_ratio) / 4\r\n-    carb_grams = (calories * carb_ratio) / 4\r\n-    fat_grams = (calories * fat_ratio) / 9\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    calorias_ajustadas = tdee\r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n"
                },
                {
                    "date": 1730405942657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n+# Datos que recibimos del frontend\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n"
                },
                {
                    "date": 1730676120204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+#backend/main.py\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n+# Datos que recibimos del frontend\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import joblib\r\n+import pandas as pd\r\n+\r\n+\r\n+model = joblib.load('modelo_entrenado.pkl')\r\n+\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n"
                },
                {
                    "date": 1730676134908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n     return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n \r\n \r\n # Datos que recibimos del frontend\r\n-from pydantic import BaseModel, Field\r\n from typing import List, Optional\r\n import joblib\r\n import pandas as pd\r\n \r\n@@ -133,257 +132,4 @@\n     \r\n     # Generar recomendaciones\r\n     recommendations = generate_recommendations(user_data)\r\n     return recommendations\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-\r\n-\r\n-# Datos que recibimos del frontend\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n-    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n-    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n-\r\n-\r\n-# Funciones para calcular TMB, TDEE y ajustar calorías\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-# Generar el plan de macronutrientes según las calorías ajustadas\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n-    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n-    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-\r\n-    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    \r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-# Reglas para generar recomendaciones\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    \r\n-    calorias_ajustadas = tdee\r\n-    \r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    # Validar el nivel de actividad\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    \r\n-    # Generar recomendaciones\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-\r\n-\r\n-# Datos que recibimos del frontend\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n-    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n-    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n-\r\n-\r\n-# Funciones para calcular TMB, TDEE y ajustar calorías\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-# Generar el plan de macronutrientes según las calorías ajustadas\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n-    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n-    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-\r\n-    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    \r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-# Reglas para generar recomendaciones\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    \r\n-    calorias_ajustadas = tdee\r\n-    \r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    # Validar el nivel de actividad\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    \r\n-    # Generar recomendaciones\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n"
                },
                {
                    "date": 1730676203186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+#backend/main.py\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n+# Datos que recibimos del frontend\r\n+from typing import List, Optional\r\n+import joblib\r\n+import pandas as pd\r\n+\r\n+\r\n+model = joblib.load('modelo_entrenado.pkl')\r\n+\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# def preprocess_input(user_data: UserData):\r\n+#     # Convertir los datos del usuario en un formato adecuado para el modelo\r\n+#     input_data = {\r\n+#         'weight': user_data.weight,\r\n+#         'height': user_data.height,\r\n+#         'age': user_data.age,\r\n+#         'gender': 1 if user_data.gender == 'male' else 0,\r\n+#         # Mapear otros campos categóricos a numéricos\r\n+#         # ...\r\n+#     }\r\n+#     return pd.DataFrame([input_data])\r\n+\r\n+# @app.post(\"/generate_plan/\")\r\n+# def generate_plan(user_data: UserData):\r\n+#     try:\r\n+#         # Preprocesar los datos del usuario\r\n+#         input_df = preprocess_input(user_data)\r\n+#         # Realizar la predicción\r\n+#         prediction = model.predict(input_df)\r\n+#         # Mapear la predicción a un plan específico\r\n+#         plan = map_prediction_to_plan(prediction[0])\r\n+#         return {\"plan\": plan}\r\n+#     except Exception as e:\r\n+#         raise HTTPException(status_code=500, detail=str(e))\r\n+\r\n+# def map_prediction_to_plan(prediction):\r\n+#     # Función para convertir la predicción en un plan detallado\r\n+#     plans = {\r\n+#         0: \"Plan A: Rutina de cardio y dieta baja en calorías.\",\r\n+#         1: \"Plan B: Entrenamiento de fuerza y dieta alta en proteínas.\",\r\n+#         # Agrega más planes según tus necesidades\r\n+#     }\r\n+#     return plans.get(prediction, \"Plan personalizado no disponible.\")\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n"
                },
                {
                    "date": 1730679756267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,169 @@\n+#backend/main.py\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n+# Datos que recibimos del frontend\r\n+from typing import List, Optional\r\n+import joblib\r\n+import pandas as pd\r\n+\r\n+\r\n+# \r\n+model = joblib.load('modelo_entrenado.pkl')\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# def preprocess_input(user_data: UserData):\r\n+#     # Convertir los datos del usuario en un formato adecuado para el modelo\r\n+#     input_data = {\r\n+#         'weight': user_data.weight,\r\n+#         'height': user_data.height,\r\n+#         'age': user_data.age,\r\n+#         'gender': 1 if user_data.gender == 'male' else 0,\r\n+#         # Mapear otros campos categóricos a numéricos\r\n+#         # ...\r\n+#     }\r\n+#     return pd.DataFrame([input_data])\r\n+\r\n+# @app.post(\"/generate_plan/\")\r\n+# def generate_plan(user_data: UserData):\r\n+#     try:\r\n+#         # Preprocesar los datos del usuario\r\n+#         input_df = preprocess_input(user_data)\r\n+#         # Realizar la predicción\r\n+#         prediction = model.predict(input_df)\r\n+#         # Mapear la predicción a un plan específico\r\n+#         plan = map_prediction_to_plan(prediction[0])\r\n+#         return {\"plan\": plan}\r\n+#     except Exception as e:\r\n+#         raise HTTPException(status_code=500, detail=str(e))\r\n+\r\n+# def map_prediction_to_plan(prediction):\r\n+#     # Función para convertir la predicción en un plan detallado\r\n+#     plans = {\r\n+#         0: \"Plan A: Rutina de cardio y dieta baja en calorías.\",\r\n+#         1: \"Plan B: Entrenamiento de fuerza y dieta alta en proteínas.\",\r\n+#         # Agrega más planes según tus necesidades\r\n+#     }\r\n+#     return plans.get(prediction, \"Plan personalizado no disponible.\")\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n"
                },
                {
                    "date": 1730730273684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,139 @@\n+#backend/main.py\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n+# Datos que recibimos del frontend\r\n+from typing import List, Optional\r\n+# main.py\r\n+import pandas as pd\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('datasets/recetas.csv')\r\n+\r\n+\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n"
                },
                {
                    "date": 1730730284371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,141 @@\n+#backend/main.py\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n+# Datos que recibimos del frontend\r\n+from typing import List, Optional\r\n+# main.py\r\n+import pandas as pd\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('datasets/recetas.csv')\r\n+\r\n+print(ejercicios_df.head())\r\n+print(recetas_df.head())\r\n+\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n"
                },
                {
                    "date": 1730730328708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,146 @@\n+#backend/main.py\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n+# Datos que recibimos del frontend\r\n+from typing import List, Optional\r\n+# main.py\r\n+import pandas as pd\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('datasets/recetas.csv')\r\n+\r\n+print(ejercicios_df.head())\r\n+print(recetas_df.head())\r\n+# Verificar si hay valores nulos\r\n+print(ejercicios_df.isnull().sum())\r\n+\r\n+# Si hay valores nulos, podemos decidir cómo manejarlos. Por ejemplo, eliminar filas con datos faltantes:\r\n+ejercicios_df.dropna(inplace=True)\r\n+\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n"
                },
                {
                    "date": 1730730362684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+#backend/main.py\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n+# Datos que recibimos del frontend\r\n+from typing import List, Optional\r\n+# main.py\r\n+import pandas as pd\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('datasets/recetas.csv')\r\n+\r\n+print(ejercicios_df.head())\r\n+print(recetas_df.head())\r\n+# Verificar si hay valores nulos\r\n+print(ejercicios_df.isnull().sum())\r\n+\r\n+# Si hay valores nulos, podemos decidir cómo manejarlos. Por ejemplo, eliminar filas con datos faltantes:\r\n+ejercicios_df.dropna(inplace=True)\r\n+# Convertir columnas numéricas\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+# Verificar si hay valores nulos\r\n+print(recetas_df.isnull().sum())\r\n+\r\n+# Eliminar filas con datos faltantes\r\n+recetas_df.dropna(inplace=True)\r\n+# Convertir columnas numéricas\r\n+numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n+for col in numerical_cols:\r\n+    recetas_df[col] = recetas_df[col].astype(float)\r\n+\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n"
                },
                {
                    "date": 1730730425379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+#backend/main.py\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n+# Datos que recibimos del frontend\r\n+from typing import List, Optional\r\n+# main.py\r\n+import pandas as pd\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('datasets/recetas.csv')\r\n+\r\n+print(ejercicios_df.head())\r\n+print(recetas_df.head())\r\n+# Verificar si hay valores nulos\r\n+print(ejercicios_df.isnull().sum())\r\n+\r\n+# Si hay valores nulos, podemos decidir cómo manejarlos. Por ejemplo, eliminar filas con datos faltantes:\r\n+ejercicios_df.dropna(inplace=True)\r\n+# Convertir columnas numéricas\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+# Verificar si hay valores nulos\r\n+print(recetas_df.isnull().sum())\r\n+\r\n+# Eliminar filas con datos faltantes\r\n+recetas_df.dropna(inplace=True)\r\n+# Convertir columnas numéricas\r\n+numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n+for col in numerical_cols:\r\n+    recetas_df[col] = recetas_df[col].astype(float)\r\n+\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtrar por objetivo de fitness\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n+\r\n+    # Filtrar por intensidad acorde al nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'baja',\r\n+        'light': 'baja',\r\n+        'moderate': 'media',\r\n+        'active': 'media',\r\n+        'very_active': 'alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    ejercicios_recomendados = ejercicios_filtrados.sample(n=5, replace=True).to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1730730434103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+#backend/main.py\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n+# Datos que recibimos del frontend\r\n+from typing import List, Optional\r\n+# main.py\r\n+import pandas as pd\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('datasets/recetas.csv')\r\n+\r\n+print(ejercicios_df.head())\r\n+print(recetas_df.head())\r\n+# Verificar si hay valores nulos\r\n+print(ejercicios_df.isnull().sum())\r\n+\r\n+# Si hay valores nulos, podemos decidir cómo manejarlos. Por ejemplo, eliminar filas con datos faltantes:\r\n+ejercicios_df.dropna(inplace=True)\r\n+# Convertir columnas numéricas\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+# Verificar si hay valores nulos\r\n+print(recetas_df.isnull().sum())\r\n+\r\n+# Eliminar filas con datos faltantes\r\n+recetas_df.dropna(inplace=True)\r\n+# Convertir columnas numéricas\r\n+numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n+for col in numerical_cols:\r\n+    recetas_df[col] = recetas_df[col].astype(float)\r\n+\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtrar por objetivo de fitness\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n+\r\n+    # Filtrar por intensidad acorde al nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'baja',\r\n+        'light': 'baja',\r\n+        'moderate': 'media',\r\n+        'active': 'media',\r\n+        'very_active': 'alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    ejercicios_recomendados = ejercicios_filtrados.sample(n=5, replace=True).to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def calcular_tdee(user_profile: UserProfile):\r\n+    # Calcular TMB (Tasa Metabólica Basal) usando la fórmula de Mifflin-St Jeor\r\n+    if user_profile.gender == 'male':\r\n+        tmb = 10 * user_profile.weight + 6.25 * user_profile.height - 5 * user_profile.age + 5\r\n+    else:\r\n+        tmb = 10 * user_profile.weight + 6.25 * user_profile.height - 5 * user_profile.age - 161\r\n+\r\n+    # Factor de actividad\r\n+    actividad = {\r\n+        'sedentary': 1.2,\r\n+        'light': 1.375,\r\n+        'moderate': 1.55,\r\n+        'active': 1.725,\r\n+        'very_active': 1.9\r\n+    }\r\n+    tdee = tmb * actividad[user_profile.activity_level]\r\n+\r\n+    # Ajustar según objetivo\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        tdee -= 500  # Déficit calórico\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        tdee += 500  # Superávit calórico\r\n+\r\n+    return tdee\r\n+\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1730730451009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,250 @@\n+#backend/main.py\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n+# Datos que recibimos del frontend\r\n+from typing import List, Optional\r\n+# main.py\r\n+import pandas as pd\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('datasets/recetas.csv')\r\n+\r\n+print(ejercicios_df.head())\r\n+print(recetas_df.head())\r\n+# Verificar si hay valores nulos\r\n+print(ejercicios_df.isnull().sum())\r\n+\r\n+# Si hay valores nulos, podemos decidir cómo manejarlos. Por ejemplo, eliminar filas con datos faltantes:\r\n+ejercicios_df.dropna(inplace=True)\r\n+# Convertir columnas numéricas\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+# Verificar si hay valores nulos\r\n+print(recetas_df.isnull().sum())\r\n+\r\n+# Eliminar filas con datos faltantes\r\n+recetas_df.dropna(inplace=True)\r\n+# Convertir columnas numéricas\r\n+numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n+for col in numerical_cols:\r\n+    recetas_df[col] = recetas_df[col].astype(float)\r\n+\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtrar por objetivo de fitness\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n+\r\n+    # Filtrar por intensidad acorde al nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'baja',\r\n+        'light': 'baja',\r\n+        'moderate': 'media',\r\n+        'active': 'media',\r\n+        'very_active': 'alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    ejercicios_recomendados = ejercicios_filtrados.sample(n=5, replace=True).to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def calcular_tdee(user_profile: UserProfile):\r\n+    # Calcular TMB (Tasa Metabólica Basal) usando la fórmula de Mifflin-St Jeor\r\n+    if user_profile.gender == 'male':\r\n+        tmb = 10 * user_profile.weight + 6.25 * user_profile.height - 5 * user_profile.age + 5\r\n+    else:\r\n+        tmb = 10 * user_profile.weight + 6.25 * user_profile.height - 5 * user_profile.age - 161\r\n+\r\n+    # Factor de actividad\r\n+    actividad = {\r\n+        'sedentary': 1.2,\r\n+        'light': 1.375,\r\n+        'moderate': 1.55,\r\n+        'active': 1.725,\r\n+        'very_active': 1.9\r\n+    }\r\n+    tdee = tmb * actividad[user_profile.activity_level]\r\n+\r\n+    # Ajustar según objetivo\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        tdee -= 500  # Déficit calórico\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        tdee += 500  # Superávit calórico\r\n+\r\n+    return tdee\r\n+\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_tdee(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    # Filtrar recetas por tipo de dieta\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    # Filtrar recetas que se ajusten al contenido calórico\r\n+    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    # Seleccionar recetas para cada comida del día\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1730730471014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,261 @@\n+#backend/main.py\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+\r\n+\r\n+# Datos que recibimos del frontend\r\n+from typing import List, Optional\r\n+# main.py\r\n+import pandas as pd\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('datasets/recetas.csv')\r\n+\r\n+print(ejercicios_df.head())\r\n+print(recetas_df.head())\r\n+# Verificar si hay valores nulos\r\n+print(ejercicios_df.isnull().sum())\r\n+\r\n+# Si hay valores nulos, podemos decidir cómo manejarlos. Por ejemplo, eliminar filas con datos faltantes:\r\n+ejercicios_df.dropna(inplace=True)\r\n+# Convertir columnas numéricas\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+# Verificar si hay valores nulos\r\n+print(recetas_df.isnull().sum())\r\n+\r\n+# Eliminar filas con datos faltantes\r\n+recetas_df.dropna(inplace=True)\r\n+# Convertir columnas numéricas\r\n+numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n+for col in numerical_cols:\r\n+    recetas_df[col] = recetas_df[col].astype(float)\r\n+\r\n+\r\n+class UserData(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n+    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n+    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n+    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n+\r\n+\r\n+# Funciones para calcular TMB, TDEE y ajustar calorías\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n+    else:\r\n+        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+# Generar el plan de macronutrientes según las calorías ajustadas\r\n+def generar_plan_macronutrientes(calories, goals):\r\n+    if 'Ganar masa muscular' in goals:\r\n+        protein_ratio = 0.35\r\n+        carb_ratio = 0.45\r\n+        fat_ratio = 0.20\r\n+    elif 'Perder peso' in goals:\r\n+        protein_ratio = 0.40\r\n+        carb_ratio = 0.35\r\n+        fat_ratio = 0.25\r\n+    else:\r\n+        protein_ratio = 0.30\r\n+        carb_ratio = 0.50\r\n+        fat_ratio = 0.20\r\n+\r\n+    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n+    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n+    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n+\r\n+    return {\r\n+        'proteins': protein_grams,\r\n+        'carbs': carb_grams,\r\n+        'fats': fat_grams\r\n+    }\r\n+\r\n+# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n+def generar_rutina_ejercicio(activity_level, routine_preference):\r\n+    routines = {\r\n+        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n+        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n+        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n+        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n+    }\r\n+\r\n+    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n+    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n+    \r\n+    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n+\r\n+# Reglas para generar recomendaciones\r\n+def generate_recommendations(data: UserData):\r\n+    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n+    tdee = calcular_tdee(tmb, data.activity_level)\r\n+    \r\n+    calorias_ajustadas = tdee\r\n+    \r\n+    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n+    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n+\r\n+    return {\r\n+        \"exercise_plan\": exercise_plan,\r\n+        \"nutrition_plan\": {\r\n+            \"calories\": calorias_ajustadas,\r\n+            \"protein\": plan_macronutrientes['proteins'],\r\n+            \"carbs\": plan_macronutrientes['carbs'],\r\n+            \"fats\": plan_macronutrientes['fats']\r\n+        }\r\n+    }\r\n+\r\n+\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtrar por objetivo de fitness\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n+\r\n+    # Filtrar por intensidad acorde al nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'baja',\r\n+        'light': 'baja',\r\n+        'moderate': 'media',\r\n+        'active': 'media',\r\n+        'very_active': 'alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    ejercicios_recomendados = ejercicios_filtrados.sample(n=5, replace=True).to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def calcular_tdee(user_profile: UserProfile):\r\n+    # Calcular TMB (Tasa Metabólica Basal) usando la fórmula de Mifflin-St Jeor\r\n+    if user_profile.gender == 'male':\r\n+        tmb = 10 * user_profile.weight + 6.25 * user_profile.height - 5 * user_profile.age + 5\r\n+    else:\r\n+        tmb = 10 * user_profile.weight + 6.25 * user_profile.height - 5 * user_profile.age - 161\r\n+\r\n+    # Factor de actividad\r\n+    actividad = {\r\n+        'sedentary': 1.2,\r\n+        'light': 1.375,\r\n+        'moderate': 1.55,\r\n+        'active': 1.725,\r\n+        'very_active': 1.9\r\n+    }\r\n+    tdee = tmb * actividad[user_profile.activity_level]\r\n+\r\n+    # Ajustar según objetivo\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        tdee -= 500  # Déficit calórico\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        tdee += 500  # Superávit calórico\r\n+\r\n+    return tdee\r\n+\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_tdee(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    # Filtrar recetas por tipo de dieta\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    # Filtrar recetas que se ajusten al contenido calórico\r\n+    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    # Seleccionar recetas para cada comida del día\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+\r\n+\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    ejercicios = recomendar_ejercicios(user_profile)\r\n+    recetas = recomendar_recetas(user_profile)\r\n+    plan = {\r\n+        'ejercicios': ejercicios,\r\n+        'recetas': recetas\r\n+    }\r\n+    return plan\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_data: UserData):\r\n+    # Validar el nivel de actividad\r\n+    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    \r\n+    # Generar recomendaciones\r\n+    recommendations = generate_recommendations(user_data)\r\n+    return recommendations\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n"
                },
                {
                    "date": 1730730687157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('datasets/recetas.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+# Eliminar filas con datos faltantes\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Convertir columnas numéricas\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n+for col in numerical_cols:\r\n+    recetas_df[col] = recetas_df[col].astype(float)\r\n+\r\n+# Definir el modelo de datos del usuario\r\n+class UserProfile(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n+    activity_level: str = Field(\r\n+        ..., \r\n+        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n+        description=\"Nivel de actividad\"\r\n+    )\r\n+    fitness_goal: str = Field(\r\n+        ..., \r\n+        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n+        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n+    )\r\n+    routine_preference: str = Field(\r\n+        ..., \r\n+        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n+    )\r\n+    dietary_preferences: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Preferencias dietéticas si las hay\"\r\n+    )\r\n+    equipment_available: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Equipamiento disponible para el usuario\"\r\n+    )\r\n+    meals_per_day: int = Field(\r\n+        default=3, \r\n+        description=\"Número de comidas por día\"\r\n+    )\r\n+\r\n+# Funciones para calcular TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    # Ajustar según el objetivo\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500  # Déficit calórico\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500  # Superávit calórico\r\n+    else:\r\n+        calorias_diarias = tdee  # Mantener\r\n+\r\n+    return calorias_diarias\r\n+\r\n+# Funciones de recomendación\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtrar por objetivo de fitness\r\n+    if user_profile.fitness_goal == 'gain_muscle':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n+    elif user_profile.fitness_goal == 'lose_weight':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n+\r\n+    # Filtrar por intensidad acorde al nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'baja',\r\n+        'lightly_active': 'baja',\r\n+        'moderately_active': 'media',\r\n+        'very_active': 'alta',\r\n+        'super_active': 'alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    if len(ejercicios_filtrados) >= 5:\r\n+        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n+    else:\r\n+        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    # Filtrar recetas por tipo de dieta\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    # Filtrar recetas que se ajusten al contenido calórico\r\n+    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    # Seleccionar recetas para cada comida del día\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    # Validar el nivel de actividad\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    # Validar el objetivo de fitness\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    # Generar recomendaciones\r\n+    ejercicios = recomendar_ejercicios(user_profile)\r\n+    recetas = recomendar_recetas(user_profile)\r\n+    plan = {\r\n+        'ejercicios': ejercicios,\r\n+        'recetas': recetas\r\n+    }\r\n+    return plan\r\n+\r\n+# Rutas adicionales (si las necesitas)\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730730801490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('backend\\data\\fitness_exercises_enriched.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('datasets/recetas.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+# Eliminar filas con datos faltantes\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Convertir columnas numéricas\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n+for col in numerical_cols:\r\n+    recetas_df[col] = recetas_df[col].astype(float)\r\n+\r\n+# Definir el modelo de datos del usuario\r\n+class UserProfile(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n+    activity_level: str = Field(\r\n+        ..., \r\n+        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n+        description=\"Nivel de actividad\"\r\n+    )\r\n+    fitness_goal: str = Field(\r\n+        ..., \r\n+        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n+        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n+    )\r\n+    routine_preference: str = Field(\r\n+        ..., \r\n+        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n+    )\r\n+    dietary_preferences: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Preferencias dietéticas si las hay\"\r\n+    )\r\n+    equipment_available: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Equipamiento disponible para el usuario\"\r\n+    )\r\n+    meals_per_day: int = Field(\r\n+        default=3, \r\n+        description=\"Número de comidas por día\"\r\n+    )\r\n+\r\n+# Funciones para calcular TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    # Ajustar según el objetivo\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500  # Déficit calórico\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500  # Superávit calórico\r\n+    else:\r\n+        calorias_diarias = tdee  # Mantener\r\n+\r\n+    return calorias_diarias\r\n+\r\n+# Funciones de recomendación\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtrar por objetivo de fitness\r\n+    if user_profile.fitness_goal == 'gain_muscle':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n+    elif user_profile.fitness_goal == 'lose_weight':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n+\r\n+    # Filtrar por intensidad acorde al nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'baja',\r\n+        'lightly_active': 'baja',\r\n+        'moderately_active': 'media',\r\n+        'very_active': 'alta',\r\n+        'super_active': 'alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    if len(ejercicios_filtrados) >= 5:\r\n+        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n+    else:\r\n+        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    # Filtrar recetas por tipo de dieta\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    # Filtrar recetas que se ajusten al contenido calórico\r\n+    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    # Seleccionar recetas para cada comida del día\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    # Validar el nivel de actividad\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    # Validar el objetivo de fitness\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    # Generar recomendaciones\r\n+    ejercicios = recomendar_ejercicios(user_profile)\r\n+    recetas = recomendar_recetas(user_profile)\r\n+    plan = {\r\n+        'ejercicios': ejercicios,\r\n+        'recetas': recetas\r\n+    }\r\n+    return plan\r\n+\r\n+# Rutas adicionales (si las necesitas)\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730730828796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('backend\\data\\fitness_exercises_enriched.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('backend\\data\\enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+# Eliminar filas con datos faltantes\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Convertir columnas numéricas\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n+for col in numerical_cols:\r\n+    recetas_df[col] = recetas_df[col].astype(float)\r\n+\r\n+# Definir el modelo de datos del usuario\r\n+class UserProfile(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n+    activity_level: str = Field(\r\n+        ..., \r\n+        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n+        description=\"Nivel de actividad\"\r\n+    )\r\n+    fitness_goal: str = Field(\r\n+        ..., \r\n+        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n+        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n+    )\r\n+    routine_preference: str = Field(\r\n+        ..., \r\n+        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n+    )\r\n+    dietary_preferences: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Preferencias dietéticas si las hay\"\r\n+    )\r\n+    equipment_available: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Equipamiento disponible para el usuario\"\r\n+    )\r\n+    meals_per_day: int = Field(\r\n+        default=3, \r\n+        description=\"Número de comidas por día\"\r\n+    )\r\n+\r\n+# Funciones para calcular TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    # Ajustar según el objetivo\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500  # Déficit calórico\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500  # Superávit calórico\r\n+    else:\r\n+        calorias_diarias = tdee  # Mantener\r\n+\r\n+    return calorias_diarias\r\n+\r\n+# Funciones de recomendación\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtrar por objetivo de fitness\r\n+    if user_profile.fitness_goal == 'gain_muscle':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n+    elif user_profile.fitness_goal == 'lose_weight':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n+\r\n+    # Filtrar por intensidad acorde al nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'baja',\r\n+        'lightly_active': 'baja',\r\n+        'moderately_active': 'media',\r\n+        'very_active': 'alta',\r\n+        'super_active': 'alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    if len(ejercicios_filtrados) >= 5:\r\n+        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n+    else:\r\n+        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    # Filtrar recetas por tipo de dieta\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    # Filtrar recetas que se ajusten al contenido calórico\r\n+    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    # Seleccionar recetas para cada comida del día\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    # Validar el nivel de actividad\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    # Validar el objetivo de fitness\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    # Generar recomendaciones\r\n+    ejercicios = recomendar_ejercicios(user_profile)\r\n+    recetas = recomendar_recetas(user_profile)\r\n+    plan = {\r\n+        'ejercicios': ejercicios,\r\n+        'recetas': recetas\r\n+    }\r\n+    return plan\r\n+\r\n+# Rutas adicionales (si las necesitas)\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730730840258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('backend\\data\\fitness_exercises_enriched.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('backend\\data\\enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+# Eliminar filas con datos faltantes\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Convertir columnas numéricas\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n+for col in numerical_cols:\r\n+    recetas_df[col] = recetas_df[col].astype(float)\r\n+\r\n+# Definir el modelo de datos del usuario\r\n+class UserProfile(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n+    activity_level: str = Field(\r\n+        ..., \r\n+        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n+        description=\"Nivel de actividad\"\r\n+    )\r\n+    fitness_goal: str = Field(\r\n+        ..., \r\n+        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n+        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n+    )\r\n+    routine_preference: str = Field(\r\n+        ..., \r\n+        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n+    )\r\n+    dietary_preferences: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Preferencias dietéticas si las hay\"\r\n+    )\r\n+    equipment_available: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Equipamiento disponible para el usuario\"\r\n+    )\r\n+    meals_per_day: int = Field(\r\n+        default=3, \r\n+        description=\"Número de comidas por día\"\r\n+    )\r\n+\r\n+# Funciones para calcular TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    # Ajustar según el objetivo\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500  # Déficit calórico\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500  # Superávit calórico\r\n+    else:\r\n+        calorias_diarias = tdee  # Mantener\r\n+\r\n+    return calorias_diarias\r\n+\r\n+# Funciones de recomendación\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtrar por objetivo de fitness\r\n+    if user_profile.fitness_goal == 'gain_muscle':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n+    elif user_profile.fitness_goal == 'lose_weight':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n+\r\n+    # Filtrar por intensidad acorde al nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'baja',\r\n+        'lightly_active': 'baja',\r\n+        'moderately_active': 'media',\r\n+        'very_active': 'alta',\r\n+        'super_active': 'alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    if len(ejercicios_filtrados) >= 5:\r\n+        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n+    else:\r\n+        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    # Filtrar recetas por tipo de dieta\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    # Filtrar recetas que se ajusten al contenido calórico\r\n+    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    # Seleccionar recetas para cada comida del día\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    # Validar el nivel de actividad\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    # Validar el objetivo de fitness\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    # Generar recomendaciones\r\n+    ejercicios = recomendar_ejercicios(user_profile)\r\n+    recetas = recomendar_recetas(user_profile)\r\n+    plan = {\r\n+        'ejercicios': ejercicios,\r\n+        'recetas': recetas\r\n+    }\r\n+    return plan\r\n+\r\n+# Rutas adicionales (si las necesitas)\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730730899247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,12 @@\n     allow_headers=[\"*\"],\r\n )\r\n \r\n # Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('backend\\data\\fitness_exercises_enriched.csv')\r\n+ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n \r\n # Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('backend\\data\\enriched_recipes_data.csv')\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n \r\n # Preprocesamiento de los datasets\r\n # Eliminar filas con datos faltantes\r\n ejercicios_df.dropna(inplace=True)\r\n@@ -196,2582 +196,4 @@\n     # Simulación de respuesta; ajusta según tu lógica\r\n     user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n     plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n     return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('backend\\data\\fitness_exercises_enriched.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('backend\\data\\enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-# Eliminar filas con datos faltantes\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Convertir columnas numéricas\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n-for col in numerical_cols:\r\n-    recetas_df[col] = recetas_df[col].astype(float)\r\n-\r\n-# Definir el modelo de datos del usuario\r\n-class UserProfile(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n-    activity_level: str = Field(\r\n-        ..., \r\n-        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n-        description=\"Nivel de actividad\"\r\n-    )\r\n-    fitness_goal: str = Field(\r\n-        ..., \r\n-        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n-        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n-    )\r\n-    routine_preference: str = Field(\r\n-        ..., \r\n-        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n-    )\r\n-    dietary_preferences: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Preferencias dietéticas si las hay\"\r\n-    )\r\n-    equipment_available: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Equipamiento disponible para el usuario\"\r\n-    )\r\n-    meals_per_day: int = Field(\r\n-        default=3, \r\n-        description=\"Número de comidas por día\"\r\n-    )\r\n-\r\n-# Funciones para calcular TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    # Ajustar según el objetivo\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500  # Déficit calórico\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500  # Superávit calórico\r\n-    else:\r\n-        calorias_diarias = tdee  # Mantener\r\n-\r\n-    return calorias_diarias\r\n-\r\n-# Funciones de recomendación\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtrar por objetivo de fitness\r\n-    if user_profile.fitness_goal == 'gain_muscle':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n-    elif user_profile.fitness_goal == 'lose_weight':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n-\r\n-    # Filtrar por intensidad acorde al nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'baja',\r\n-        'lightly_active': 'baja',\r\n-        'moderately_active': 'media',\r\n-        'very_active': 'alta',\r\n-        'super_active': 'alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n-\r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    if len(ejercicios_filtrados) >= 5:\r\n-        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n-    else:\r\n-        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    # Filtrar recetas por tipo de dieta\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    # Filtrar recetas que se ajusten al contenido calórico\r\n-    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    # Seleccionar recetas para cada comida del día\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    # Validar el nivel de actividad\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    # Validar el objetivo de fitness\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    # Generar recomendaciones\r\n-    ejercicios = recomendar_ejercicios(user_profile)\r\n-    recetas = recomendar_recetas(user_profile)\r\n-    plan = {\r\n-        'ejercicios': ejercicios,\r\n-        'recetas': recetas\r\n-    }\r\n-    return plan\r\n-\r\n-# Rutas adicionales (si las necesitas)\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('backend\\data\\fitness_exercises_enriched.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('datasets/recetas.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-# Eliminar filas con datos faltantes\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Convertir columnas numéricas\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n-for col in numerical_cols:\r\n-    recetas_df[col] = recetas_df[col].astype(float)\r\n-\r\n-# Definir el modelo de datos del usuario\r\n-class UserProfile(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n-    activity_level: str = Field(\r\n-        ..., \r\n-        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n-        description=\"Nivel de actividad\"\r\n-    )\r\n-    fitness_goal: str = Field(\r\n-        ..., \r\n-        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n-        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n-    )\r\n-    routine_preference: str = Field(\r\n-        ..., \r\n-        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n-    )\r\n-    dietary_preferences: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Preferencias dietéticas si las hay\"\r\n-    )\r\n-    equipment_available: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Equipamiento disponible para el usuario\"\r\n-    )\r\n-    meals_per_day: int = Field(\r\n-        default=3, \r\n-        description=\"Número de comidas por día\"\r\n-    )\r\n-\r\n-# Funciones para calcular TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    # Ajustar según el objetivo\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500  # Déficit calórico\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500  # Superávit calórico\r\n-    else:\r\n-        calorias_diarias = tdee  # Mantener\r\n-\r\n-    return calorias_diarias\r\n-\r\n-# Funciones de recomendación\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtrar por objetivo de fitness\r\n-    if user_profile.fitness_goal == 'gain_muscle':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n-    elif user_profile.fitness_goal == 'lose_weight':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n-\r\n-    # Filtrar por intensidad acorde al nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'baja',\r\n-        'lightly_active': 'baja',\r\n-        'moderately_active': 'media',\r\n-        'very_active': 'alta',\r\n-        'super_active': 'alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n-\r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    if len(ejercicios_filtrados) >= 5:\r\n-        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n-    else:\r\n-        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    # Filtrar recetas por tipo de dieta\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    # Filtrar recetas que se ajusten al contenido calórico\r\n-    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    # Seleccionar recetas para cada comida del día\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    # Validar el nivel de actividad\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    # Validar el objetivo de fitness\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    # Generar recomendaciones\r\n-    ejercicios = recomendar_ejercicios(user_profile)\r\n-    recetas = recomendar_recetas(user_profile)\r\n-    plan = {\r\n-        'ejercicios': ejercicios,\r\n-        'recetas': recetas\r\n-    }\r\n-    return plan\r\n-\r\n-# Rutas adicionales (si las necesitas)\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('datasets/recetas.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-# Eliminar filas con datos faltantes\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Convertir columnas numéricas\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n-for col in numerical_cols:\r\n-    recetas_df[col] = recetas_df[col].astype(float)\r\n-\r\n-# Definir el modelo de datos del usuario\r\n-class UserProfile(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n-    activity_level: str = Field(\r\n-        ..., \r\n-        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n-        description=\"Nivel de actividad\"\r\n-    )\r\n-    fitness_goal: str = Field(\r\n-        ..., \r\n-        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n-        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n-    )\r\n-    routine_preference: str = Field(\r\n-        ..., \r\n-        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n-    )\r\n-    dietary_preferences: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Preferencias dietéticas si las hay\"\r\n-    )\r\n-    equipment_available: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Equipamiento disponible para el usuario\"\r\n-    )\r\n-    meals_per_day: int = Field(\r\n-        default=3, \r\n-        description=\"Número de comidas por día\"\r\n-    )\r\n-\r\n-# Funciones para calcular TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    # Ajustar según el objetivo\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500  # Déficit calórico\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500  # Superávit calórico\r\n-    else:\r\n-        calorias_diarias = tdee  # Mantener\r\n-\r\n-    return calorias_diarias\r\n-\r\n-# Funciones de recomendación\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtrar por objetivo de fitness\r\n-    if user_profile.fitness_goal == 'gain_muscle':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n-    elif user_profile.fitness_goal == 'lose_weight':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n-\r\n-    # Filtrar por intensidad acorde al nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'baja',\r\n-        'lightly_active': 'baja',\r\n-        'moderately_active': 'media',\r\n-        'very_active': 'alta',\r\n-        'super_active': 'alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n-\r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    if len(ejercicios_filtrados) >= 5:\r\n-        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n-    else:\r\n-        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    # Filtrar recetas por tipo de dieta\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    # Filtrar recetas que se ajusten al contenido calórico\r\n-    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    # Seleccionar recetas para cada comida del día\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    # Validar el nivel de actividad\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    # Validar el objetivo de fitness\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    # Generar recomendaciones\r\n-    ejercicios = recomendar_ejercicios(user_profile)\r\n-    recetas = recomendar_recetas(user_profile)\r\n-    plan = {\r\n-        'ejercicios': ejercicios,\r\n-        'recetas': recetas\r\n-    }\r\n-    return plan\r\n-\r\n-# Rutas adicionales (si las necesitas)\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-#backend/main.py\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-\r\n-\r\n-# Datos que recibimos del frontend\r\n-from typing import List, Optional\r\n-# main.py\r\n-import pandas as pd\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('datasets/recetas.csv')\r\n-\r\n-print(ejercicios_df.head())\r\n-print(recetas_df.head())\r\n-# Verificar si hay valores nulos\r\n-print(ejercicios_df.isnull().sum())\r\n-\r\n-# Si hay valores nulos, podemos decidir cómo manejarlos. Por ejemplo, eliminar filas con datos faltantes:\r\n-ejercicios_df.dropna(inplace=True)\r\n-# Convertir columnas numéricas\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-# Verificar si hay valores nulos\r\n-print(recetas_df.isnull().sum())\r\n-\r\n-# Eliminar filas con datos faltantes\r\n-recetas_df.dropna(inplace=True)\r\n-# Convertir columnas numéricas\r\n-numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n-for col in numerical_cols:\r\n-    recetas_df[col] = recetas_df[col].astype(float)\r\n-\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n-    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n-    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n-\r\n-\r\n-# Funciones para calcular TMB, TDEE y ajustar calorías\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-# Generar el plan de macronutrientes según las calorías ajustadas\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n-    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n-    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-\r\n-    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    \r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-# Reglas para generar recomendaciones\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    \r\n-    calorias_ajustadas = tdee\r\n-    \r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtrar por objetivo de fitness\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n-\r\n-    # Filtrar por intensidad acorde al nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'baja',\r\n-        'light': 'baja',\r\n-        'moderate': 'media',\r\n-        'active': 'media',\r\n-        'very_active': 'alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-\r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    ejercicios_recomendados = ejercicios_filtrados.sample(n=5, replace=True).to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def calcular_tdee(user_profile: UserProfile):\r\n-    # Calcular TMB (Tasa Metabólica Basal) usando la fórmula de Mifflin-St Jeor\r\n-    if user_profile.gender == 'male':\r\n-        tmb = 10 * user_profile.weight + 6.25 * user_profile.height - 5 * user_profile.age + 5\r\n-    else:\r\n-        tmb = 10 * user_profile.weight + 6.25 * user_profile.height - 5 * user_profile.age - 161\r\n-\r\n-    # Factor de actividad\r\n-    actividad = {\r\n-        'sedentary': 1.2,\r\n-        'light': 1.375,\r\n-        'moderate': 1.55,\r\n-        'active': 1.725,\r\n-        'very_active': 1.9\r\n-    }\r\n-    tdee = tmb * actividad[user_profile.activity_level]\r\n-\r\n-    # Ajustar según objetivo\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        tdee -= 500  # Déficit calórico\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        tdee += 500  # Superávit calórico\r\n-\r\n-    return tdee\r\n-\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_tdee(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    # Filtrar recetas por tipo de dieta\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    # Filtrar recetas que se ajusten al contenido calórico\r\n-    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    # Seleccionar recetas para cada comida del día\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-\r\n-\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    ejercicios = recomendar_ejercicios(user_profile)\r\n-    recetas = recomendar_recetas(user_profile)\r\n-    plan = {\r\n-        'ejercicios': ejercicios,\r\n-        'recetas': recetas\r\n-    }\r\n-    return plan\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    # Validar el nivel de actividad\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    \r\n-    # Generar recomendaciones\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-#backend/main.py\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-\r\n-\r\n-# Datos que recibimos del frontend\r\n-from typing import List, Optional\r\n-# main.py\r\n-import pandas as pd\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('datasets/recetas.csv')\r\n-\r\n-print(ejercicios_df.head())\r\n-print(recetas_df.head())\r\n-# Verificar si hay valores nulos\r\n-print(ejercicios_df.isnull().sum())\r\n-\r\n-# Si hay valores nulos, podemos decidir cómo manejarlos. Por ejemplo, eliminar filas con datos faltantes:\r\n-ejercicios_df.dropna(inplace=True)\r\n-# Convertir columnas numéricas\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-# Verificar si hay valores nulos\r\n-print(recetas_df.isnull().sum())\r\n-\r\n-# Eliminar filas con datos faltantes\r\n-recetas_df.dropna(inplace=True)\r\n-# Convertir columnas numéricas\r\n-numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n-for col in numerical_cols:\r\n-    recetas_df[col] = recetas_df[col].astype(float)\r\n-\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n-    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n-    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n-\r\n-\r\n-# Funciones para calcular TMB, TDEE y ajustar calorías\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-# Generar el plan de macronutrientes según las calorías ajustadas\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n-    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n-    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-\r\n-    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    \r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-# Reglas para generar recomendaciones\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    \r\n-    calorias_ajustadas = tdee\r\n-    \r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtrar por objetivo de fitness\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n-\r\n-    # Filtrar por intensidad acorde al nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'baja',\r\n-        'light': 'baja',\r\n-        'moderate': 'media',\r\n-        'active': 'media',\r\n-        'very_active': 'alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-\r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    ejercicios_recomendados = ejercicios_filtrados.sample(n=5, replace=True).to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def calcular_tdee(user_profile: UserProfile):\r\n-    # Calcular TMB (Tasa Metabólica Basal) usando la fórmula de Mifflin-St Jeor\r\n-    if user_profile.gender == 'male':\r\n-        tmb = 10 * user_profile.weight + 6.25 * user_profile.height - 5 * user_profile.age + 5\r\n-    else:\r\n-        tmb = 10 * user_profile.weight + 6.25 * user_profile.height - 5 * user_profile.age - 161\r\n-\r\n-    # Factor de actividad\r\n-    actividad = {\r\n-        'sedentary': 1.2,\r\n-        'light': 1.375,\r\n-        'moderate': 1.55,\r\n-        'active': 1.725,\r\n-        'very_active': 1.9\r\n-    }\r\n-    tdee = tmb * actividad[user_profile.activity_level]\r\n-\r\n-    # Ajustar según objetivo\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        tdee -= 500  # Déficit calórico\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        tdee += 500  # Superávit calórico\r\n-\r\n-    return tdee\r\n-\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_tdee(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    # Filtrar recetas por tipo de dieta\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    # Filtrar recetas que se ajusten al contenido calórico\r\n-    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    # Seleccionar recetas para cada comida del día\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    # Validar el nivel de actividad\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    \r\n-    # Generar recomendaciones\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-#backend/main.py\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-\r\n-\r\n-# Datos que recibimos del frontend\r\n-from typing import List, Optional\r\n-# main.py\r\n-import pandas as pd\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('datasets/recetas.csv')\r\n-\r\n-print(ejercicios_df.head())\r\n-print(recetas_df.head())\r\n-# Verificar si hay valores nulos\r\n-print(ejercicios_df.isnull().sum())\r\n-\r\n-# Si hay valores nulos, podemos decidir cómo manejarlos. Por ejemplo, eliminar filas con datos faltantes:\r\n-ejercicios_df.dropna(inplace=True)\r\n-# Convertir columnas numéricas\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-# Verificar si hay valores nulos\r\n-print(recetas_df.isnull().sum())\r\n-\r\n-# Eliminar filas con datos faltantes\r\n-recetas_df.dropna(inplace=True)\r\n-# Convertir columnas numéricas\r\n-numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n-for col in numerical_cols:\r\n-    recetas_df[col] = recetas_df[col].astype(float)\r\n-\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n-    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n-    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n-\r\n-\r\n-# Funciones para calcular TMB, TDEE y ajustar calorías\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-# Generar el plan de macronutrientes según las calorías ajustadas\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n-    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n-    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-\r\n-    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    \r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-# Reglas para generar recomendaciones\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    \r\n-    calorias_ajustadas = tdee\r\n-    \r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtrar por objetivo de fitness\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n-\r\n-    # Filtrar por intensidad acorde al nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'baja',\r\n-        'light': 'baja',\r\n-        'moderate': 'media',\r\n-        'active': 'media',\r\n-        'very_active': 'alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-\r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    ejercicios_recomendados = ejercicios_filtrados.sample(n=5, replace=True).to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def calcular_tdee(user_profile: UserProfile):\r\n-    # Calcular TMB (Tasa Metabólica Basal) usando la fórmula de Mifflin-St Jeor\r\n-    if user_profile.gender == 'male':\r\n-        tmb = 10 * user_profile.weight + 6.25 * user_profile.height - 5 * user_profile.age + 5\r\n-    else:\r\n-        tmb = 10 * user_profile.weight + 6.25 * user_profile.height - 5 * user_profile.age - 161\r\n-\r\n-    # Factor de actividad\r\n-    actividad = {\r\n-        'sedentary': 1.2,\r\n-        'light': 1.375,\r\n-        'moderate': 1.55,\r\n-        'active': 1.725,\r\n-        'very_active': 1.9\r\n-    }\r\n-    tdee = tmb * actividad[user_profile.activity_level]\r\n-\r\n-    # Ajustar según objetivo\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        tdee -= 500  # Déficit calórico\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        tdee += 500  # Superávit calórico\r\n-\r\n-    return tdee\r\n-\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    # Validar el nivel de actividad\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    \r\n-    # Generar recomendaciones\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-#backend/main.py\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-\r\n-\r\n-# Datos que recibimos del frontend\r\n-from typing import List, Optional\r\n-# main.py\r\n-import pandas as pd\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('datasets/recetas.csv')\r\n-\r\n-print(ejercicios_df.head())\r\n-print(recetas_df.head())\r\n-# Verificar si hay valores nulos\r\n-print(ejercicios_df.isnull().sum())\r\n-\r\n-# Si hay valores nulos, podemos decidir cómo manejarlos. Por ejemplo, eliminar filas con datos faltantes:\r\n-ejercicios_df.dropna(inplace=True)\r\n-# Convertir columnas numéricas\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-# Verificar si hay valores nulos\r\n-print(recetas_df.isnull().sum())\r\n-\r\n-# Eliminar filas con datos faltantes\r\n-recetas_df.dropna(inplace=True)\r\n-# Convertir columnas numéricas\r\n-numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n-for col in numerical_cols:\r\n-    recetas_df[col] = recetas_df[col].astype(float)\r\n-\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n-    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n-    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n-\r\n-\r\n-# Funciones para calcular TMB, TDEE y ajustar calorías\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-# Generar el plan de macronutrientes según las calorías ajustadas\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n-    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n-    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-\r\n-    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    \r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-# Reglas para generar recomendaciones\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    \r\n-    calorias_ajustadas = tdee\r\n-    \r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtrar por objetivo de fitness\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n-\r\n-    # Filtrar por intensidad acorde al nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'baja',\r\n-        'light': 'baja',\r\n-        'moderate': 'media',\r\n-        'active': 'media',\r\n-        'very_active': 'alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-\r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    ejercicios_recomendados = ejercicios_filtrados.sample(n=5, replace=True).to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    # Validar el nivel de actividad\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    \r\n-    # Generar recomendaciones\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-#backend/main.py\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-\r\n-\r\n-# Datos que recibimos del frontend\r\n-from typing import List, Optional\r\n-# main.py\r\n-import pandas as pd\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('datasets/recetas.csv')\r\n-\r\n-print(ejercicios_df.head())\r\n-print(recetas_df.head())\r\n-# Verificar si hay valores nulos\r\n-print(ejercicios_df.isnull().sum())\r\n-\r\n-# Si hay valores nulos, podemos decidir cómo manejarlos. Por ejemplo, eliminar filas con datos faltantes:\r\n-ejercicios_df.dropna(inplace=True)\r\n-# Convertir columnas numéricas\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-# Verificar si hay valores nulos\r\n-print(recetas_df.isnull().sum())\r\n-\r\n-# Eliminar filas con datos faltantes\r\n-recetas_df.dropna(inplace=True)\r\n-# Convertir columnas numéricas\r\n-numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n-for col in numerical_cols:\r\n-    recetas_df[col] = recetas_df[col].astype(float)\r\n-\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n-    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n-    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n-\r\n-\r\n-# Funciones para calcular TMB, TDEE y ajustar calorías\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-# Generar el plan de macronutrientes según las calorías ajustadas\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n-    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n-    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-\r\n-    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    \r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-# Reglas para generar recomendaciones\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    \r\n-    calorias_ajustadas = tdee\r\n-    \r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    # Validar el nivel de actividad\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    \r\n-    # Generar recomendaciones\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n-#backend/main.py\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-\r\n-\r\n-# Datos que recibimos del frontend\r\n-from typing import List, Optional\r\n-# main.py\r\n-import pandas as pd\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('datasets/recetas.csv')\r\n-\r\n-print(ejercicios_df.head())\r\n-print(recetas_df.head())\r\n-# Verificar si hay valores nulos\r\n-print(ejercicios_df.isnull().sum())\r\n-\r\n-# Si hay valores nulos, podemos decidir cómo manejarlos. Por ejemplo, eliminar filas con datos faltantes:\r\n-ejercicios_df.dropna(inplace=True)\r\n-\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n-    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n-    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n-\r\n-\r\n-# Funciones para calcular TMB, TDEE y ajustar calorías\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-# Generar el plan de macronutrientes según las calorías ajustadas\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n-    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n-    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-\r\n-    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    \r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-# Reglas para generar recomendaciones\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    \r\n-    calorias_ajustadas = tdee\r\n-    \r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    # Validar el nivel de actividad\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    \r\n-    # Generar recomendaciones\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n-#backend/main.py\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-\r\n-\r\n-# Datos que recibimos del frontend\r\n-from typing import List, Optional\r\n-# main.py\r\n-import pandas as pd\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('datasets/recetas.csv')\r\n-\r\n-print(ejercicios_df.head())\r\n-print(recetas_df.head())\r\n-\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n-    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n-    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n-\r\n-\r\n-# Funciones para calcular TMB, TDEE y ajustar calorías\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-# Generar el plan de macronutrientes según las calorías ajustadas\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n-    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n-    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-\r\n-    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    \r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-# Reglas para generar recomendaciones\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    \r\n-    calorias_ajustadas = tdee\r\n-    \r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    # Validar el nivel de actividad\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    \r\n-    # Generar recomendaciones\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n-#backend/main.py\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-\r\n-\r\n-# Datos que recibimos del frontend\r\n-from typing import List, Optional\r\n-# main.py\r\n-import pandas as pd\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('datasets/recetas.csv')\r\n-\r\n-\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n-    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n-    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n-\r\n-\r\n-# Funciones para calcular TMB, TDEE y ajustar calorías\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-# Generar el plan de macronutrientes según las calorías ajustadas\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n-    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n-    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-\r\n-    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    \r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-# Reglas para generar recomendaciones\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    \r\n-    calorias_ajustadas = tdee\r\n-    \r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    # Validar el nivel de actividad\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    \r\n-    # Generar recomendaciones\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n-#backend/main.py\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-\r\n-\r\n-# Datos que recibimos del frontend\r\n-from typing import List, Optional\r\n-import joblib\r\n-import pandas as pd\r\n-\r\n-\r\n-# \r\n-model = joblib.load('modelo_entrenado.pkl')\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n-    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n-    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n-\r\n-\r\n-# def preprocess_input(user_data: UserData):\r\n-#     # Convertir los datos del usuario en un formato adecuado para el modelo\r\n-#     input_data = {\r\n-#         'weight': user_data.weight,\r\n-#         'height': user_data.height,\r\n-#         'age': user_data.age,\r\n-#         'gender': 1 if user_data.gender == 'male' else 0,\r\n-#         # Mapear otros campos categóricos a numéricos\r\n-#         # ...\r\n-#     }\r\n-#     return pd.DataFrame([input_data])\r\n-\r\n-# @app.post(\"/generate_plan/\")\r\n-# def generate_plan(user_data: UserData):\r\n-#     try:\r\n-#         # Preprocesar los datos del usuario\r\n-#         input_df = preprocess_input(user_data)\r\n-#         # Realizar la predicción\r\n-#         prediction = model.predict(input_df)\r\n-#         # Mapear la predicción a un plan específico\r\n-#         plan = map_prediction_to_plan(prediction[0])\r\n-#         return {\"plan\": plan}\r\n-#     except Exception as e:\r\n-#         raise HTTPException(status_code=500, detail=str(e))\r\n-\r\n-# def map_prediction_to_plan(prediction):\r\n-#     # Función para convertir la predicción en un plan detallado\r\n-#     plans = {\r\n-#         0: \"Plan A: Rutina de cardio y dieta baja en calorías.\",\r\n-#         1: \"Plan B: Entrenamiento de fuerza y dieta alta en proteínas.\",\r\n-#         # Agrega más planes según tus necesidades\r\n-#     }\r\n-#     return plans.get(prediction, \"Plan personalizado no disponible.\")\r\n-\r\n-# Funciones para calcular TMB, TDEE y ajustar calorías\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-# Generar el plan de macronutrientes según las calorías ajustadas\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n-    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n-    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-\r\n-    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    \r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-# Reglas para generar recomendaciones\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    \r\n-    calorias_ajustadas = tdee\r\n-    \r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    # Validar el nivel de actividad\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    \r\n-    # Generar recomendaciones\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n-#backend/main.py\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-\r\n-\r\n-# Datos que recibimos del frontend\r\n-from typing import List, Optional\r\n-import joblib\r\n-import pandas as pd\r\n-\r\n-\r\n-model = joblib.load('modelo_entrenado.pkl')\r\n-\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n-    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n-    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n-\r\n-\r\n-# def preprocess_input(user_data: UserData):\r\n-#     # Convertir los datos del usuario en un formato adecuado para el modelo\r\n-#     input_data = {\r\n-#         'weight': user_data.weight,\r\n-#         'height': user_data.height,\r\n-#         'age': user_data.age,\r\n-#         'gender': 1 if user_data.gender == 'male' else 0,\r\n-#         # Mapear otros campos categóricos a numéricos\r\n-#         # ...\r\n-#     }\r\n-#     return pd.DataFrame([input_data])\r\n-\r\n-# @app.post(\"/generate_plan/\")\r\n-# def generate_plan(user_data: UserData):\r\n-#     try:\r\n-#         # Preprocesar los datos del usuario\r\n-#         input_df = preprocess_input(user_data)\r\n-#         # Realizar la predicción\r\n-#         prediction = model.predict(input_df)\r\n-#         # Mapear la predicción a un plan específico\r\n-#         plan = map_prediction_to_plan(prediction[0])\r\n-#         return {\"plan\": plan}\r\n-#     except Exception as e:\r\n-#         raise HTTPException(status_code=500, detail=str(e))\r\n-\r\n-# def map_prediction_to_plan(prediction):\r\n-#     # Función para convertir la predicción en un plan detallado\r\n-#     plans = {\r\n-#         0: \"Plan A: Rutina de cardio y dieta baja en calorías.\",\r\n-#         1: \"Plan B: Entrenamiento de fuerza y dieta alta en proteínas.\",\r\n-#         # Agrega más planes según tus necesidades\r\n-#     }\r\n-#     return plans.get(prediction, \"Plan personalizado no disponible.\")\r\n-\r\n-# Funciones para calcular TMB, TDEE y ajustar calorías\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-# Generar el plan de macronutrientes según las calorías ajustadas\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n-    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n-    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-\r\n-    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    \r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-# Reglas para generar recomendaciones\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    \r\n-    calorias_ajustadas = tdee\r\n-    \r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    # Validar el nivel de actividad\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    \r\n-    # Generar recomendaciones\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n-#backend/main.py\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-\r\n-\r\n-# Datos que recibimos del frontend\r\n-from typing import List, Optional\r\n-import joblib\r\n-import pandas as pd\r\n-\r\n-\r\n-model = joblib.load('modelo_entrenado.pkl')\r\n-\r\n-\r\n-class UserData(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centimentros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Genero del usuario, 'Masculino' o 'Femenino'\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Activity level\")\r\n-    goals: List[str] = Field(..., description=\"Fitness goals of the user\")\r\n-    routine_preference: str = Field(..., description=\"User's exercise routine preference as a string\")\r\n-    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Dietary restrictions if any\")\r\n-\r\n-\r\n-# Funciones para calcular TMB, TDEE y ajustar calorías\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n-    else:\r\n-        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-# Generar el plan de macronutrientes según las calorías ajustadas\r\n-def generar_plan_macronutrientes(calories, goals):\r\n-    if 'Ganar masa muscular' in goals:\r\n-        protein_ratio = 0.35\r\n-        carb_ratio = 0.45\r\n-        fat_ratio = 0.20\r\n-    elif 'Perder peso' in goals:\r\n-        protein_ratio = 0.40\r\n-        carb_ratio = 0.35\r\n-        fat_ratio = 0.25\r\n-    else:\r\n-        protein_ratio = 0.30\r\n-        carb_ratio = 0.50\r\n-        fat_ratio = 0.20\r\n-\r\n-    protein_grams = max((calories * protein_ratio) / 4, 0)\r\n-    carb_grams = max((calories * carb_ratio) / 4, 0)\r\n-    fat_grams = max((calories * fat_ratio) / 9, 0)\r\n-\r\n-    return {\r\n-        'proteins': protein_grams,\r\n-        'carbs': carb_grams,\r\n-        'fats': fat_grams\r\n-    }\r\n-\r\n-# Generar el plan de ejercicios según las preferencias y nivel de actividad\r\n-def generar_rutina_ejercicio(activity_level, routine_preference):\r\n-    routines = {\r\n-        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n-        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n-        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n-        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n-    }\r\n-\r\n-    # Convertimos la cadena en una lista de rutinas separadas por comas\r\n-    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n-    \r\n-    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n-\r\n-# Reglas para generar recomendaciones\r\n-def generate_recommendations(data: UserData):\r\n-    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n-    tdee = calcular_tdee(tmb, data.activity_level)\r\n-    \r\n-    calorias_ajustadas = tdee\r\n-    \r\n-    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n-    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n-\r\n-    return {\r\n-        \"exercise_plan\": exercise_plan,\r\n-        \"nutrition_plan\": {\r\n-            \"calories\": calorias_ajustadas,\r\n-            \"protein\": plan_macronutrientes['proteins'],\r\n-            \"carbs\": plan_macronutrientes['carbs'],\r\n-            \"fats\": plan_macronutrientes['fats']\r\n-        }\r\n-    }\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_data: UserData):\r\n-    # Validar el nivel de actividad\r\n-    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    \r\n-    # Generar recomendaciones\r\n-    recommendations = generate_recommendations(user_data)\r\n-    return recommendations\r\n"
                },
                {
                    "date": 1730730912594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+# Eliminar filas con datos faltantes\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Convertir columnas numéricas\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n+for col in numerical_cols:\r\n+    recetas_df[col] = recetas_df[col].astype(float)\r\n+\r\n+# Definir el modelo de datos del usuario\r\n+class UserProfile(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n+    activity_level: str = Field(\r\n+        ..., \r\n+        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n+        description=\"Nivel de actividad\"\r\n+    )\r\n+    fitness_goal: str = Field(\r\n+        ..., \r\n+        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n+        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n+    )\r\n+    routine_preference: str = Field(\r\n+        ..., \r\n+        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n+    )\r\n+    dietary_preferences: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Preferencias dietéticas si las hay\"\r\n+    )\r\n+    equipment_available: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Equipamiento disponible para el usuario\"\r\n+    )\r\n+    meals_per_day: int = Field(\r\n+        default=3, \r\n+        description=\"Número de comidas por día\"\r\n+    )\r\n+\r\n+# Funciones para calcular TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    # Ajustar según el objetivo\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500  # Déficit calórico\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500  # Superávit calórico\r\n+    else:\r\n+        calorias_diarias = tdee  # Mantener\r\n+\r\n+    return calorias_diarias\r\n+\r\n+# Funciones de recomendación\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtrar por objetivo de fitness\r\n+    if user_profile.fitness_goal == 'gain_muscle':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n+    elif user_profile.fitness_goal == 'lose_weight':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n+\r\n+    # Filtrar por intensidad acorde al nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'baja',\r\n+        'lightly_active': 'baja',\r\n+        'moderately_active': 'media',\r\n+        'very_active': 'alta',\r\n+        'super_active': 'alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    if len(ejercicios_filtrados) >= 5:\r\n+        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n+    else:\r\n+        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    # Filtrar recetas por tipo de dieta\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    # Filtrar recetas que se ajusten al contenido calórico\r\n+    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    # Seleccionar recetas para cada comida del día\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    # Validar el nivel de actividad\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    # Validar el objetivo de fitness\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    # Generar recomendaciones\r\n+    ejercicios = recomendar_ejercicios(user_profile)\r\n+    recetas = recomendar_recetas(user_profile)\r\n+    plan = {\r\n+        'ejercicios': ejercicios,\r\n+        'recetas': recetas\r\n+    }\r\n+    return plan\r\n+\r\n+# Rutas adicionales (si las necesitas)\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730730921965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('backend//data//fitness_exercises_enriched.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('backend//data//enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+# Eliminar filas con datos faltantes\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Convertir columnas numéricas\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n+for col in numerical_cols:\r\n+    recetas_df[col] = recetas_df[col].astype(float)\r\n+\r\n+# Definir el modelo de datos del usuario\r\n+class UserProfile(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n+    activity_level: str = Field(\r\n+        ..., \r\n+        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n+        description=\"Nivel de actividad\"\r\n+    )\r\n+    fitness_goal: str = Field(\r\n+        ..., \r\n+        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n+        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n+    )\r\n+    routine_preference: str = Field(\r\n+        ..., \r\n+        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n+    )\r\n+    dietary_preferences: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Preferencias dietéticas si las hay\"\r\n+    )\r\n+    equipment_available: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Equipamiento disponible para el usuario\"\r\n+    )\r\n+    meals_per_day: int = Field(\r\n+        default=3, \r\n+        description=\"Número de comidas por día\"\r\n+    )\r\n+\r\n+# Funciones para calcular TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    # Ajustar según el objetivo\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500  # Déficit calórico\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500  # Superávit calórico\r\n+    else:\r\n+        calorias_diarias = tdee  # Mantener\r\n+\r\n+    return calorias_diarias\r\n+\r\n+# Funciones de recomendación\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtrar por objetivo de fitness\r\n+    if user_profile.fitness_goal == 'gain_muscle':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n+    elif user_profile.fitness_goal == 'lose_weight':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n+\r\n+    # Filtrar por intensidad acorde al nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'baja',\r\n+        'lightly_active': 'baja',\r\n+        'moderately_active': 'media',\r\n+        'very_active': 'alta',\r\n+        'super_active': 'alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    if len(ejercicios_filtrados) >= 5:\r\n+        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n+    else:\r\n+        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    # Filtrar recetas por tipo de dieta\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    # Filtrar recetas que se ajusten al contenido calórico\r\n+    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    # Seleccionar recetas para cada comida del día\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    # Validar el nivel de actividad\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    # Validar el objetivo de fitness\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    # Generar recomendaciones\r\n+    ejercicios = recomendar_ejercicios(user_profile)\r\n+    recetas = recomendar_recetas(user_profile)\r\n+    plan = {\r\n+        'ejercicios': ejercicios,\r\n+        'recetas': recetas\r\n+    }\r\n+    return plan\r\n+\r\n+# Rutas adicionales (si las necesitas)\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730731158533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,12 @@\n     allow_headers=[\"*\"],\r\n )\r\n \r\n # Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('backend//data//fitness_exercises_enriched.csv')\r\n+ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n \r\n # Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('backend//data//enriched_recipes_data.csv')\r\n+recetas_df = pd.read_csv('datasets/recetas.csv')\r\n \r\n # Preprocesamiento de los datasets\r\n # Eliminar filas con datos faltantes\r\n ejercicios_df.dropna(inplace=True)\r\n@@ -196,402 +196,4 @@\n     # Simulación de respuesta; ajusta según tu lógica\r\n     user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n     plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n     return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-# Eliminar filas con datos faltantes\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Convertir columnas numéricas\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n-for col in numerical_cols:\r\n-    recetas_df[col] = recetas_df[col].astype(float)\r\n-\r\n-# Definir el modelo de datos del usuario\r\n-class UserProfile(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n-    activity_level: str = Field(\r\n-        ..., \r\n-        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n-        description=\"Nivel de actividad\"\r\n-    )\r\n-    fitness_goal: str = Field(\r\n-        ..., \r\n-        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n-        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n-    )\r\n-    routine_preference: str = Field(\r\n-        ..., \r\n-        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n-    )\r\n-    dietary_preferences: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Preferencias dietéticas si las hay\"\r\n-    )\r\n-    equipment_available: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Equipamiento disponible para el usuario\"\r\n-    )\r\n-    meals_per_day: int = Field(\r\n-        default=3, \r\n-        description=\"Número de comidas por día\"\r\n-    )\r\n-\r\n-# Funciones para calcular TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    # Ajustar según el objetivo\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500  # Déficit calórico\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500  # Superávit calórico\r\n-    else:\r\n-        calorias_diarias = tdee  # Mantener\r\n-\r\n-    return calorias_diarias\r\n-\r\n-# Funciones de recomendación\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtrar por objetivo de fitness\r\n-    if user_profile.fitness_goal == 'gain_muscle':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n-    elif user_profile.fitness_goal == 'lose_weight':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n-\r\n-    # Filtrar por intensidad acorde al nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'baja',\r\n-        'lightly_active': 'baja',\r\n-        'moderately_active': 'media',\r\n-        'very_active': 'alta',\r\n-        'super_active': 'alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n-\r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    if len(ejercicios_filtrados) >= 5:\r\n-        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n-    else:\r\n-        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    # Filtrar recetas por tipo de dieta\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    # Filtrar recetas que se ajusten al contenido calórico\r\n-    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    # Seleccionar recetas para cada comida del día\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    # Validar el nivel de actividad\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    # Validar el objetivo de fitness\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    # Generar recomendaciones\r\n-    ejercicios = recomendar_ejercicios(user_profile)\r\n-    recetas = recomendar_recetas(user_profile)\r\n-    plan = {\r\n-        'ejercicios': ejercicios,\r\n-        'recetas': recetas\r\n-    }\r\n-    return plan\r\n-\r\n-# Rutas adicionales (si las necesitas)\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-# Eliminar filas con datos faltantes\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Convertir columnas numéricas\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n-for col in numerical_cols:\r\n-    recetas_df[col] = recetas_df[col].astype(float)\r\n-\r\n-# Definir el modelo de datos del usuario\r\n-class UserProfile(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n-    activity_level: str = Field(\r\n-        ..., \r\n-        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n-        description=\"Nivel de actividad\"\r\n-    )\r\n-    fitness_goal: str = Field(\r\n-        ..., \r\n-        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n-        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n-    )\r\n-    routine_preference: str = Field(\r\n-        ..., \r\n-        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n-    )\r\n-    dietary_preferences: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Preferencias dietéticas si las hay\"\r\n-    )\r\n-    equipment_available: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Equipamiento disponible para el usuario\"\r\n-    )\r\n-    meals_per_day: int = Field(\r\n-        default=3, \r\n-        description=\"Número de comidas por día\"\r\n-    )\r\n-\r\n-# Funciones para calcular TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    # Ajustar según el objetivo\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500  # Déficit calórico\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500  # Superávit calórico\r\n-    else:\r\n-        calorias_diarias = tdee  # Mantener\r\n-\r\n-    return calorias_diarias\r\n-\r\n-# Funciones de recomendación\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtrar por objetivo de fitness\r\n-    if user_profile.fitness_goal == 'gain_muscle':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n-    elif user_profile.fitness_goal == 'lose_weight':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n-\r\n-    # Filtrar por intensidad acorde al nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'baja',\r\n-        'lightly_active': 'baja',\r\n-        'moderately_active': 'media',\r\n-        'very_active': 'alta',\r\n-        'super_active': 'alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n-\r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    if len(ejercicios_filtrados) >= 5:\r\n-        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n-    else:\r\n-        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    # Filtrar recetas por tipo de dieta\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    # Filtrar recetas que se ajusten al contenido calórico\r\n-    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    # Seleccionar recetas para cada comida del día\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    # Validar el nivel de actividad\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    # Validar el objetivo de fitness\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    # Generar recomendaciones\r\n-    ejercicios = recomendar_ejercicios(user_profile)\r\n-    recetas = recomendar_recetas(user_profile)\r\n-    plan = {\r\n-        'ejercicios': ejercicios,\r\n-        'recetas': recetas\r\n-    }\r\n-    return plan\r\n-\r\n-# Rutas adicionales (si las necesitas)\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730731299828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('backend\\data\\fitness_exercises_enriched.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+# Eliminar filas con datos faltantes\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Convertir columnas numéricas\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n+for col in numerical_cols:\r\n+    recetas_df[col] = recetas_df[col].astype(float)\r\n+\r\n+# Definir el modelo de datos del usuario\r\n+class UserProfile(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n+    activity_level: str = Field(\r\n+        ..., \r\n+        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n+        description=\"Nivel de actividad\"\r\n+    )\r\n+    fitness_goal: str = Field(\r\n+        ..., \r\n+        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n+        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n+    )\r\n+    routine_preference: str = Field(\r\n+        ..., \r\n+        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n+    )\r\n+    dietary_preferences: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Preferencias dietéticas si las hay\"\r\n+    )\r\n+    equipment_available: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Equipamiento disponible para el usuario\"\r\n+    )\r\n+    meals_per_day: int = Field(\r\n+        default=3, \r\n+        description=\"Número de comidas por día\"\r\n+    )\r\n+\r\n+# Funciones para calcular TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    # Ajustar según el objetivo\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500  # Déficit calórico\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500  # Superávit calórico\r\n+    else:\r\n+        calorias_diarias = tdee  # Mantener\r\n+\r\n+    return calorias_diarias\r\n+\r\n+# Funciones de recomendación\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtrar por objetivo de fitness\r\n+    if user_profile.fitness_goal == 'gain_muscle':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n+    elif user_profile.fitness_goal == 'lose_weight':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n+\r\n+    # Filtrar por intensidad acorde al nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'baja',\r\n+        'lightly_active': 'baja',\r\n+        'moderately_active': 'media',\r\n+        'very_active': 'alta',\r\n+        'super_active': 'alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    if len(ejercicios_filtrados) >= 5:\r\n+        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n+    else:\r\n+        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    # Filtrar recetas por tipo de dieta\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    # Filtrar recetas que se ajusten al contenido calórico\r\n+    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    # Seleccionar recetas para cada comida del día\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    # Validar el nivel de actividad\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    # Validar el objetivo de fitness\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    # Generar recomendaciones\r\n+    ejercicios = recomendar_ejercicios(user_profile)\r\n+    recetas = recomendar_recetas(user_profile)\r\n+    plan = {\r\n+        'ejercicios': ejercicios,\r\n+        'recetas': recetas\r\n+    }\r\n+    return plan\r\n+\r\n+# Rutas adicionales (si las necesitas)\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730731305800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('backend\\data\\fitness_exercises_enriched.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+# Eliminar filas con datos faltantes\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Convertir columnas numéricas\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n+for col in numerical_cols:\r\n+    recetas_df[col] = recetas_df[col].astype(float)\r\n+\r\n+# Definir el modelo de datos del usuario\r\n+class UserProfile(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n+    activity_level: str = Field(\r\n+        ..., \r\n+        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n+        description=\"Nivel de actividad\"\r\n+    )\r\n+    fitness_goal: str = Field(\r\n+        ..., \r\n+        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n+        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n+    )\r\n+    routine_preference: str = Field(\r\n+        ..., \r\n+        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n+    )\r\n+    dietary_preferences: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Preferencias dietéticas si las hay\"\r\n+    )\r\n+    equipment_available: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Equipamiento disponible para el usuario\"\r\n+    )\r\n+    meals_per_day: int = Field(\r\n+        default=3, \r\n+        description=\"Número de comidas por día\"\r\n+    )\r\n+\r\n+# Funciones para calcular TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    # Ajustar según el objetivo\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500  # Déficit calórico\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500  # Superávit calórico\r\n+    else:\r\n+        calorias_diarias = tdee  # Mantener\r\n+\r\n+    return calorias_diarias\r\n+\r\n+# Funciones de recomendación\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtrar por objetivo de fitness\r\n+    if user_profile.fitness_goal == 'gain_muscle':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n+    elif user_profile.fitness_goal == 'lose_weight':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n+\r\n+    # Filtrar por intensidad acorde al nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'baja',\r\n+        'lightly_active': 'baja',\r\n+        'moderately_active': 'media',\r\n+        'very_active': 'alta',\r\n+        'super_active': 'alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    if len(ejercicios_filtrados) >= 5:\r\n+        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n+    else:\r\n+        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    # Filtrar recetas por tipo de dieta\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    # Filtrar recetas que se ajusten al contenido calórico\r\n+    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    # Seleccionar recetas para cada comida del día\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    # Validar el nivel de actividad\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    # Validar el objetivo de fitness\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    # Generar recomendaciones\r\n+    ejercicios = recomendar_ejercicios(user_profile)\r\n+    recetas = recomendar_recetas(user_profile)\r\n+    plan = {\r\n+        'ejercicios': ejercicios,\r\n+        'recetas': recetas\r\n+    }\r\n+    return plan\r\n+\r\n+# Rutas adicionales (si las necesitas)\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730731311884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,199 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+# Eliminar filas con datos faltantes\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Convertir columnas numéricas\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n+for col in numerical_cols:\r\n+    recetas_df[col] = recetas_df[col].astype(float)\r\n+\r\n+# Definir el modelo de datos del usuario\r\n+class UserProfile(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n+    activity_level: str = Field(\r\n+        ..., \r\n+        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n+        description=\"Nivel de actividad\"\r\n+    )\r\n+    fitness_goal: str = Field(\r\n+        ..., \r\n+        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n+        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n+    )\r\n+    routine_preference: str = Field(\r\n+        ..., \r\n+        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n+    )\r\n+    dietary_preferences: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Preferencias dietéticas si las hay\"\r\n+    )\r\n+    equipment_available: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Equipamiento disponible para el usuario\"\r\n+    )\r\n+    meals_per_day: int = Field(\r\n+        default=3, \r\n+        description=\"Número de comidas por día\"\r\n+    )\r\n+\r\n+# Funciones para calcular TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    # Ajustar según el objetivo\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500  # Déficit calórico\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500  # Superávit calórico\r\n+    else:\r\n+        calorias_diarias = tdee  # Mantener\r\n+\r\n+    return calorias_diarias\r\n+\r\n+# Funciones de recomendación\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtrar por objetivo de fitness\r\n+    if user_profile.fitness_goal == 'gain_muscle':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n+    elif user_profile.fitness_goal == 'lose_weight':\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n+\r\n+    # Filtrar por intensidad acorde al nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'baja',\r\n+        'lightly_active': 'baja',\r\n+        'moderately_active': 'media',\r\n+        'very_active': 'alta',\r\n+        'super_active': 'alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    if len(ejercicios_filtrados) >= 5:\r\n+        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n+    else:\r\n+        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    # Filtrar recetas por tipo de dieta\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    # Filtrar recetas que se ajusten al contenido calórico\r\n+    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    # Seleccionar recetas para cada comida del día\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    # Validar el nivel de actividad\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    # Validar el objetivo de fitness\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    # Generar recomendaciones\r\n+    ejercicios = recomendar_ejercicios(user_profile)\r\n+    recetas = recomendar_recetas(user_profile)\r\n+    plan = {\r\n+        'ejercicios': ejercicios,\r\n+        'recetas': recetas\r\n+    }\r\n+    return plan\r\n+\r\n+# Rutas adicionales (si las necesitas)\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730731443832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,212 +26,17 @@\n # Eliminar filas con datos faltantes\r\n ejercicios_df.dropna(inplace=True)\r\n recetas_df.dropna(inplace=True)\r\n \r\n-# Convertir columnas numéricas\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n-for col in numerical_cols:\r\n-    recetas_df[col] = recetas_df[col].astype(float)\r\n-\r\n-# Definir el modelo de datos del usuario\r\n-class UserProfile(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n-    activity_level: str = Field(\r\n-        ..., \r\n-        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n-        description=\"Nivel de actividad\"\r\n-    )\r\n-    fitness_goal: str = Field(\r\n-        ..., \r\n-        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n-        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n-    )\r\n-    routine_preference: str = Field(\r\n-        ..., \r\n-        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n-    )\r\n-    dietary_preferences: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Preferencias dietéticas si las hay\"\r\n-    )\r\n-    equipment_available: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Equipamiento disponible para el usuario\"\r\n-    )\r\n-    meals_per_day: int = Field(\r\n-        default=3, \r\n-        description=\"Número de comidas por día\"\r\n-    )\r\n-\r\n-# Funciones para calcular TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    # Ajustar según el objetivo\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500  # Déficit calórico\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500  # Superávit calórico\r\n-    else:\r\n-        calorias_diarias = tdee  # Mantener\r\n-\r\n-    return calorias_diarias\r\n-\r\n-# Funciones de recomendación\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtrar por objetivo de fitness\r\n-    if user_profile.fitness_goal == 'gain_muscle':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n-    elif user_profile.fitness_goal == 'lose_weight':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n-\r\n-    # Filtrar por intensidad acorde al nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'baja',\r\n-        'lightly_active': 'baja',\r\n-        'moderately_active': 'media',\r\n-        'very_active': 'alta',\r\n-        'super_active': 'alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n-\r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    if len(ejercicios_filtrados) >= 5:\r\n-        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n-    else:\r\n-        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    # Filtrar recetas por tipo de dieta\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    # Filtrar recetas que se ajusten al contenido calórico\r\n-    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    # Seleccionar recetas para cada comida del día\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    # Validar el nivel de actividad\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    # Validar el objetivo de fitness\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    # Generar recomendaciones\r\n-    ejercicios = recomendar_ejercicios(user_profile)\r\n-    recetas = recomendar_recetas(user_profile)\r\n-    plan = {\r\n-        'ejercicios': ejercicios,\r\n-        'recetas': recetas\r\n-    }\r\n-    return plan\r\n-\r\n-# Rutas adicionales (si las necesitas)\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n+# Calcular la columna 'Calories' en función de los macronutrientes\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n )\r\n \r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('backend\\data\\fitness_exercises_enriched.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-# Eliminar filas con datos faltantes\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Convertir columnas numéricas\r\n+# Convertir columnas numéricas del DataFrame de ejercicios\r\n ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n-for col in numerical_cols:\r\n-    recetas_df[col] = recetas_df[col].astype(float)\r\n \r\n # Definir el modelo de datos del usuario\r\n class UserProfile(BaseModel):\r\n     weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n@@ -395,402 +200,4 @@\n     # Simulación de respuesta; ajusta según tu lógica\r\n     user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n     plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n     return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('backend\\data\\fitness_exercises_enriched.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-# Eliminar filas con datos faltantes\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Convertir columnas numéricas\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n-for col in numerical_cols:\r\n-    recetas_df[col] = recetas_df[col].astype(float)\r\n-\r\n-# Definir el modelo de datos del usuario\r\n-class UserProfile(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n-    activity_level: str = Field(\r\n-        ..., \r\n-        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n-        description=\"Nivel de actividad\"\r\n-    )\r\n-    fitness_goal: str = Field(\r\n-        ..., \r\n-        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n-        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n-    )\r\n-    routine_preference: str = Field(\r\n-        ..., \r\n-        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n-    )\r\n-    dietary_preferences: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Preferencias dietéticas si las hay\"\r\n-    )\r\n-    equipment_available: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Equipamiento disponible para el usuario\"\r\n-    )\r\n-    meals_per_day: int = Field(\r\n-        default=3, \r\n-        description=\"Número de comidas por día\"\r\n-    )\r\n-\r\n-# Funciones para calcular TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    # Ajustar según el objetivo\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500  # Déficit calórico\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500  # Superávit calórico\r\n-    else:\r\n-        calorias_diarias = tdee  # Mantener\r\n-\r\n-    return calorias_diarias\r\n-\r\n-# Funciones de recomendación\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtrar por objetivo de fitness\r\n-    if user_profile.fitness_goal == 'gain_muscle':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n-    elif user_profile.fitness_goal == 'lose_weight':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n-\r\n-    # Filtrar por intensidad acorde al nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'baja',\r\n-        'lightly_active': 'baja',\r\n-        'moderately_active': 'media',\r\n-        'very_active': 'alta',\r\n-        'super_active': 'alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n-\r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    if len(ejercicios_filtrados) >= 5:\r\n-        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n-    else:\r\n-        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    # Filtrar recetas por tipo de dieta\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    # Filtrar recetas que se ajusten al contenido calórico\r\n-    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    # Seleccionar recetas para cada comida del día\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    # Validar el nivel de actividad\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    # Validar el objetivo de fitness\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    # Generar recomendaciones\r\n-    ejercicios = recomendar_ejercicios(user_profile)\r\n-    recetas = recomendar_recetas(user_profile)\r\n-    plan = {\r\n-        'ejercicios': ejercicios,\r\n-        'recetas': recetas\r\n-    }\r\n-    return plan\r\n-\r\n-# Rutas adicionales (si las necesitas)\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('datasets/ejercicios.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('datasets/recetas.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-# Eliminar filas con datos faltantes\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Convertir columnas numéricas\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-numerical_cols = ['Protein(g)', 'Carbs(g)', 'Fat(g)', 'Calories']\r\n-for col in numerical_cols:\r\n-    recetas_df[col] = recetas_df[col].astype(float)\r\n-\r\n-# Definir el modelo de datos del usuario\r\n-class UserProfile(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n-    activity_level: str = Field(\r\n-        ..., \r\n-        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n-        description=\"Nivel de actividad\"\r\n-    )\r\n-    fitness_goal: str = Field(\r\n-        ..., \r\n-        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n-        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n-    )\r\n-    routine_preference: str = Field(\r\n-        ..., \r\n-        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n-    )\r\n-    dietary_preferences: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Preferencias dietéticas si las hay\"\r\n-    )\r\n-    equipment_available: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Equipamiento disponible para el usuario\"\r\n-    )\r\n-    meals_per_day: int = Field(\r\n-        default=3, \r\n-        description=\"Número de comidas por día\"\r\n-    )\r\n-\r\n-# Funciones para calcular TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    # Ajustar según el objetivo\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500  # Déficit calórico\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500  # Superávit calórico\r\n-    else:\r\n-        calorias_diarias = tdee  # Mantener\r\n-\r\n-    return calorias_diarias\r\n-\r\n-# Funciones de recomendación\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtrar por objetivo de fitness\r\n-    if user_profile.fitness_goal == 'gain_muscle':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n-    elif user_profile.fitness_goal == 'lose_weight':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n-\r\n-    # Filtrar por intensidad acorde al nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'baja',\r\n-        'lightly_active': 'baja',\r\n-        'moderately_active': 'media',\r\n-        'very_active': 'alta',\r\n-        'super_active': 'alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n-\r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    if len(ejercicios_filtrados) >= 5:\r\n-        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n-    else:\r\n-        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    # Filtrar recetas por tipo de dieta\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    # Filtrar recetas que se ajusten al contenido calórico\r\n-    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    # Seleccionar recetas para cada comida del día\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    # Validar el nivel de actividad\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    # Validar el objetivo de fitness\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    # Generar recomendaciones\r\n-    ejercicios = recomendar_ejercicios(user_profile)\r\n-    recetas = recomendar_recetas(user_profile)\r\n-    plan = {\r\n-        'ejercicios': ejercicios,\r\n-        'recetas': recetas\r\n-    }\r\n-    return plan\r\n-\r\n-# Rutas adicionales (si las necesitas)\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730731576883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,17 +41,17 @@\n class UserProfile(BaseModel):\r\n     weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n     height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n     age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n     activity_level: str = Field(\r\n         ..., \r\n-        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n+        pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n         description=\"Nivel de actividad\"\r\n     )\r\n     fitness_goal: str = Field(\r\n         ..., \r\n-        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n+        pattern=\"^(lose_weight|gain_muscle|maintain)$\", \r\n         description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n     )\r\n     routine_preference: str = Field(\r\n         ..., \r\n"
                },
                {
                    "date": 1730732077500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+# Eliminar filas con datos faltantes\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular la columna 'Calories' en función de los macronutrientes\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+\r\n+# Convertir columnas numéricas del DataFrame de ejercicios\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+# Definir el modelo de datos del usuario\r\n+class UserProfile(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n+    activity_level: str = Field(\r\n+        ..., \r\n+        pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n+        description=\"Nivel de actividad\"\r\n+    )\r\n+    fitness_goal: str = Field(\r\n+        ..., \r\n+        pattern=\"^(lose_weight|gain_muscle|maintain)$\", \r\n+        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n+    )\r\n+    routine_preference: str = Field(\r\n+        ..., \r\n+        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n+    )\r\n+    dietary_preferences: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Preferencias dietéticas si las hay\"\r\n+    )\r\n+    equipment_available: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Equipamiento disponible para el usuario\"\r\n+    )\r\n+    meals_per_day: int = Field(\r\n+        default=3, \r\n+        description=\"Número de comidas por día\"\r\n+    )\r\n+\r\n+# Funciones para calcular TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    # Ajustar según el objetivo\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500  # Déficit calórico\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500  # Superávit calórico\r\n+    else:\r\n+        calorias_diarias = tdee  # Mantener\r\n+\r\n+    return calorias_diarias\r\n+\r\n+# Funciones de recomendación\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtro de intensidad basado en el nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'Baja',\r\n+        'lightly_active': 'Baja',\r\n+        'moderately_active': 'Media',\r\n+        'very_active': 'Alta',\r\n+        'super_active': 'Alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    if len(ejercicios_filtrados) >= 5:\r\n+        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n+    else:\r\n+        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    # Filtrar recetas por tipo de dieta\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    # Filtrar recetas que se ajusten al contenido calórico\r\n+    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    # Seleccionar recetas para cada comida del día\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    # Validar el nivel de actividad\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    # Validar el objetivo de fitness\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    # Generar recomendaciones\r\n+    ejercicios = recomendar_ejercicios(user_profile)\r\n+    recetas = recomendar_recetas(user_profile)\r\n+    plan = {\r\n+        'ejercicios': ejercicios,\r\n+        'recetas': recetas\r\n+    }\r\n+    return plan\r\n+\r\n+# Rutas adicionales (si las necesitas)\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730736061773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n app = FastAPI()\r\n \r\n app.add_middleware(\r\n     CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n+    allow_origins=[\"*\"],  # Ajusta esto según tus necesidades de seguridad\r\n     allow_credentials=True,\r\n     allow_methods=[\"*\"],\r\n     allow_headers=[\"*\"],\r\n )\r\n@@ -41,17 +41,17 @@\n class UserProfile(BaseModel):\r\n     weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n     height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n     age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n+    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n     activity_level: str = Field(\r\n         ..., \r\n-        pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n+        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n         description=\"Nivel de actividad\"\r\n     )\r\n     fitness_goal: str = Field(\r\n         ..., \r\n-        pattern=\"^(lose_weight|gain_muscle|maintain)$\", \r\n+        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n         description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n     )\r\n     routine_preference: str = Field(\r\n         ..., \r\n@@ -120,13 +120,10 @@\n     else:\r\n         # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n         ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n \r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    if len(ejercicios_filtrados) >= 5:\r\n-        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n-    else:\r\n-        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n+    # Seleccionar ejercicios para el día\r\n+    ejercicios_recomendados = ejercicios_filtrados.sample(n=5, replace=True).to_dict('records')\r\n \r\n     return ejercicios_recomendados\r\n \r\n def recomendar_recetas(user_profile: UserProfile):\r\n@@ -171,218 +168,19 @@\n     # Validar el objetivo de fitness\r\n     if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n         raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n \r\n-    # Generar recomendaciones\r\n-    ejercicios = recomendar_ejercicios(user_profile)\r\n-    recetas = recomendar_recetas(user_profile)\r\n-    plan = {\r\n-        'ejercicios': ejercicios,\r\n-        'recetas': recetas\r\n-    }\r\n-    return plan\r\n+    # Generar el plan de 30 días\r\n+    plan = {'dias': []}\r\n+    for dia in range(1, 31):\r\n+        ejercicios = recomendar_ejercicios(user_profile)\r\n+        recetas = recomendar_recetas(user_profile)\r\n+        plan['dias'].append({\r\n+            'dia': dia,\r\n+            'ejercicios': ejercicios,\r\n+            'recetas': recetas\r\n+        })\r\n \r\n-# Rutas adicionales (si las necesitas)\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-# Eliminar filas con datos faltantes\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular la columna 'Calories' en función de los macronutrientes\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-\r\n-# Convertir columnas numéricas del DataFrame de ejercicios\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-# Definir el modelo de datos del usuario\r\n-class UserProfile(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n-    activity_level: str = Field(\r\n-        ..., \r\n-        pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n-        description=\"Nivel de actividad\"\r\n-    )\r\n-    fitness_goal: str = Field(\r\n-        ..., \r\n-        pattern=\"^(lose_weight|gain_muscle|maintain)$\", \r\n-        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n-    )\r\n-    routine_preference: str = Field(\r\n-        ..., \r\n-        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n-    )\r\n-    dietary_preferences: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Preferencias dietéticas si las hay\"\r\n-    )\r\n-    equipment_available: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Equipamiento disponible para el usuario\"\r\n-    )\r\n-    meals_per_day: int = Field(\r\n-        default=3, \r\n-        description=\"Número de comidas por día\"\r\n-    )\r\n-\r\n-# Funciones para calcular TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    # Ajustar según el objetivo\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500  # Déficit calórico\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500  # Superávit calórico\r\n-    else:\r\n-        calorias_diarias = tdee  # Mantener\r\n-\r\n-    return calorias_diarias\r\n-\r\n-# Funciones de recomendación\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtrar por objetivo de fitness\r\n-    if user_profile.fitness_goal == 'gain_muscle':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'ganancia muscular']\r\n-    elif user_profile.fitness_goal == 'lose_weight':\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'pérdida de peso']\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['Objetivo'] == 'mantenimiento']\r\n-\r\n-    # Filtrar por intensidad acorde al nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'baja',\r\n-        'lightly_active': 'baja',\r\n-        'moderately_active': 'media',\r\n-        'very_active': 'alta',\r\n-        'super_active': 'alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'peso corporal']\r\n-\r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    if len(ejercicios_filtrados) >= 5:\r\n-        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n-    else:\r\n-        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    # Filtrar recetas por tipo de dieta\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    # Filtrar recetas que se ajusten al contenido calórico\r\n-    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    # Seleccionar recetas para cada comida del día\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    # Validar el nivel de actividad\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    # Validar el objetivo de fitness\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    # Generar recomendaciones\r\n-    ejercicios = recomendar_ejercicios(user_profile)\r\n-    recetas = recomendar_recetas(user_profile)\r\n-    plan = {\r\n-        'ejercicios': ejercicios,\r\n-        'recetas': recetas\r\n-    }\r\n     return plan\r\n \r\n # Rutas adicionales (si las necesitas)\r\n @app.post(\"/api/reset-plan\")\r\n"
                },
                {
                    "date": 1730753170375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar el dataset de ejercicios\r\n+ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n+\r\n+# Cargar el dataset de recetas\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+# Eliminar filas con datos faltantes\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular la columna 'Calories' en función de los macronutrientes\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+\r\n+# Convertir columnas numéricas del DataFrame de ejercicios\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+# Definir el modelo de datos del usuario\r\n+class UserProfile(BaseModel):\r\n+    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n+    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n+    age: int = Field(..., description=\"Edad del usuario\")\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n+    activity_level: str = Field(\r\n+        ..., \r\n+        pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n+        description=\"Nivel de actividad\"\r\n+    )\r\n+    fitness_goal: str = Field(\r\n+        ..., \r\n+        pattern=\"^(lose_weight|gain_muscle|maintain)$\", \r\n+        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n+    )\r\n+    routine_preference: str = Field(\r\n+        ..., \r\n+        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n+    )\r\n+    dietary_preferences: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Preferencias dietéticas si las hay\"\r\n+    )\r\n+    equipment_available: Optional[List[str]] = Field(\r\n+        default=[], \r\n+        description=\"Equipamiento disponible para el usuario\"\r\n+    )\r\n+    meals_per_day: int = Field(\r\n+        default=3, \r\n+        description=\"Número de comidas por día\"\r\n+    )\r\n+\r\n+# Funciones para calcular TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    # Ajustar según el objetivo\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500  # Déficit calórico\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500  # Superávit calórico\r\n+    else:\r\n+        calorias_diarias = tdee  # Mantener\r\n+\r\n+    return calorias_diarias\r\n+\r\n+# Funciones de recomendación\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    # Filtro de intensidad basado en el nivel de actividad\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'Baja',\r\n+        'lightly_active': 'Baja',\r\n+        'moderately_active': 'Media',\r\n+        'very_active': 'Alta',\r\n+        'super_active': 'Alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad_usuario]\r\n+\r\n+    # Filtrar por equipamiento disponible\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+\r\n+    # Seleccionar un número de ejercicios para recomendar\r\n+    if len(ejercicios_filtrados) >= 5:\r\n+        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n+    else:\r\n+        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    # Filtrar recetas por tipo de dieta\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    # Filtrar recetas que se ajusten al contenido calórico\r\n+    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    # Seleccionar recetas para cada comida del día\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Endpoint para generar el plan basado en los datos del usuario\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    # Validar el nivel de actividad\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    # Validar el objetivo de fitness\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    # Generar recomendaciones\r\n+    ejercicios = recomendar_ejercicios(user_profile)\r\n+    recetas = recomendar_recetas(user_profile)\r\n+    plan = {\r\n+        'ejercicios': ejercicios,\r\n+        'recetas': recetas\r\n+    }\r\n+    return plan\r\n+\r\n+# Rutas adicionales (si las necesitas)\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    # Simulación de respuesta; ajusta según tu lógica\r\n+    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730753544359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import random  # Para seleccionar ejercicios/recetas aleatoriamente para cada día\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets\r\n+ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'Baja',\r\n+        'lightly_active': 'Baja',\r\n+        'moderately_active': 'Media',\r\n+        'very_active': 'Alta',\r\n+        'super_active': 'Alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad_usuario]\r\n+\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+\r\n+    if len(ejercicios_filtrados) >= 5:\r\n+        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n+    else:\r\n+        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Nueva función para generar un plan de 30 días\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+\r\n+    for dia in range(1, 31):\r\n+        ejercicios_dia = recomendar_ejercicios(user_profile)\r\n+        recetas_dia = recomendar_recetas(user_profile)\r\n+\r\n+        dia_plan = {\r\n+            \"dia\": dia,\r\n+            \"ejercicios\": ejercicios_dia,\r\n+            \"recetas\": recetas_dia\r\n+        }\r\n+        plan_dias.append(dia_plan)\r\n+\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+# Endpoint para generar el plan de 30 días\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    # Validar el nivel de actividad\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    # Validar el objetivo de fitness\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    # Generar el plan de 30 días\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+# Rutas adicionales (si las necesitas)\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730753550256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import random  # Para seleccionar ejercicios/recetas aleatoriamente para cada día\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets\r\n+ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios(user_profile: UserProfile):\r\n+    intensidad_nivel = {\r\n+        'sedentary': 'Baja',\r\n+        'lightly_active': 'Baja',\r\n+        'moderately_active': 'Media',\r\n+        'very_active': 'Alta',\r\n+        'super_active': 'Alta'\r\n+    }\r\n+    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad_usuario]\r\n+\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+\r\n+    if len(ejercicios_filtrados) >= 5:\r\n+        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n+    else:\r\n+        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n+\r\n+    return ejercicios_recomendados\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Nueva función para generar un plan de 30 días\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+\r\n+    for dia in range(1, 31):\r\n+        ejercicios_dia = recomendar_ejercicios(user_profile)\r\n+        recetas_dia = recomendar_recetas(user_profile)\r\n+\r\n+        dia_plan = {\r\n+            \"dia\": dia,\r\n+            \"ejercicios\": ejercicios_dia,\r\n+            \"recetas\": recetas_dia\r\n+        }\r\n+        plan_dias.append(dia_plan)\r\n+\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+# Endpoint para generar el plan de 30 días\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    # Validar el nivel de actividad\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    # Validar el objetivo de fitness\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    # Generar el plan de 30 días\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+# Rutas adicionales (si las necesitas)\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730753851723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import random\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets\r\n+ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+# Nueva función para recomendar ejercicios con intensidad específica\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+\r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+# Función para ajustar intensidad y carga calórica cada semana\r\n+def ajustar_para_semana(semana, user_profile):\r\n+    intensidad = ['Baja', 'Media', 'Alta']\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        intensidad = ['Media', 'Media', 'Alta', 'Alta']\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        intensidad = ['Baja', 'Media', 'Media', 'Alta']\r\n+\r\n+    ejercicios_semanales = []\r\n+    recetas_semanales = []\r\n+\r\n+    for _ in range(7):\r\n+        ejercicios_dia = recomendar_ejercicios_con_intensidad(intensidad[semana % len(intensidad)], user_profile)\r\n+        recetas_dia = recomendar_recetas(user_profile)\r\n+        ejercicios_semanales.append(ejercicios_dia)\r\n+        recetas_semanales.append(recetas_dia)\r\n+\r\n+    return ejercicios_semanales, recetas_semanales\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+# Endpoint para generar el plan de 30 días\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730755890187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import random\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets\r\n+ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+# Nueva función para recomendar ejercicios con intensidad específica\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+\r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+# Función para ajustar intensidad y carga calórica cada semana\r\n+# backend/main.py\r\n+\r\n+def ajustar_para_semana(semana, user_profile):\r\n+    # Ajustar la intensidad según la semana y el objetivo de fitness\r\n+    intensidad = ['Baja', 'Media', 'Alta']\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        intensidad = ['Media', 'Media', 'Alta', 'Alta']\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        intensidad = ['Baja', 'Media', 'Media', 'Alta']\r\n+    else:  # Caso para \"maintain\"\r\n+        intensidad = ['Baja', 'Media', 'Media', 'Media']\r\n+\r\n+    ejercicios_semanales = []\r\n+    recetas_semanales = []\r\n+\r\n+    for _ in range(7):  # Generar 7 días para la semana\r\n+        # Seleccionar ejercicios de acuerdo con la intensidad de la semana actual\r\n+        intensidad_actual = intensidad[semana % len(intensidad)]\r\n+        ejercicios_dia = recomendar_ejercicios_con_intensidad(intensidad_actual, user_profile)\r\n+\r\n+        # Generar las recetas para el día\r\n+        recetas_dia = recomendar_recetas(user_profile)\r\n+\r\n+        # Agregar las rutinas diarias a las listas de la semana\r\n+        ejercicios_semanales.append(ejercicios_dia)\r\n+        recetas_semanales.append(recetas_dia)\r\n+\r\n+    return ejercicios_semanales, recetas_semanales\r\n+\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+# Endpoint para generar el plan de 30 días\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730762753844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,11 @@\n from fastapi.middleware.cors import CORSMiddleware\r\n from pydantic import BaseModel, Field\r\n from typing import List, Optional\r\n import pandas as pd\r\n+import numpy as np\r\n import random\r\n+import tensorflow as tf\r\n \r\n app = FastAPI()\r\n \r\n app.add_middleware(\r\n@@ -45,191 +47,15 @@\n     dietary_preferences: Optional[List[str]] = []\r\n     equipment_available: Optional[List[str]] = []\r\n     meals_per_day: int = 3\r\n \r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+# Cargar el modelo LSTM preentrenado\r\n+try:\r\n+    model = tf.keras.models.load_model(\"backend/models/modelo_nutria_lstm.h5\")\r\n+except Exception as e:\r\n+    print(\"Error al cargar el modelo:\", e)\r\n+    model = None\r\n \r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-# Nueva función para recomendar ejercicios con intensidad específica\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-\r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-# Función para ajustar intensidad y carga calórica cada semana\r\n-# backend/main.py\r\n-\r\n-def ajustar_para_semana(semana, user_profile):\r\n-    # Ajustar la intensidad según la semana y el objetivo de fitness\r\n-    intensidad = ['Baja', 'Media', 'Alta']\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        intensidad = ['Media', 'Media', 'Alta', 'Alta']\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        intensidad = ['Baja', 'Media', 'Media', 'Alta']\r\n-    else:  # Caso para \"maintain\"\r\n-        intensidad = ['Baja', 'Media', 'Media', 'Media']\r\n-\r\n-    ejercicios_semanales = []\r\n-    recetas_semanales = []\r\n-\r\n-    for _ in range(7):  # Generar 7 días para la semana\r\n-        # Seleccionar ejercicios de acuerdo con la intensidad de la semana actual\r\n-        intensidad_actual = intensidad[semana % len(intensidad)]\r\n-        ejercicios_dia = recomendar_ejercicios_con_intensidad(intensidad_actual, user_profile)\r\n-\r\n-        # Generar las recetas para el día\r\n-        recetas_dia = recomendar_recetas(user_profile)\r\n-\r\n-        # Agregar las rutinas diarias a las listas de la semana\r\n-        ejercicios_semanales.append(ejercicios_dia)\r\n-        recetas_semanales.append(recetas_dia)\r\n-\r\n-    return ejercicios_semanales, recetas_semanales\r\n-\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-# Endpoint para generar el plan de 30 días\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import random\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets\r\n-ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n # Funciones de cálculo para TMB y TDEE\r\n def calcular_tmb(weight, height, age, gender):\r\n     if gender == 'male':\r\n         return 10 * weight + 6.25 * height - 5 * age + 5\r\n@@ -258,62 +84,36 @@\n         calorias_diarias = tdee\r\n \r\n     return calorias_diarias\r\n \r\n-# Nueva función para recomendar ejercicios con intensidad específica\r\n def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n     ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-\r\n     if user_profile.equipment_available:\r\n         ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n     else:\r\n         ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-\r\n     return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n \r\n-# Función para ajustar intensidad y carga calórica cada semana\r\n-def ajustar_para_semana(semana, user_profile):\r\n-    intensidad = ['Baja', 'Media', 'Alta']\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        intensidad = ['Media', 'Media', 'Alta', 'Alta']\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        intensidad = ['Baja', 'Media', 'Media', 'Alta']\r\n-\r\n-    ejercicios_semanales = []\r\n-    recetas_semanales = []\r\n-\r\n-    for _ in range(7):\r\n-        ejercicios_dia = recomendar_ejercicios_con_intensidad(intensidad[semana % len(intensidad)], user_profile)\r\n-        recetas_dia = recomendar_recetas(user_profile)\r\n-        ejercicios_semanales.append(ejercicios_dia)\r\n-        recetas_semanales.append(recetas_dia)\r\n-\r\n-    return ejercicios_semanales, recetas_semanales\r\n-\r\n def recomendar_recetas(user_profile: UserProfile):\r\n     calorias_diarias = calcular_calorias_diarias(user_profile)\r\n     calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n     if user_profile.dietary_preferences:\r\n         recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n     else:\r\n         recetas_filtradas = recetas_df\r\n-\r\n     margen_calorias = 100\r\n     recetas_filtradas = recetas_filtradas[\r\n         (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n         (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n     ]\r\n-\r\n     recetas_recomendadas = []\r\n     for _ in range(user_profile.meals_per_day):\r\n         if len(recetas_filtradas) > 0:\r\n             receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n             recetas_recomendadas.append(receta)\r\n         else:\r\n             receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n             recetas_recomendadas.append(receta)\r\n-\r\n     return recetas_recomendadas\r\n \r\n # Función para generar un plan de 30 días dividido en semanas\r\n def generar_plan_30_dias(user_profile: UserProfile):\r\n@@ -328,193 +128,36 @@\n             }\r\n             plan_dias.append(dia_plan)\r\n     return {\"dias\": plan_dias}\r\n \r\n-# Endpoint para generar el plan de 30 días\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import random  # Para seleccionar ejercicios/recetas aleatoriamente para cada día\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets\r\n-ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'Baja',\r\n-        'lightly_active': 'Baja',\r\n-        'moderately_active': 'Media',\r\n-        'very_active': 'Alta',\r\n-        'super_active': 'Alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad_usuario]\r\n-\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-\r\n-    if len(ejercicios_filtrados) >= 5:\r\n-        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n-    else:\r\n-        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-# Nueva función para generar un plan de 30 días\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-\r\n-    for dia in range(1, 31):\r\n-        ejercicios_dia = recomendar_ejercicios(user_profile)\r\n-        recetas_dia = recomendar_recetas(user_profile)\r\n-\r\n-        dia_plan = {\r\n-            \"dia\": dia,\r\n-            \"ejercicios\": ejercicios_dia,\r\n-            \"recetas\": recetas_dia\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n         }\r\n-        plan_dias.append(dia_plan)\r\n-\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-# Endpoint para generar el plan de 30 días\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n @app.post(\"/generate_plan/\")\r\n def generate_plan(user_profile: UserProfile):\r\n-    # Validar el nivel de actividad\r\n     if user_profile.activity_level not in [\r\n         \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n     ]:\r\n         raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    # Validar el objetivo de fitness\r\n     if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n         raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    # Generar el plan de 30 días\r\n     plan = generar_plan_30_dias(user_profile)\r\n     return plan\r\n \r\n-# Rutas adicionales (si las necesitas)\r\n @app.post(\"/api/reset-plan\")\r\n async def reset_plan():\r\n     return {\"success\": True}\r\n \r\n@@ -522,566 +165,4 @@\n async def check_plan():\r\n     user_has_plan = True\r\n     plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n     return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import random  # Para seleccionar ejercicios/recetas aleatoriamente para cada día\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets\r\n-ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'Baja',\r\n-        'lightly_active': 'Baja',\r\n-        'moderately_active': 'Media',\r\n-        'very_active': 'Alta',\r\n-        'super_active': 'Alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad_usuario]\r\n-\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-\r\n-    if len(ejercicios_filtrados) >= 5:\r\n-        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n-    else:\r\n-        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-# Nueva función para generar un plan de 30 días\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-\r\n-    for dia in range(1, 31):\r\n-        ejercicios_dia = recomendar_ejercicios(user_profile)\r\n-        recetas_dia = recomendar_recetas(user_profile)\r\n-\r\n-        dia_plan = {\r\n-            \"dia\": dia,\r\n-            \"ejercicios\": ejercicios_dia,\r\n-            \"recetas\": recetas_dia\r\n-        }\r\n-        plan_dias.append(dia_plan)\r\n-\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-# Endpoint para generar el plan de 30 días\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    # Validar el nivel de actividad\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    # Validar el objetivo de fitness\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    # Generar el plan de 30 días\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-# Rutas adicionales (si las necesitas)\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-# Eliminar filas con datos faltantes\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular la columna 'Calories' en función de los macronutrientes\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-\r\n-# Convertir columnas numéricas del DataFrame de ejercicios\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-# Definir el modelo de datos del usuario\r\n-class UserProfile(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n-    activity_level: str = Field(\r\n-        ..., \r\n-        pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n-        description=\"Nivel de actividad\"\r\n-    )\r\n-    fitness_goal: str = Field(\r\n-        ..., \r\n-        pattern=\"^(lose_weight|gain_muscle|maintain)$\", \r\n-        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n-    )\r\n-    routine_preference: str = Field(\r\n-        ..., \r\n-        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n-    )\r\n-    dietary_preferences: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Preferencias dietéticas si las hay\"\r\n-    )\r\n-    equipment_available: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Equipamiento disponible para el usuario\"\r\n-    )\r\n-    meals_per_day: int = Field(\r\n-        default=3, \r\n-        description=\"Número de comidas por día\"\r\n-    )\r\n-\r\n-# Funciones para calcular TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    # Ajustar según el objetivo\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500  # Déficit calórico\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500  # Superávit calórico\r\n-    else:\r\n-        calorias_diarias = tdee  # Mantener\r\n-\r\n-    return calorias_diarias\r\n-\r\n-# Funciones de recomendación\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtro de intensidad basado en el nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'Baja',\r\n-        'lightly_active': 'Baja',\r\n-        'moderately_active': 'Media',\r\n-        'very_active': 'Alta',\r\n-        'super_active': 'Alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-\r\n-    # Seleccionar un número de ejercicios para recomendar\r\n-    if len(ejercicios_filtrados) >= 5:\r\n-        ejercicios_recomendados = ejercicios_filtrados.sample(n=5).to_dict('records')\r\n-    else:\r\n-        ejercicios_recomendados = ejercicios_filtrados.to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    # Filtrar recetas por tipo de dieta\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    # Filtrar recetas que se ajusten al contenido calórico\r\n-    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    # Seleccionar recetas para cada comida del día\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    # Validar el nivel de actividad\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    # Validar el objetivo de fitness\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    # Generar recomendaciones\r\n-    ejercicios = recomendar_ejercicios(user_profile)\r\n-    recetas = recomendar_recetas(user_profile)\r\n-    plan = {\r\n-        'ejercicios': ejercicios,\r\n-        'recetas': recetas\r\n-    }\r\n-    return plan\r\n-\r\n-# Rutas adicionales (si las necesitas)\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],  # Ajusta esto según tus necesidades de seguridad\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar el dataset de ejercicios\r\n-ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n-\r\n-# Cargar el dataset de recetas\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-# Eliminar filas con datos faltantes\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular la columna 'Calories' en función de los macronutrientes\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-\r\n-# Convertir columnas numéricas del DataFrame de ejercicios\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-# Definir el modelo de datos del usuario\r\n-class UserProfile(BaseModel):\r\n-    weight: float = Field(..., description=\"Peso del usuario en kilogramos\")\r\n-    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n-    age: int = Field(..., description=\"Edad del usuario\")\r\n-    gender: str = Field(..., regex=\"^(male|female)$\", description=\"Género del usuario ('male' o 'female')\")\r\n-    activity_level: str = Field(\r\n-        ..., \r\n-        regex=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", \r\n-        description=\"Nivel de actividad\"\r\n-    )\r\n-    fitness_goal: str = Field(\r\n-        ..., \r\n-        regex=\"^(lose_weight|gain_muscle|maintain)$\", \r\n-        description=\"Objetivo de fitness del usuario ('lose_weight', 'gain_muscle', 'maintain')\"\r\n-    )\r\n-    routine_preference: str = Field(\r\n-        ..., \r\n-        description=\"Preferencia de rutina de ejercicio del usuario\"\r\n-    )\r\n-    dietary_preferences: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Preferencias dietéticas si las hay\"\r\n-    )\r\n-    equipment_available: Optional[List[str]] = Field(\r\n-        default=[], \r\n-        description=\"Equipamiento disponible para el usuario\"\r\n-    )\r\n-    meals_per_day: int = Field(\r\n-        default=3, \r\n-        description=\"Número de comidas por día\"\r\n-    )\r\n-\r\n-# Funciones para calcular TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    # Ajustar según el objetivo\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500  # Déficit calórico\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500  # Superávit calórico\r\n-    else:\r\n-        calorias_diarias = tdee  # Mantener\r\n-\r\n-    return calorias_diarias\r\n-\r\n-# Funciones de recomendación\r\n-def recomendar_ejercicios(user_profile: UserProfile):\r\n-    # Filtro de intensidad basado en el nivel de actividad\r\n-    intensidad_nivel = {\r\n-        'sedentary': 'Baja',\r\n-        'lightly_active': 'Baja',\r\n-        'moderately_active': 'Media',\r\n-        'very_active': 'Alta',\r\n-        'super_active': 'Alta'\r\n-    }\r\n-    intensidad_usuario = intensidad_nivel[user_profile.activity_level]\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad_usuario]\r\n-\r\n-    # Filtrar por equipamiento disponible\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        # Si no hay equipamiento disponible, filtrar ejercicios de peso corporal\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-\r\n-    # Seleccionar ejercicios para el día\r\n-    ejercicios_recomendados = ejercicios_filtrados.sample(n=5, replace=True).to_dict('records')\r\n-\r\n-    return ejercicios_recomendados\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-\r\n-    # Filtrar recetas por tipo de dieta\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-\r\n-    # Filtrar recetas que se ajusten al contenido calórico\r\n-    margen_calorias = 100  # Permitir un margen de +/- 100 calorías\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-\r\n-    # Seleccionar recetas para cada comida del día\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            # Si no hay recetas que cumplan los criterios, seleccionar aleatoriamente\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-\r\n-    return recetas_recomendadas\r\n-\r\n-# Endpoint para generar el plan basado en los datos del usuario\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    # Validar el nivel de actividad\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-\r\n-    # Validar el objetivo de fitness\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-\r\n-    # Generar el plan de 30 días\r\n-    plan = {'dias': []}\r\n-    for dia in range(1, 31):\r\n-        ejercicios = recomendar_ejercicios(user_profile)\r\n-        recetas = recomendar_recetas(user_profile)\r\n-        plan['dias'].append({\r\n-            'dia': dia,\r\n-            'ejercicios': ejercicios,\r\n-            'recetas': recetas\r\n-        })\r\n-\r\n-    return plan\r\n-\r\n-# Rutas adicionales (si las necesitas)\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    # Lógica para restablecer el plan del usuario (por ejemplo, eliminarlo de la base de datos)\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    # Simulación de respuesta; ajusta según tu lógica\r\n-    user_has_plan = True  # Cambia esto a la lógica real para verificar el plan\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730762760202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import random\r\n+import tensorflow as tf\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets\r\n+ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Cargar el modelo LSTM preentrenado\r\n+try:\r\n+    model = tf.keras.models.load_model(\"backend/models/modelo_nutria_lstm.h5\")\r\n+except Exception as e:\r\n+    print(\"Error al cargar el modelo:\", e)\r\n+    model = None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730762964358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     allow_headers=[\"*\"],\r\n )\r\n \r\n # Cargar los datasets\r\n-ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n+ejercicios_df = pd.read_csv('backend\\data\\fitness_exercises_enriched.csv')\r\n recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n \r\n # Preprocesamiento de los datasets\r\n ejercicios_df.dropna(inplace=True)\r\n@@ -165,172 +165,4 @@\n async def check_plan():\r\n     user_has_plan = True\r\n     plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n     return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import random\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets\r\n-ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Cargar el modelo LSTM preentrenado\r\n-try:\r\n-    model = tf.keras.models.load_model(\"backend/models/modelo_nutria_lstm.h5\")\r\n-except Exception as e:\r\n-    print(\"Error al cargar el modelo:\", e)\r\n-    model = None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730771845080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import random\r\n+import tensorflow as tf\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets\r\n+ejercicios_df = pd.read_csv('backend\\\\data\\\\fitness_exercises_enriched.csv')\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Cargar el modelo LSTM preentrenado\r\n+try:\r\n+    model = tf.keras.models.load_model(\"backend/models/modelo_nutria_lstm.h5\")\r\n+except Exception as e:\r\n+    print(\"Error al cargar el modelo:\", e)\r\n+    model = None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730771871765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import random\r\n+import tensorflow as tf\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets\r\n+ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Cargar el modelo LSTM preentrenado\r\n+try:\r\n+    model = tf.keras.models.load_model(\"backend/models/modelo_nutria_lstm.h5\")\r\n+except Exception as e:\r\n+    print(\"Error al cargar el modelo:\", e)\r\n+    model = None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730771959733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,168 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import random\r\n+import tensorflow as tf\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets\r\n+ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n+recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Cargar el modelo LSTM preentrenado\r\n+try:\r\n+    model = tf.keras.models.load_model(\"backend/models/modelo_nutria_lstm.h5\")\r\n+except Exception as e:\r\n+    print(\"Error al cargar el modelo:\", e)\r\n+    model = None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730772115420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Cargar el modelo LSTM preentrenado usando una ruta absoluta\r\n+model_path = os.path.join(base_dir, 'models', 'modelo_nutria_lstm.h5')\r\n+try:\r\n+    model = tf.keras.models.load_model(model_path)\r\n+except Exception as e:\r\n+    print(\"Error al cargar el modelo:\", e)\r\n+    model = None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730772643879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Cargar el modelo LSTM preentrenado usando la ruta correcta\r\n+model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+try:\r\n+    model = tf.keras.models.load_model(model_path)\r\n+except Exception as e:\r\n+    print(\"Error al cargar el modelo:\", e)\r\n+    model = None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730772769258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,172 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Cargar el modelo LSTM preentrenado usando la ruta correcta\r\n+model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+try:\r\n+    model = tf.keras.models.load_model(model_path)\r\n+except Exception as e:\r\n+    print(\"Error al cargar el modelo:\", e)\r\n+    model = None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730772813655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     equipment_available: Optional[List[str]] = []\r\n     meals_per_day: int = 3\r\n \r\n # Cargar el modelo LSTM preentrenado usando la ruta correcta\r\n-model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+model_path = os.path.join(base_dir, '..', 'data', 'modelo_nutria_lstm.h5')\r\n try:\r\n     model = tf.keras.models.load_model(model_path)\r\n except Exception as e:\r\n     print(\"Error al cargar el modelo:\", e)\r\n@@ -169,1020 +169,4 @@\n async def check_plan():\r\n     user_has_plan = True\r\n     plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n     return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Cargar el modelo LSTM preentrenado usando la ruta correcta\r\n-model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-try:\r\n-    model = tf.keras.models.load_model(model_path)\r\n-except Exception as e:\r\n-    print(\"Error al cargar el modelo:\", e)\r\n-    model = None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Cargar el modelo LSTM preentrenado usando una ruta absoluta\r\n-model_path = os.path.join(base_dir, 'models', 'modelo_nutria_lstm.h5')\r\n-try:\r\n-    model = tf.keras.models.load_model(model_path)\r\n-except Exception as e:\r\n-    print(\"Error al cargar el modelo:\", e)\r\n-    model = None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import random\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets\r\n-ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Cargar el modelo LSTM preentrenado\r\n-try:\r\n-    model = tf.keras.models.load_model(\"backend/models/modelo_nutria_lstm.h5\")\r\n-except Exception as e:\r\n-    print(\"Error al cargar el modelo:\", e)\r\n-    model = None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import random\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets\r\n-ejercicios_df = pd.read_csv('backend/data/fitness_exercises_enriched.csv')\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Cargar el modelo LSTM preentrenado\r\n-try:\r\n-    model = tf.keras.models.load_model(\"backend/models/modelo_nutria_lstm.h5\")\r\n-except Exception as e:\r\n-    print(\"Error al cargar el modelo:\", e)\r\n-    model = None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import random\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets\r\n-ejercicios_df = pd.read_csv('backend\\\\data\\\\fitness_exercises_enriched.csv')\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Cargar el modelo LSTM preentrenado\r\n-try:\r\n-    model = tf.keras.models.load_model(\"backend/models/modelo_nutria_lstm.h5\")\r\n-except Exception as e:\r\n-    print(\"Error al cargar el modelo:\", e)\r\n-    model = None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import random\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets\r\n-ejercicios_df = pd.read_csv('backend\\data\\fitness_exercises_enriched.csv')\r\n-recetas_df = pd.read_csv('backend/data/enriched_recipes_data.csv')\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Cargar el modelo LSTM preentrenado\r\n-try:\r\n-    model = tf.keras.models.load_model(\"backend/models/modelo_nutria_lstm.h5\")\r\n-except Exception as e:\r\n-    print(\"Error al cargar el modelo:\", e)\r\n-    model = None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730772960232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,175 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    model = cargar_modelo()\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730773273094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,177 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        # Genera ejercicios y recetas para cada día de la semana\r\n+        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    model = cargar_modelo()\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730773282597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,177 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    else:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        # Genera ejercicios y recetas para cada día de la semana\r\n+        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    model = cargar_modelo()\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730773436451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,10 +94,13 @@\n def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n     ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n     if user_profile.equipment_available:\r\n         ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n+    \r\n+    # Si no hay suficientes ejercicios con el equipo disponible, usa peso corporal como alternativa\r\n+    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n+    \r\n     return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n \r\n def recomendar_recetas(user_profile: UserProfile):\r\n     calorias_diarias = calcular_calorias_diarias(user_profile)\r\n@@ -174,528 +177,4 @@\n async def check_plan():\r\n     user_has_plan = True\r\n     plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n     return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Función para cargar el modelo en tiempo de ejecución\r\n-def cargar_modelo():\r\n-    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-    try:\r\n-        model = tf.keras.models.load_model(model_path)\r\n-        return model\r\n-    except Exception as e:\r\n-        print(\"Error al cargar el modelo:\", e)\r\n-        return None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        # Genera ejercicios y recetas para cada día de la semana\r\n-        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n-        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    model = cargar_modelo()\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Función para cargar el modelo en tiempo de ejecución\r\n-def cargar_modelo():\r\n-    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-    try:\r\n-        model = tf.keras.models.load_model(model_path)\r\n-        return model\r\n-    except Exception as e:\r\n-        print(\"Error al cargar el modelo:\", e)\r\n-        return None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    model = cargar_modelo()\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Cargar el modelo LSTM preentrenado usando la ruta correcta\r\n-model_path = os.path.join(base_dir, '..', 'data', 'modelo_nutria_lstm.h5')\r\n-try:\r\n-    model = tf.keras.models.load_model(model_path)\r\n-except Exception as e:\r\n-    print(\"Error al cargar el modelo:\", e)\r\n-    model = None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    else:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'] == 'body weight']\r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        ejercicios_semanales, recetas_semanales = ajustar_para_semana(semana, user_profile)\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730773441888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,180 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    \r\n+    # Si no hay suficientes ejercicios con el equipo disponible, usa peso corporal como alternativa\r\n+    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n+    \r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        # Genera ejercicios y recetas para cada día de la semana\r\n+        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    model = cargar_modelo()\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730775113156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,180 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],  # Cambia a [\"http://localhost:3000\"] en producción para más seguridad\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],  # Permitir todos los métodos (GET, POST, etc.)\r\n+    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],  # Permitir encabezados personalizados\r\n+)\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    \r\n+    # Si no hay suficientes ejercicios con el equipo disponible, usa peso corporal como alternativa\r\n+    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n+    \r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        # Genera ejercicios y recetas para cada día de la semana\r\n+        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    model = cargar_modelo()\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730775122786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,180 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],  # Cambia a [\"http://localhost:3000\"] en producción para más seguridad\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],  # Permitir todos los métodos (GET, POST, etc.)\r\n+    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],  # Permitir encabezados personalizados\r\n+)\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    \r\n+    # Si no hay suficientes ejercicios con el equipo disponible, usa peso corporal como alternativa\r\n+    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n+    \r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        # Genera ejercicios y recetas para cada día de la semana\r\n+        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    model = cargar_modelo()\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730775264278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,180 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+\r\n+app = FastAPI()\r\n+\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"*\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"*\"],\r\n+)\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    \r\n+    # Si no hay suficientes ejercicios con el equipo disponible, usa peso corporal como alternativa\r\n+    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n+    \r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+# Función para generar un plan de 30 días dividido en semanas\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  # Generar 4 semanas\r\n+        # Genera ejercicios y recetas para cada día de la semana\r\n+        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    model = cargar_modelo()\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan():\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730775706414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,182 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException, Depends\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+from fastapi.security import OAuth2PasswordBearer\r\n+\r\n+app = FastAPI()\r\n+\r\n+# Configuración CORS\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"http://localhost:3000\"],  # Cambia a \"*\" solo en desarrollo\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n+)\r\n+\r\n+# Rutas de autenticación y seguridad\r\n+oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    \r\n+    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n+    \r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  \r\n+        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    model = cargar_modelo()\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan(token: str = Depends(oauth2_scheme)):\r\n+    user_has_plan = True\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730776393803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+# backend/main.py\r\n+\r\n+from fastapi import FastAPI, HTTPException, Depends\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+from fastapi.security import OAuth2PasswordBearer\r\n+\r\n+app = FastAPI()\r\n+\r\n+# Configuración CORS\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"http://localhost:3000\"],  # Cambia a \"*\" solo en desarrollo\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n+)\r\n+\r\n+# Rutas de autenticación y seguridad\r\n+oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    \r\n+    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n+    \r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  \r\n+        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    model = cargar_modelo()\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan(token: str = Depends(oauth2_scheme)):\r\n+    # Esta lógica debe reflejar si el usuario realmente tiene un plan guardado\r\n+    user_has_plan = False  # Cambia esto para simular que no hay un plan si corresponde\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730947565374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,181 @@\n+from fastapi import FastAPI, HTTPException, Depends\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+from fastapi.security import OAuth2PasswordBearer\r\n+\r\n+app = FastAPI()\r\n+\r\n+# Configuración CORS\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"http://localhost:3000\"],  # Cambia a \"*\" solo en desarrollo\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n+)\r\n+\r\n+# Rutas de autenticación y seguridad\r\n+oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    \r\n+    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n+    \r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  \r\n+        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    model = cargar_modelo()\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan(token: str = Depends(oauth2_scheme)):\r\n+    # Esta lógica debe reflejar si el usuario realmente tiene un plan guardado\r\n+    user_has_plan = False  # Cambia esto para simular que no hay un plan si corresponde\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1730947578073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -178,1269 +178,4 @@\n     # Esta lógica debe reflejar si el usuario realmente tiene un plan guardado\r\n     user_has_plan = False  # Cambia esto para simular que no hay un plan si corresponde\r\n     plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n     return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException, Depends\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-from fastapi.security import OAuth2PasswordBearer\r\n-\r\n-app = FastAPI()\r\n-\r\n-# Configuración CORS\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"http://localhost:3000\"],  # Cambia a \"*\" solo en desarrollo\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n-)\r\n-\r\n-# Rutas de autenticación y seguridad\r\n-oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Función para cargar el modelo en tiempo de ejecución\r\n-def cargar_modelo():\r\n-    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-    try:\r\n-        model = tf.keras.models.load_model(model_path)\r\n-        return model\r\n-    except Exception as e:\r\n-        print(\"Error al cargar el modelo:\", e)\r\n-        return None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    \r\n-    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n-    \r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  \r\n-        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n-        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    model = cargar_modelo()\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan(token: str = Depends(oauth2_scheme)):\r\n-    # Esta lógica debe reflejar si el usuario realmente tiene un plan guardado\r\n-    user_has_plan = False  # Cambia esto para simular que no hay un plan si corresponde\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException, Depends\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-from fastapi.security import OAuth2PasswordBearer\r\n-\r\n-app = FastAPI()\r\n-\r\n-# Configuración CORS\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"http://localhost:3000\"],  # Cambia a \"*\" solo en desarrollo\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n-)\r\n-\r\n-# Rutas de autenticación y seguridad\r\n-oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Función para cargar el modelo en tiempo de ejecución\r\n-def cargar_modelo():\r\n-    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-    try:\r\n-        model = tf.keras.models.load_model(model_path)\r\n-        return model\r\n-    except Exception as e:\r\n-        print(\"Error al cargar el modelo:\", e)\r\n-        return None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    \r\n-    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n-    \r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  \r\n-        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n-        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    model = cargar_modelo()\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan(token: str = Depends(oauth2_scheme)):\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Función para cargar el modelo en tiempo de ejecución\r\n-def cargar_modelo():\r\n-    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-    try:\r\n-        model = tf.keras.models.load_model(model_path)\r\n-        return model\r\n-    except Exception as e:\r\n-        print(\"Error al cargar el modelo:\", e)\r\n-        return None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    \r\n-    # Si no hay suficientes ejercicios con el equipo disponible, usa peso corporal como alternativa\r\n-    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n-    \r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        # Genera ejercicios y recetas para cada día de la semana\r\n-        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n-        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    model = cargar_modelo()\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],  # Cambia a [\"http://localhost:3000\"] en producción para más seguridad\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],  # Permitir todos los métodos (GET, POST, etc.)\r\n-    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],  # Permitir encabezados personalizados\r\n-)\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Función para cargar el modelo en tiempo de ejecución\r\n-def cargar_modelo():\r\n-    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-    try:\r\n-        model = tf.keras.models.load_model(model_path)\r\n-        return model\r\n-    except Exception as e:\r\n-        print(\"Error al cargar el modelo:\", e)\r\n-        return None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    \r\n-    # Si no hay suficientes ejercicios con el equipo disponible, usa peso corporal como alternativa\r\n-    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n-    \r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        # Genera ejercicios y recetas para cada día de la semana\r\n-        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n-        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    model = cargar_modelo()\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],  # Cambia a [\"http://localhost:3000\"] en producción para más seguridad\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],  # Permitir todos los métodos (GET, POST, etc.)\r\n-    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],  # Permitir encabezados personalizados\r\n-)\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Función para cargar el modelo en tiempo de ejecución\r\n-def cargar_modelo():\r\n-    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-    try:\r\n-        model = tf.keras.models.load_model(model_path)\r\n-        return model\r\n-    except Exception as e:\r\n-        print(\"Error al cargar el modelo:\", e)\r\n-        return None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    \r\n-    # Si no hay suficientes ejercicios con el equipo disponible, usa peso corporal como alternativa\r\n-    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n-    \r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        # Genera ejercicios y recetas para cada día de la semana\r\n-        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n-        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    model = cargar_modelo()\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Función para cargar el modelo en tiempo de ejecución\r\n-def cargar_modelo():\r\n-    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-    try:\r\n-        model = tf.keras.models.load_model(model_path)\r\n-        return model\r\n-    except Exception as e:\r\n-        print(\"Error al cargar el modelo:\", e)\r\n-        return None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    \r\n-    # Si no hay suficientes ejercicios con el equipo disponible, usa peso corporal como alternativa\r\n-    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n-    \r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        # Genera ejercicios y recetas para cada día de la semana\r\n-        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n-        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    model = cargar_modelo()\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-# backend/main.py\r\n-\r\n-from fastapi import FastAPI, HTTPException\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-\r\n-app = FastAPI()\r\n-\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"*\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"*\"],\r\n-)\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Función para cargar el modelo en tiempo de ejecución\r\n-def cargar_modelo():\r\n-    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-    try:\r\n-        model = tf.keras.models.load_model(model_path)\r\n-        return model\r\n-    except Exception as e:\r\n-        print(\"Error al cargar el modelo:\", e)\r\n-        return None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    \r\n-    # Si no hay suficientes ejercicios con el equipo disponible, usa peso corporal como alternativa\r\n-    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n-    \r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-# Función para generar un plan de 30 días dividido en semanas\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  # Generar 4 semanas\r\n-        # Genera ejercicios y recetas para cada día de la semana\r\n-        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n-        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    model = cargar_modelo()\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan():\r\n-    user_has_plan = True\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1731004743071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,8 +174,7 @@\n     return {\"success\": True}\r\n \r\n @app.get(\"/api/check-plan\")\r\n async def check_plan(token: str = Depends(oauth2_scheme)):\r\n-    # Esta lógica debe reflejar si el usuario realmente tiene un plan guardado\r\n-    user_has_plan = False  # Cambia esto para simular que no hay un plan si corresponde\r\n+    user_has_plan = False\r\n     plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n     return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1731004779104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,8 +145,11 @@\n     model = cargar_modelo()\r\n     if model is None:\r\n         raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n     try:\r\n+        if len(user_data) != 7 or any(len(day_data) != 5 for day_data in user_data):\r\n+            raise HTTPException(status_code=400, detail=\"Formato de datos inválido. Se esperan 7 días de datos con 5 valores cada uno.\")\r\n+        \r\n         datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n         prediccion = model.predict(datos_recientes)\r\n         peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n         return {\r\n@@ -156,8 +159,9 @@\n         }\r\n     except Exception as e:\r\n         print(\"Error en predicción:\", e)\r\n         raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+\r\n         \r\n @app.post(\"/generate_plan/\")\r\n def generate_plan(user_profile: UserProfile):\r\n     if user_profile.activity_level not in [\r\n"
                },
                {
                    "date": 1731004791038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+from fastapi import FastAPI, HTTPException, Depends\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+from fastapi.security import OAuth2PasswordBearer\r\n+\r\n+app = FastAPI()\r\n+\r\n+# Configuración CORS\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"http://localhost:3000\"],  # Cambia a \"*\" solo en desarrollo\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n+)\r\n+\r\n+# Rutas de autenticación y seguridad\r\n+oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    \r\n+    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n+    \r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  \r\n+        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    model = cargar_modelo()\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        if len(user_data) != 7 or any(len(day_data) != 5 for day_data in user_data):\r\n+            raise HTTPException(status_code=400, detail=\"Formato de datos inválido. Se esperan 7 días de datos con 5 valores cada uno.\")\r\n+        \r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan(token: str = Depends(oauth2_scheme)):\r\n+    user_has_plan = False\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1731004914647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,184 @@\n+from fastapi import FastAPI, HTTPException, Depends\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+from fastapi.security import OAuth2PasswordBearer\r\n+\r\n+app = FastAPI()\r\n+\r\n+# Configuración CORS\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"http://localhost:3000\"],  # Cambia a \"*\" solo en desarrollo\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n+)\r\n+\r\n+# Rutas de autenticación y seguridad\r\n+oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+    \r\n+    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n+    \r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  \r\n+        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    model = cargar_modelo()\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        if len(user_data) != 7 or any(len(day_data) != 5 for day_data in user_data):\r\n+            raise HTTPException(status_code=400, detail=\"Formato de datos inválido. Se esperan 7 días de datos con 5 valores cada uno.\")\r\n+        \r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan(token: str = Depends(oauth2_scheme)):\r\n+    user_has_plan = False\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1731005748764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,384 +95,21 @@\n     return calorias_diarias\r\n \r\n def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n     ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n     \r\n-    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n-    \r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  \r\n-        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n-        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    model = cargar_modelo()\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        if len(user_data) != 7 or any(len(day_data) != 5 for day_data in user_data):\r\n-            raise HTTPException(status_code=400, detail=\"Formato de datos inválido. Se esperan 7 días de datos con 5 valores cada uno.\")\r\n-        \r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan(token: str = Depends(oauth2_scheme)):\r\n-    user_has_plan = False\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-from fastapi import FastAPI, HTTPException, Depends\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-from fastapi.security import OAuth2PasswordBearer\r\n-\r\n-app = FastAPI()\r\n-\r\n-# Configuración CORS\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"http://localhost:3000\"],  # Cambia a \"*\" solo en desarrollo\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n-)\r\n-\r\n-# Rutas de autenticación y seguridad\r\n-oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Función para cargar el modelo en tiempo de ejecución\r\n-def cargar_modelo():\r\n-    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-    try:\r\n-        model = tf.keras.models.load_model(model_path)\r\n-        return model\r\n-    except Exception as e:\r\n-        print(\"Error al cargar el modelo:\", e)\r\n-        return None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n     if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n+        ejercicios_filtrados = ejercicios_filtrados[\r\n+            ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)\r\n+        ]\r\n     \r\n+   \r\n     if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] != 'body weight']\r\n     \r\n     return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n \r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n \r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  \r\n-        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n-        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    model = cargar_modelo()\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n-    try:\r\n-        if len(user_data) != 7 or any(len(day_data) != 5 for day_data in user_data):\r\n-            raise HTTPException(status_code=400, detail=\"Formato de datos inválido. Se esperan 7 días de datos con 5 valores cada uno.\")\r\n-        \r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n-        }\r\n-    except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n-\r\n-        \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan(token: str = Depends(oauth2_scheme)):\r\n-    user_has_plan = False\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-from fastapi import FastAPI, HTTPException, Depends\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-from fastapi.security import OAuth2PasswordBearer\r\n-\r\n-app = FastAPI()\r\n-\r\n-# Configuración CORS\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"http://localhost:3000\"],  # Cambia a \"*\" solo en desarrollo\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n-)\r\n-\r\n-# Rutas de autenticación y seguridad\r\n-oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-# Función para cargar el modelo en tiempo de ejecución\r\n-def cargar_modelo():\r\n-    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-    try:\r\n-        model = tf.keras.models.load_model(model_path)\r\n-        return model\r\n-    except Exception as e:\r\n-        print(\"Error al cargar el modelo:\", e)\r\n-        return None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)]\r\n-    \r\n-    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] == 'body weight']\r\n-    \r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n def recomendar_recetas(user_profile: UserProfile):\r\n     calorias_diarias = calcular_calorias_diarias(user_profile)\r\n     calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n     if user_profile.dietary_preferences:\r\n"
                },
                {
                    "date": 1731007615591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n \r\n # Configuración CORS\r\n app.add_middleware(\r\n     CORSMiddleware,\r\n-    allow_origins=[\"http://localhost:3000\"],  # Cambia a \"*\" solo en desarrollo\r\n+    allow_origins=[\"http://localhost:3000\"],\r\n     allow_credentials=True,\r\n     allow_methods=[\"*\"],\r\n     allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n )\r\n@@ -53,8 +53,12 @@\n     dietary_preferences: Optional[List[str]] = []\r\n     equipment_available: Optional[List[str]] = []\r\n     meals_per_day: int = 3\r\n \r\n+class ProgressData(BaseModel):\r\n+    weight: float\r\n+    hoursSleep: float\r\n+\r\n # Función para cargar el modelo en tiempo de ejecución\r\n def cargar_modelo():\r\n     model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n     try:\r\n@@ -101,9 +105,8 @@\n         ejercicios_filtrados = ejercicios_filtrados[\r\n             ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)\r\n         ]\r\n     \r\n-   \r\n     if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n         ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] != 'body weight']\r\n     \r\n     return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n@@ -144,30 +147,21 @@\n             }\r\n             plan_dias.append(dia_plan)\r\n     return {\"dias\": plan_dias}\r\n \r\n-@app.post(\"/predict_progreso\")\r\n-def predict_progreso(user_data: List[List[float]]):\r\n-    model = cargar_modelo()\r\n-    if model is None:\r\n-        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+@app.post(\"/update_plan\")\r\n+def update_plan(progress_data: ProgressData, token: str = Depends(oauth2_scheme)):\r\n     try:\r\n-        if len(user_data) != 7 or any(len(day_data) != 5 for day_data in user_data):\r\n-            raise HTTPException(status_code=400, detail=\"Formato de datos inválido. Se esperan 7 días de datos con 5 valores cada uno.\")\r\n-        \r\n-        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n-        prediccion = model.predict(datos_recientes)\r\n-        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n-        return {\r\n-            \"peso_futuro\": peso_futuro,\r\n-            \"rendimiento_futuro\": rendimiento_futuro,\r\n-            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        updated_plan = {\r\n+            \"mensaje\": \"Plan actualizado en base al progreso semanal\",\r\n+            \"peso_registrado\": progress_data.weight,\r\n+            \"horas_suenio\": progress_data.hoursSleep\r\n         }\r\n+        return updated_plan\r\n     except Exception as e:\r\n-        print(\"Error en predicción:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+        print(\"Error al actualizar el plan:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al actualizar el plan\")\r\n \r\n-        \r\n @app.post(\"/generate_plan/\")\r\n def generate_plan(user_profile: UserProfile):\r\n     if user_profile.activity_level not in [\r\n         \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n"
                },
                {
                    "date": 1731007666474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+from fastapi import FastAPI, HTTPException, Depends\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+from fastapi.security import OAuth2PasswordBearer\r\n+\r\n+app = FastAPI()\r\n+\r\n+# Configuración CORS\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"http://localhost:3000\"],\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n+)\r\n+\r\n+# Rutas de autenticación y seguridad\r\n+oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+class ProgressData(BaseModel):\r\n+    weight: float\r\n+    hoursSleep: float\r\n+\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    \r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[\r\n+            ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)\r\n+        ]\r\n+    \r\n+    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] != 'body weight']\r\n+    \r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  \r\n+        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/update_plan\")\r\n+def update_plan(progress_data: ProgressData, token: str = Depends(oauth2_scheme)):\r\n+    try:\r\n+        updated_plan = {\r\n+            \"mensaje\": \"Plan actualizado en base al progreso semanal\",\r\n+            \"peso_registrado\": progress_data.weight,\r\n+            \"horas_suenio\": progress_data.hoursSleep\r\n+        }\r\n+        return updated_plan\r\n+    except Exception as e:\r\n+        print(\"Error al actualizar el plan:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al actualizar el plan\")\r\n+\r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan(token: str = Depends(oauth2_scheme)):\r\n+    user_has_plan = False\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1731007780811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,366 +1,183 @@\n-from fastapi import FastAPI, HTTPException, Depends\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-from fastapi.security import OAuth2PasswordBearer\r\n+# from fastapi import FastAPI, HTTPException, Depends\r\n+# from fastapi.middleware.cors import CORSMiddleware\r\n+# from pydantic import BaseModel, Field\r\n+# from typing import List, Optional\r\n+# import pandas as pd\r\n+# import numpy as np\r\n+# import os\r\n+# import tensorflow as tf\r\n+# from fastapi.security import OAuth2PasswordBearer\r\n \r\n-app = FastAPI()\r\n+# app = FastAPI()\r\n \r\n-# Configuración CORS\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"http://localhost:3000\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n-)\r\n+# # Configuración CORS\r\n+# app.add_middleware(\r\n+#     CORSMiddleware,\r\n+#     allow_origins=[\"http://localhost:3000\"],\r\n+#     allow_credentials=True,\r\n+#     allow_methods=[\"*\"],\r\n+#     allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n+# )\r\n \r\n-# Rutas de autenticación y seguridad\r\n-oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n+# # Rutas de autenticación y seguridad\r\n+# oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n \r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+# # Cargar los datasets usando rutas absolutas\r\n+# base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+# ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+# recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n \r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n+# ejercicios_df = pd.read_csv(ejercicios_path)\r\n+# recetas_df = pd.read_csv(recetas_path)\r\n \r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n+# # Preprocesamiento de los datasets\r\n+# ejercicios_df.dropna(inplace=True)\r\n+# recetas_df.dropna(inplace=True)\r\n \r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+# # Calcular las calorías en recetas\r\n+# recetas_df['Calories'] = (\r\n+#     recetas_df['Protein(g)'].astype(float) * 4 +\r\n+#     recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+#     recetas_df['Fat(g)'].astype(float) * 9\r\n+# )\r\n+# ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n \r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n+# class UserProfile(BaseModel):\r\n+#     weight: float\r\n+#     height: float\r\n+#     age: int\r\n+#     gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+#     activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+#     fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+#     routine_preference: str\r\n+#     dietary_preferences: Optional[List[str]] = []\r\n+#     equipment_available: Optional[List[str]] = []\r\n+#     meals_per_day: int = 3\r\n \r\n-class ProgressData(BaseModel):\r\n-    weight: float\r\n-    hoursSleep: float\r\n+# class ProgressData(BaseModel):\r\n+#     weight: float\r\n+#     hoursSleep: float\r\n \r\n-# Función para cargar el modelo en tiempo de ejecución\r\n-def cargar_modelo():\r\n-    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-    try:\r\n-        model = tf.keras.models.load_model(model_path)\r\n-        return model\r\n-    except Exception as e:\r\n-        print(\"Error al cargar el modelo:\", e)\r\n-        return None\r\n+# # Función para cargar el modelo en tiempo de ejecución\r\n+# def cargar_modelo():\r\n+#     model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+#     try:\r\n+#         model = tf.keras.models.load_model(model_path)\r\n+#         return model\r\n+#     except Exception as e:\r\n+#         print(\"Error al cargar el modelo:\", e)\r\n+#         return None\r\n \r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+# # Funciones de cálculo para TMB y TDEE\r\n+# def calcular_tmb(weight, height, age, gender):\r\n+#     if gender == 'male':\r\n+#         return 10 * weight + 6.25 * height - 5 * age + 5\r\n+#     else:\r\n+#         return 10 * weight + 6.25 * height - 5 * age - 161\r\n \r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n+# def calcular_tdee(tmb, activity_level):\r\n+#     activity_factors = {\r\n+#         'sedentary': 1.2,\r\n+#         'lightly_active': 1.375,\r\n+#         'moderately_active': 1.55,\r\n+#         'very_active': 1.725,\r\n+#         'super_active': 1.9\r\n+#     }\r\n+#     return tmb * activity_factors[activity_level]\r\n \r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+# def calcular_calorias_diarias(user_profile: UserProfile):\r\n+#     tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+#     tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n \r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n+#     if user_profile.fitness_goal == 'lose_weight':\r\n+#         calorias_diarias = tdee - 500\r\n+#     elif user_profile.fitness_goal == 'gain_muscle':\r\n+#         calorias_diarias = tdee + 500\r\n+#     else:\r\n+#         calorias_diarias = tdee\r\n \r\n-    return calorias_diarias\r\n+#     return calorias_diarias\r\n \r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+# def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+#     ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n     \r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[\r\n-            ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)\r\n-        ]\r\n+#     if user_profile.equipment_available:\r\n+#         ejercicios_filtrados = ejercicios_filtrados[\r\n+#             ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)\r\n+#         ]\r\n     \r\n-    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] != 'body weight']\r\n+#     if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n+#         ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] != 'body weight']\r\n     \r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+#     return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n \r\n \r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n+# def recomendar_recetas(user_profile: UserProfile):\r\n+#     calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+#     calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+#     if user_profile.dietary_preferences:\r\n+#         recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+#     else:\r\n+#         recetas_filtradas = recetas_df\r\n+#     margen_calorias = 100\r\n+#     recetas_filtradas = recetas_filtradas[\r\n+#         (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+#         (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+#     ]\r\n+#     recetas_recomendadas = []\r\n+#     for _ in range(user_profile.meals_per_day):\r\n+#         if len(recetas_filtradas) > 0:\r\n+#             receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+#             recetas_recomendadas.append(receta)\r\n+#         else:\r\n+#             receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+#             recetas_recomendadas.append(receta)\r\n+#     return recetas_recomendadas\r\n \r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  \r\n-        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n-        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n+# def generar_plan_30_dias(user_profile: UserProfile):\r\n+#     plan_dias = []\r\n+#     for semana in range(4):  \r\n+#         ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+#         recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+#         for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+#             dia_plan = {\r\n+#                 \"dia\": dia,\r\n+#                 \"ejercicios\": ejercicios_dia,\r\n+#                 \"recetas\": recetas_dia\r\n+#             }\r\n+#             plan_dias.append(dia_plan)\r\n+#     return {\"dias\": plan_dias}\r\n \r\n-@app.post(\"/update_plan\")\r\n-def update_plan(progress_data: ProgressData, token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-        updated_plan = {\r\n-            \"mensaje\": \"Plan actualizado en base al progreso semanal\",\r\n-            \"peso_registrado\": progress_data.weight,\r\n-            \"horas_suenio\": progress_data.hoursSleep\r\n-        }\r\n-        return updated_plan\r\n-    except Exception as e:\r\n-        print(\"Error al actualizar el plan:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al actualizar el plan\")\r\n+# @app.post(\"/update_plan\")\r\n+# def update_plan(progress_data: ProgressData, token: str = Depends(oauth2_scheme)):\r\n+#     try:\r\n+#         updated_plan = {\r\n+#             \"mensaje\": \"Plan actualizado en base al progreso semanal\",\r\n+#             \"peso_registrado\": progress_data.weight,\r\n+#             \"horas_suenio\": progress_data.hoursSleep\r\n+#         }\r\n+#         return updated_plan\r\n+#     except Exception as e:\r\n+#         print(\"Error al actualizar el plan:\", e)\r\n+#         raise HTTPException(status_code=500, detail=\"Error al actualizar el plan\")\r\n \r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n+# @app.post(\"/generate_plan/\")\r\n+# def generate_plan(user_profile: UserProfile):\r\n+#     if user_profile.activity_level not in [\r\n+#         \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+#     ]:\r\n+#         raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+#     if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+#         raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+#     plan = generar_plan_30_dias(user_profile)\r\n+#     return plan\r\n \r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n+# @app.post(\"/api/reset-plan\")\r\n+# async def reset_plan():\r\n+#     return {\"success\": True}\r\n \r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan(token: str = Depends(oauth2_scheme)):\r\n-    user_has_plan = False\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n-from fastapi import FastAPI, HTTPException, Depends\r\n-from fastapi.middleware.cors import CORSMiddleware\r\n-from pydantic import BaseModel, Field\r\n-from typing import List, Optional\r\n-import pandas as pd\r\n-import numpy as np\r\n-import os\r\n-import tensorflow as tf\r\n-from fastapi.security import OAuth2PasswordBearer\r\n-\r\n-app = FastAPI()\r\n-\r\n-# Configuración CORS\r\n-app.add_middleware(\r\n-    CORSMiddleware,\r\n-    allow_origins=[\"http://localhost:3000\"],\r\n-    allow_credentials=True,\r\n-    allow_methods=[\"*\"],\r\n-    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n-)\r\n-\r\n-# Rutas de autenticación y seguridad\r\n-oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n-\r\n-# Cargar los datasets usando rutas absolutas\r\n-base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n-\r\n-ejercicios_df = pd.read_csv(ejercicios_path)\r\n-recetas_df = pd.read_csv(recetas_path)\r\n-\r\n-# Preprocesamiento de los datasets\r\n-ejercicios_df.dropna(inplace=True)\r\n-recetas_df.dropna(inplace=True)\r\n-\r\n-# Calcular las calorías en recetas\r\n-recetas_df['Calories'] = (\r\n-    recetas_df['Protein(g)'].astype(float) * 4 +\r\n-    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-    recetas_df['Fat(g)'].astype(float) * 9\r\n-)\r\n-ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n-\r\n-class UserProfile(BaseModel):\r\n-    weight: float\r\n-    height: float\r\n-    age: int\r\n-    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-    routine_preference: str\r\n-    dietary_preferences: Optional[List[str]] = []\r\n-    equipment_available: Optional[List[str]] = []\r\n-    meals_per_day: int = 3\r\n-\r\n-class ProgressData(BaseModel):\r\n-    weight: float\r\n-    hoursSleep: float\r\n-\r\n-# Función para cargar el modelo en tiempo de ejecución\r\n-def cargar_modelo():\r\n-    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-    try:\r\n-        model = tf.keras.models.load_model(model_path)\r\n-        return model\r\n-    except Exception as e:\r\n-        print(\"Error al cargar el modelo:\", e)\r\n-        return None\r\n-\r\n-# Funciones de cálculo para TMB y TDEE\r\n-def calcular_tmb(weight, height, age, gender):\r\n-    if gender == 'male':\r\n-        return 10 * weight + 6.25 * height - 5 * age + 5\r\n-    else:\r\n-        return 10 * weight + 6.25 * height - 5 * age - 161\r\n-\r\n-def calcular_tdee(tmb, activity_level):\r\n-    activity_factors = {\r\n-        'sedentary': 1.2,\r\n-        'lightly_active': 1.375,\r\n-        'moderately_active': 1.55,\r\n-        'very_active': 1.725,\r\n-        'super_active': 1.9\r\n-    }\r\n-    return tmb * activity_factors[activity_level]\r\n-\r\n-def calcular_calorias_diarias(user_profile: UserProfile):\r\n-    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n-\r\n-    if user_profile.fitness_goal == 'lose_weight':\r\n-        calorias_diarias = tdee - 500\r\n-    elif user_profile.fitness_goal == 'gain_muscle':\r\n-        calorias_diarias = tdee + 500\r\n-    else:\r\n-        calorias_diarias = tdee\r\n-\r\n-    return calorias_diarias\r\n-\r\n-def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n-    \r\n-    if user_profile.equipment_available:\r\n-        ejercicios_filtrados = ejercicios_filtrados[\r\n-            ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)\r\n-        ]\r\n-    \r\n-    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n-        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] != 'body weight']\r\n-    \r\n-    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n-\r\n-\r\n-def recomendar_recetas(user_profile: UserProfile):\r\n-    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-    if user_profile.dietary_preferences:\r\n-        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-    else:\r\n-        recetas_filtradas = recetas_df\r\n-    margen_calorias = 100\r\n-    recetas_filtradas = recetas_filtradas[\r\n-        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-    ]\r\n-    recetas_recomendadas = []\r\n-    for _ in range(user_profile.meals_per_day):\r\n-        if len(recetas_filtradas) > 0:\r\n-            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-        else:\r\n-            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-            recetas_recomendadas.append(receta)\r\n-    return recetas_recomendadas\r\n-\r\n-def generar_plan_30_dias(user_profile: UserProfile):\r\n-    plan_dias = []\r\n-    for semana in range(4):  \r\n-        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n-        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n-        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-            dia_plan = {\r\n-                \"dia\": dia,\r\n-                \"ejercicios\": ejercicios_dia,\r\n-                \"recetas\": recetas_dia\r\n-            }\r\n-            plan_dias.append(dia_plan)\r\n-    return {\"dias\": plan_dias}\r\n-\r\n-@app.post(\"/update_plan\")\r\n-def update_plan(progress_data: ProgressData, token: str = Depends(oauth2_scheme)):\r\n-    try:\r\n-        updated_plan = {\r\n-            \"mensaje\": \"Plan actualizado en base al progreso semanal\",\r\n-            \"peso_registrado\": progress_data.weight,\r\n-            \"horas_suenio\": progress_data.hoursSleep\r\n-        }\r\n-        return updated_plan\r\n-    except Exception as e:\r\n-        print(\"Error al actualizar el plan:\", e)\r\n-        raise HTTPException(status_code=500, detail=\"Error al actualizar el plan\")\r\n-\r\n-@app.post(\"/generate_plan/\")\r\n-def generate_plan(user_profile: UserProfile):\r\n-    if user_profile.activity_level not in [\r\n-        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-    ]:\r\n-        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-    plan = generar_plan_30_dias(user_profile)\r\n-    return plan\r\n-\r\n-@app.post(\"/api/reset-plan\")\r\n-async def reset_plan():\r\n-    return {\"success\": True}\r\n-\r\n-@app.get(\"/api/check-plan\")\r\n-async def check_plan(token: str = Depends(oauth2_scheme)):\r\n-    user_has_plan = False\r\n-    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+# @app.get(\"/api/check-plan\")\r\n+# async def check_plan(token: str = Depends(oauth2_scheme)):\r\n+#     user_has_plan = False\r\n+#     plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+#     return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1731007855564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,183 +1,190 @@\n-# from fastapi import FastAPI, HTTPException, Depends\r\n-# from fastapi.middleware.cors import CORSMiddleware\r\n-# from pydantic import BaseModel, Field\r\n-# from typing import List, Optional\r\n-# import pandas as pd\r\n-# import numpy as np\r\n-# import os\r\n-# import tensorflow as tf\r\n-# from fastapi.security import OAuth2PasswordBearer\r\n+from fastapi import FastAPI, HTTPException, Depends\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+from fastapi.security import OAuth2PasswordBearer\r\n \r\n-# app = FastAPI()\r\n+app = FastAPI()\r\n \r\n-# # Configuración CORS\r\n-# app.add_middleware(\r\n-#     CORSMiddleware,\r\n-#     allow_origins=[\"http://localhost:3000\"],\r\n-#     allow_credentials=True,\r\n-#     allow_methods=[\"*\"],\r\n-#     allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n-# )\r\n+# Configuración CORS\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"http://localhost:3000\"],  # Cambia a \"*\" solo en desarrollo\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n+)\r\n \r\n-# # Rutas de autenticación y seguridad\r\n-# oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n+# Rutas de autenticación y seguridad\r\n+oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n \r\n-# # Cargar los datasets usando rutas absolutas\r\n-# base_dir = os.path.dirname(os.path.abspath(__file__))\r\n-# ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n-# recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n \r\n-# ejercicios_df = pd.read_csv(ejercicios_path)\r\n-# recetas_df = pd.read_csv(recetas_path)\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n \r\n-# # Preprocesamiento de los datasets\r\n-# ejercicios_df.dropna(inplace=True)\r\n-# recetas_df.dropna(inplace=True)\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n \r\n-# # Calcular las calorías en recetas\r\n-# recetas_df['Calories'] = (\r\n-#     recetas_df['Protein(g)'].astype(float) * 4 +\r\n-#     recetas_df['Carbs(g)'].astype(float) * 4 +\r\n-#     recetas_df['Fat(g)'].astype(float) * 9\r\n-# )\r\n-# ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n \r\n-# class UserProfile(BaseModel):\r\n-#     weight: float\r\n-#     height: float\r\n-#     age: int\r\n-#     gender: str = Field(..., pattern=\"^(male|female)$\")\r\n-#     activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n-#     fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n-#     routine_preference: str\r\n-#     dietary_preferences: Optional[List[str]] = []\r\n-#     equipment_available: Optional[List[str]] = []\r\n-#     meals_per_day: int = 3\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n \r\n-# class ProgressData(BaseModel):\r\n-#     weight: float\r\n-#     hoursSleep: float\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n \r\n-# # Función para cargar el modelo en tiempo de ejecución\r\n-# def cargar_modelo():\r\n-#     model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n-#     try:\r\n-#         model = tf.keras.models.load_model(model_path)\r\n-#         return model\r\n-#     except Exception as e:\r\n-#         print(\"Error al cargar el modelo:\", e)\r\n-#         return None\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n \r\n-# # Funciones de cálculo para TMB y TDEE\r\n-# def calcular_tmb(weight, height, age, gender):\r\n-#     if gender == 'male':\r\n-#         return 10 * weight + 6.25 * height - 5 * age + 5\r\n-#     else:\r\n-#         return 10 * weight + 6.25 * height - 5 * age - 161\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n \r\n-# def calcular_tdee(tmb, activity_level):\r\n-#     activity_factors = {\r\n-#         'sedentary': 1.2,\r\n-#         'lightly_active': 1.375,\r\n-#         'moderately_active': 1.55,\r\n-#         'very_active': 1.725,\r\n-#         'super_active': 1.9\r\n-#     }\r\n-#     return tmb * activity_factors[activity_level]\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n \r\n-# def calcular_calorias_diarias(user_profile: UserProfile):\r\n-#     tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n-#     tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n \r\n-#     if user_profile.fitness_goal == 'lose_weight':\r\n-#         calorias_diarias = tdee - 500\r\n-#     elif user_profile.fitness_goal == 'gain_muscle':\r\n-#         calorias_diarias = tdee + 500\r\n-#     else:\r\n-#         calorias_diarias = tdee\r\n+    return calorias_diarias\r\n \r\n-#     return calorias_diarias\r\n-\r\n-# def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n-#     ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n     \r\n-#     if user_profile.equipment_available:\r\n-#         ejercicios_filtrados = ejercicios_filtrados[\r\n-#             ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)\r\n-#         ]\r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[\r\n+            ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)\r\n+        ]\r\n     \r\n-#     if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n-#         ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] != 'body weight']\r\n+   \r\n+    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] != 'body weight']\r\n     \r\n-#     return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+    # Selección final de ejercicios\r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n \r\n \r\n-# def recomendar_recetas(user_profile: UserProfile):\r\n-#     calorias_diarias = calcular_calorias_diarias(user_profile)\r\n-#     calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n-#     if user_profile.dietary_preferences:\r\n-#         recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n-#     else:\r\n-#         recetas_filtradas = recetas_df\r\n-#     margen_calorias = 100\r\n-#     recetas_filtradas = recetas_filtradas[\r\n-#         (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n-#         (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n-#     ]\r\n-#     recetas_recomendadas = []\r\n-#     for _ in range(user_profile.meals_per_day):\r\n-#         if len(recetas_filtradas) > 0:\r\n-#             receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n-#             recetas_recomendadas.append(receta)\r\n-#         else:\r\n-#             receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n-#             recetas_recomendadas.append(receta)\r\n-#     return recetas_recomendadas\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n \r\n-# def generar_plan_30_dias(user_profile: UserProfile):\r\n-#     plan_dias = []\r\n-#     for semana in range(4):  \r\n-#         ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n-#         recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n-#         for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n-#             dia_plan = {\r\n-#                 \"dia\": dia,\r\n-#                 \"ejercicios\": ejercicios_dia,\r\n-#                 \"recetas\": recetas_dia\r\n-#             }\r\n-#             plan_dias.append(dia_plan)\r\n-#     return {\"dias\": plan_dias}\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  \r\n+        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n \r\n-# @app.post(\"/update_plan\")\r\n-# def update_plan(progress_data: ProgressData, token: str = Depends(oauth2_scheme)):\r\n-#     try:\r\n-#         updated_plan = {\r\n-#             \"mensaje\": \"Plan actualizado en base al progreso semanal\",\r\n-#             \"peso_registrado\": progress_data.weight,\r\n-#             \"horas_suenio\": progress_data.hoursSleep\r\n-#         }\r\n-#         return updated_plan\r\n-#     except Exception as e:\r\n-#         print(\"Error al actualizar el plan:\", e)\r\n-#         raise HTTPException(status_code=500, detail=\"Error al actualizar el plan\")\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    model = cargar_modelo()\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        if len(user_data) != 7 or any(len(day_data) != 5 for day_data in user_data):\r\n+            raise HTTPException(status_code=400, detail=\"Formato de datos inválido. Se esperan 7 días de datos con 5 valores cada uno.\")\r\n+        \r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n \r\n-# @app.post(\"/generate_plan/\")\r\n-# def generate_plan(user_profile: UserProfile):\r\n-#     if user_profile.activity_level not in [\r\n-#         \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n-#     ]:\r\n-#         raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n-#     if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n-#         raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n-#     plan = generar_plan_30_dias(user_profile)\r\n-#     return plan\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n \r\n-# @app.post(\"/api/reset-plan\")\r\n-# async def reset_plan():\r\n-#     return {\"success\": True}\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n \r\n-# @app.get(\"/api/check-plan\")\r\n-# async def check_plan(token: str = Depends(oauth2_scheme)):\r\n-#     user_has_plan = False\r\n-#     plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n-#     return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan(token: str = Depends(oauth2_scheme)):\r\n+    user_has_plan = False\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                },
                {
                    "date": 1731013535931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,190 @@\n+from fastapi import FastAPI, HTTPException, Depends\r\n+from fastapi.middleware.cors import CORSMiddleware\r\n+from pydantic import BaseModel, Field\r\n+from typing import List, Optional\r\n+import pandas as pd\r\n+import numpy as np\r\n+import os\r\n+import tensorflow as tf\r\n+from fastapi.security import OAuth2PasswordBearer\r\n+\r\n+app = FastAPI()\r\n+\r\n+# Configuración CORS\r\n+app.add_middleware(\r\n+    CORSMiddleware,\r\n+    allow_origins=[\"http://localhost:3000\"],  # Cambia a \"*\" solo en desarrollo\r\n+    allow_credentials=True,\r\n+    allow_methods=[\"*\"],\r\n+    allow_headers=[\"Authorization\", \"Content-Type\", \"Accept\"],\r\n+)\r\n+\r\n+# Rutas de autenticación y seguridad\r\n+oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\r\n+\r\n+# Cargar los datasets usando rutas absolutas\r\n+base_dir = os.path.dirname(os.path.abspath(__file__))\r\n+ejercicios_path = os.path.join(base_dir, 'data', 'fitness_exercises_enriched.csv')\r\n+recetas_path = os.path.join(base_dir, 'data', 'enriched_recipes_data.csv')\r\n+\r\n+ejercicios_df = pd.read_csv(ejercicios_path)\r\n+recetas_df = pd.read_csv(recetas_path)\r\n+\r\n+# Preprocesamiento de los datasets\r\n+ejercicios_df.dropna(inplace=True)\r\n+recetas_df.dropna(inplace=True)\r\n+\r\n+# Calcular las calorías en recetas\r\n+recetas_df['Calories'] = (\r\n+    recetas_df['Protein(g)'].astype(float) * 4 +\r\n+    recetas_df['Carbs(g)'].astype(float) * 4 +\r\n+    recetas_df['Fat(g)'].astype(float) * 9\r\n+)\r\n+ejercicios_df['Calories_Burned'] = ejercicios_df['Calories_Burned'].astype(float)\r\n+\r\n+class UserProfile(BaseModel):\r\n+    weight: float\r\n+    height: float\r\n+    age: int\r\n+    gender: str = Field(..., pattern=\"^(male|female)$\")\r\n+    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\")\r\n+    fitness_goal: str = Field(..., pattern=\"^(lose_weight|gain_muscle|maintain)$\")\r\n+    routine_preference: str\r\n+    dietary_preferences: Optional[List[str]] = []\r\n+    equipment_available: Optional[List[str]] = []\r\n+    meals_per_day: int = 3\r\n+\r\n+# Función para cargar el modelo en tiempo de ejecución\r\n+def cargar_modelo():\r\n+    model_path = os.path.join(base_dir, 'modelo_nutria_lstm.h5')\r\n+    try:\r\n+        model = tf.keras.models.load_model(model_path)\r\n+        return model\r\n+    except Exception as e:\r\n+        print(\"Error al cargar el modelo:\", e)\r\n+        return None\r\n+\r\n+# Funciones de cálculo para TMB y TDEE\r\n+def calcular_tmb(weight, height, age, gender):\r\n+    if gender == 'male':\r\n+        return 10 * weight + 6.25 * height - 5 * age + 5\r\n+    else:\r\n+        return 10 * weight + 6.25 * height - 5 * age - 161\r\n+\r\n+def calcular_tdee(tmb, activity_level):\r\n+    activity_factors = {\r\n+        'sedentary': 1.2,\r\n+        'lightly_active': 1.375,\r\n+        'moderately_active': 1.55,\r\n+        'very_active': 1.725,\r\n+        'super_active': 1.9\r\n+    }\r\n+    return tmb * activity_factors[activity_level]\r\n+\r\n+def calcular_calorias_diarias(user_profile: UserProfile):\r\n+    tmb = calcular_tmb(user_profile.weight, user_profile.height, user_profile.age, user_profile.gender)\r\n+    tdee = calcular_tdee(tmb, user_profile.activity_level)\r\n+\r\n+    if user_profile.fitness_goal == 'lose_weight':\r\n+        calorias_diarias = tdee - 500\r\n+    elif user_profile.fitness_goal == 'gain_muscle':\r\n+        calorias_diarias = tdee + 500\r\n+    else:\r\n+        calorias_diarias = tdee\r\n+\r\n+    return calorias_diarias\r\n+\r\n+def recomendar_ejercicios_con_intensidad(intensidad, user_profile):\r\n+    ejercicios_filtrados = ejercicios_df[ejercicios_df['Intensity'] == intensidad]\r\n+    \r\n+    if user_profile.equipment_available:\r\n+        ejercicios_filtrados = ejercicios_filtrados[\r\n+            ejercicios_filtrados['equipment'].isin(user_profile.equipment_available)\r\n+        ]\r\n+    \r\n+   \r\n+    if ejercicios_filtrados.empty or len(ejercicios_filtrados) < 5:\r\n+        ejercicios_filtrados = ejercicios_df[ejercicios_df['equipment'] != 'body weight']\r\n+    \r\n+    # Selección final de ejercicios\r\n+    return ejercicios_filtrados.sample(n=5).to_dict('records') if len(ejercicios_filtrados) >= 5 else ejercicios_filtrados.to_dict('records')\r\n+\r\n+\r\n+def recomendar_recetas(user_profile: UserProfile):\r\n+    calorias_diarias = calcular_calorias_diarias(user_profile)\r\n+    calorias_por_comida = calorias_diarias / user_profile.meals_per_day\r\n+    if user_profile.dietary_preferences:\r\n+        recetas_filtradas = recetas_df[recetas_df['Diet_type'].isin(user_profile.dietary_preferences)]\r\n+    else:\r\n+        recetas_filtradas = recetas_df\r\n+    margen_calorias = 100\r\n+    recetas_filtradas = recetas_filtradas[\r\n+        (recetas_filtradas['Calories'] >= calorias_por_comida - margen_calorias) &\r\n+        (recetas_filtradas['Calories'] <= calorias_por_comida + margen_calorias)\r\n+    ]\r\n+    recetas_recomendadas = []\r\n+    for _ in range(user_profile.meals_per_day):\r\n+        if len(recetas_filtradas) > 0:\r\n+            receta = recetas_filtradas.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+        else:\r\n+            receta = recetas_df.sample(n=1).to_dict('records')[0]\r\n+            recetas_recomendadas.append(receta)\r\n+    return recetas_recomendadas\r\n+\r\n+def generar_plan_30_dias(user_profile: UserProfile):\r\n+    plan_dias = []\r\n+    for semana in range(4):  \r\n+        ejercicios_semanales = [recomendar_ejercicios_con_intensidad(\"moderate\", user_profile) for _ in range(7)]\r\n+        recetas_semanales = [recomendar_recetas(user_profile) for _ in range(7)]\r\n+        for dia, (ejercicios_dia, recetas_dia) in enumerate(zip(ejercicios_semanales, recetas_semanales), start=1 + semana * 7):\r\n+            dia_plan = {\r\n+                \"dia\": dia,\r\n+                \"ejercicios\": ejercicios_dia,\r\n+                \"recetas\": recetas_dia\r\n+            }\r\n+            plan_dias.append(dia_plan)\r\n+    return {\"dias\": plan_dias}\r\n+\r\n+@app.post(\"/predict_progreso\")\r\n+def predict_progreso(user_data: List[List[float]]):\r\n+    model = cargar_modelo()\r\n+    if model is None:\r\n+        raise HTTPException(status_code=500, detail=\"Modelo LSTM no cargado.\")\r\n+    try:\r\n+        if len(user_data) != 7 or any(len(day_data) != 5 for day_data in user_data):\r\n+            raise HTTPException(status_code=400, detail=\"Formato de datos inválido. Se esperan 7 días de datos con 5 valores cada uno.\")\r\n+        \r\n+        datos_recientes = np.array(user_data).reshape((1, 7, len(user_data[0])))\r\n+        prediccion = model.predict(datos_recientes)\r\n+        peso_futuro, rendimiento_futuro, meta_nutricional_futura = prediccion[0]\r\n+        return {\r\n+            \"peso_futuro\": peso_futuro,\r\n+            \"rendimiento_futuro\": rendimiento_futuro,\r\n+            \"meta_nutricional_futura\": meta_nutricional_futura\r\n+        }\r\n+    except Exception as e:\r\n+        print(\"Error en predicción:\", e)\r\n+        raise HTTPException(status_code=500, detail=\"Error al hacer la predicción.\")\r\n+\r\n+        \r\n+@app.post(\"/generate_plan/\")\r\n+def generate_plan(user_profile: UserProfile):\r\n+    if user_profile.activity_level not in [\r\n+        \"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"\r\n+    ]:\r\n+        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n+    if user_profile.fitness_goal not in [\"lose_weight\", \"gain_muscle\", \"maintain\"]:\r\n+        raise HTTPException(status_code=400, detail=\"Objetivo de fitness inválido\")\r\n+    plan = generar_plan_30_dias(user_profile)\r\n+    return plan\r\n+\r\n+@app.post(\"/api/reset-plan\")\r\n+async def reset_plan():\r\n+    return {\"success\": True}\r\n+\r\n+@app.get(\"/api/check-plan\")\r\n+async def check_plan(token: str = Depends(oauth2_scheme)):\r\n+    user_has_plan = False\r\n+    plan_data = {\"name\": \"Plan de ejemplo\"} if user_has_plan else None\r\n+    return {\"hasPlan\": user_has_plan, \"plan\": plan_data}\r\n"
                }
            ],
            "date": 1730404422682,
            "name": "Commit-0",
            "content": "from fastapi import FastAPI, HTTPException\r\nfrom fastapi.middleware.cors import CORSMiddleware\r\nfrom pydantic import BaseModel, Field\r\nfrom typing import List, Optional\r\n\r\napp = FastAPI()\r\n\r\napp.add_middleware(\r\n    CORSMiddleware,\r\n    allow_origins=[\"*\"],\r\n    allow_credentials=True,\r\n    allow_methods=[\"*\"],\r\n    allow_headers=[\"*\"],\r\n)\r\n\r\nclass UserData(BaseModel):\r\n    weight: float = Field(..., description=\"Peso del usuario en Kilogramos\")\r\n    height: float = Field(..., description=\"Altura del usuario en centímetros\")\r\n    age: int = Field(..., description=\"Edad del usuario\")\r\n    gender: str = Field(..., pattern=\"^(male|female)$\", description=\"Género del usuario\")\r\n    activity_level: str = Field(..., pattern=\"^(sedentary|lightly_active|moderately_active|very_active|super_active)$\", description=\"Nivel de actividad\")\r\n    goals: List[str] = Field(..., description=\"Objetivos de acondicionamiento del usuario\")\r\n    routine_preference: str = Field(..., description=\"Preferencia de rutina del usuario\")\r\n    dietary_restrictions: Optional[List[str]] = Field(default=[], description=\"Restricciones dietéticas\")\r\n\r\ndef calcular_tmb(weight, height, age, gender):\r\n    if gender == 'male':\r\n        return 88.362 + (13.397 * weight) + (4.799 * height) - (5.677 * age)\r\n    else:\r\n        return 447.593 + (9.247 * weight) + (3.098 * height) - (4.330 * age)\r\n\r\ndef calcular_tdee(tmb, activity_level):\r\n    activity_factors = {\r\n        'sedentary': 1.2,\r\n        'lightly_active': 1.375,\r\n        'moderately_active': 1.55,\r\n        'very_active': 1.725,\r\n        'super_active': 1.9\r\n    }\r\n    return tmb * activity_factors[activity_level]\r\n\r\ndef generar_plan_macronutrientes(calories, goals):\r\n    if 'Ganar masa muscular' in goals:\r\n        protein_ratio = 0.35\r\n        carb_ratio = 0.45\r\n        fat_ratio = 0.20\r\n    elif 'Perder peso' in goals:\r\n        protein_ratio = 0.40\r\n        carb_ratio = 0.35\r\n        fat_ratio = 0.25\r\n    else:\r\n        protein_ratio = 0.30\r\n        carb_ratio = 0.50\r\n        fat_ratio = 0.20\r\n\r\n    protein_grams = (calories * protein_ratio) / 4\r\n    carb_grams = (calories * carb_ratio) / 4\r\n    fat_grams = (calories * fat_ratio) / 9\r\n\r\n    return {\r\n        'proteins': protein_grams,\r\n        'carbs': carb_grams,\r\n        'fats': fat_grams\r\n    }\r\n\r\ndef generar_rutina_ejercicio(activity_level, routine_preference):\r\n    routines = {\r\n        'Ejercicio en casa': \"Rutina en casa con bandas elásticas y pesas.\",\r\n        'Ejercicio en el gimnasio': \"Entrenamiento en el gimnasio con pesas y HIIT.\",\r\n        'Ejercicio al aire libre': \"Correr, ciclismo o entrenamiento funcional al aire libre.\",\r\n        'No estoy seguro': \"Ejercicios mixtos, combinando diferentes tipos de entrenamiento.\"\r\n    }\r\n    selected_routines = [routines[pref.strip()] for pref in routine_preference.split(',') if pref.strip() in routines]\r\n    return \" / \".join(selected_routines) if selected_routines else \"Rutina personalizada sugerida según nivel de actividad.\"\r\n\r\ndef generate_recommendations(data: UserData):\r\n    tmb = calcular_tmb(data.weight, data.height, data.age, data.gender)\r\n    tdee = calcular_tdee(tmb, data.activity_level)\r\n    calorias_ajustadas = tdee\r\n    plan_macronutrientes = generar_plan_macronutrientes(calorias_ajustadas, data.goals)\r\n    exercise_plan = generar_rutina_ejercicio(data.activity_level, data.routine_preference)\r\n    return {\r\n        \"exercise_plan\": exercise_plan,\r\n        \"nutrition_plan\": {\r\n            \"calories\": calorias_ajustadas,\r\n            \"protein\": plan_macronutrientes['proteins'],\r\n            \"carbs\": plan_macronutrientes['carbs'],\r\n            \"fats\": plan_macronutrientes['fats']\r\n        }\r\n    }\r\n\r\n@app.post(\"/generate_plan/\")\r\ndef generate_plan(user_data: UserData):\r\n    if user_data.activity_level not in [\"sedentary\", \"lightly_active\", \"moderately_active\", \"very_active\", \"super_active\"]:\r\n        raise HTTPException(status_code=400, detail=\"Nivel de actividad inválido\")\r\n    recommendations = generate_recommendations(user_data)\r\n    return recommendations\r\n"
        }
    ]
}