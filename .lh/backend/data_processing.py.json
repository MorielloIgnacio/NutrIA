{
    "sourceFile": "backend/data_processing.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1730761844294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1730761865637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+import numpy as np\r\n+import pandas as pd\r\n+from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\r\n+\r\n+def cargar_datos_usuario(ruta):\r\n+    \"\"\"\r\n+    Cargar los datos históricos del usuario desde un archivo CSV.\r\n+    \"\"\"\r\n+    user_data = pd.read_csv(ruta)\r\n+    return user_data\r\n+\r\n+def generar_secuencias(user_data, target_column, time_steps=7):\r\n+    \"\"\"\r\n+    Genera secuencias de datos para la columna de objetivo `target_column`.\r\n+    time_steps: número de días anteriores a considerar.\r\n+    \"\"\"\r\n+    data = user_data.copy()\r\n+    data = (data - data.mean()) / data.std()  # Normalización de datos\r\n+\r\n+    X = data.drop(columns=[target_column]).values\r\n+    y = data[target_column].values\r\n+\r\n+    generator = TimeseriesGenerator(X, y, length=time_steps, batch_size=32)\r\n+    return generator\r\n"
                },
                {
                    "date": 1730761884718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,24 @@\n+import numpy as np\r\n+import pandas as pd\r\n+from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator # type: ignore\r\n+\r\n+def cargar_datos_usuario(ruta):\r\n+    \"\"\"\r\n+    Cargar los datos históricos del usuario desde un archivo CSV.\r\n+    \"\"\"\r\n+    user_data = pd.read_csv(ruta)\r\n+    return user_data\r\n+\r\n+def generar_secuencias(user_data, target_column, time_steps=7):\r\n+    \"\"\"\r\n+    Genera secuencias de datos para la columna de objetivo `target_column`.\r\n+    time_steps: número de días anteriores a considerar.\r\n+    \"\"\"\r\n+    data = user_data.copy()\r\n+    data = (data - data.mean()) / data.std()  # Normalización de datos\r\n+\r\n+    X = data.drop(columns=[target_column]).values\r\n+    y = data[target_column].values\r\n+\r\n+    generator = TimeseriesGenerator(X, y, length=time_steps, batch_size=32)\r\n+    return generator\r\n"
                },
                {
                    "date": 1730761946104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import numpy as np\r\n+import pandas as pd\r\n+from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator # type: ignore\r\n+\r\n+def cargar_datos_usuario(ruta):\r\n+    \"\"\"\r\n+    Cargar los datos históricos del usuario desde un archivo CSV.\r\n+    \"\"\"\r\n+    user_data = pd.read_csv(ruta)\r\n+    return user_data\r\n+\r\n+def generar_secuencias(user_data, target_column, time_steps=7):\r\n+    \"\"\"\r\n+    Genera secuencias de datos para la columna de objetivo `target_column`.\r\n+    time_steps: número de días anteriores a considerar.\r\n+    \"\"\"\r\n+    data = user_data.copy()\r\n+    data = (data - data.mean()) / data.std()  # Normalización de datos\r\n+\r\n+    X = data.drop(columns=[target_column]).values\r\n+    y = data[target_column].values\r\n+\r\n+    generator = TimeseriesGenerator(X, y, length=time_steps, batch_size=32)\r\n+    return generator\r\n+\r\n+if __name__ == \"__main__\":\r\n+    ruta = \"user_data.csv\"\r\n+    user_data = cargar_datos_usuario(ruta)\r\n+    generator = generar_secuencias(user_data, target_column='peso')\r\n+    print(\"Secuencias generadas:\", len(generator))\r\n+    for X, y in generator:\r\n+        print(\"Entrada (X):\", X)\r\n+        print(\"Salida (y):\", y)\r\n+        break\r\n"
                },
                {
                    "date": 1730762097213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,41 @@\n+import numpy as np\r\n+import pandas as pd\r\n+from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator # type: ignore\r\n+\r\n+def cargar_datos_usuario(ruta):\r\n+    \"\"\"\r\n+    Cargar los datos históricos del usuario desde un archivo CSV.\r\n+    \"\"\"\r\n+    user_data = pd.read_csv(ruta)\r\n+    return user_data\r\n+\r\n+def generar_secuencias(user_data, target_column, time_steps=7):\r\n+    \"\"\"\r\n+    Genera secuencias de datos para la columna de objetivo `target_column`.\r\n+    time_steps: número de días anteriores a considerar.\r\n+    \"\"\"\r\n+    data = user_data.copy()\r\n+    \r\n+    # Filtramos solo las columnas numéricas para la normalización\r\n+    data = data.select_dtypes(include=[np.number])\r\n+    \r\n+    # Normalización de datos numéricos\r\n+    data = (data - data.mean()) / data.std()  \r\n+\r\n+    # Extraemos la entrada (X) y el objetivo (y)\r\n+    X = data.drop(columns=[target_column]).values\r\n+    y = data[target_column].values\r\n+\r\n+    generator = TimeseriesGenerator(X, y, length=time_steps, batch_size=32)\r\n+    return generator\r\n+\r\n+\r\n+if __name__ == \"__main__\":\r\n+    ruta = \"user_data.csv\"\r\n+    user_data = cargar_datos_usuario(ruta)\r\n+    generator = generar_secuencias(user_data, target_column='peso')\r\n+    print(\"Secuencias generadas:\", len(generator))\r\n+    for X, y in generator:\r\n+        print(\"Entrada (X):\", X)\r\n+        print(\"Salida (y):\", y)\r\n+        break\r\n"
                },
                {
                    "date": 1730762187623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,41 @@\n+import numpy as np\r\n+import pandas as pd\r\n+from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator # type: ignore\r\n+\r\n+def cargar_datos_usuario(ruta):\r\n+    \"\"\"\r\n+    Cargar los datos históricos del usuario desde un archivo CSV.\r\n+    \"\"\"\r\n+    user_data = pd.read_csv(ruta)\r\n+    return user_data\r\n+\r\n+def generar_secuencias(user_data, target_column, time_steps=3):\r\n+    \"\"\"\r\n+    Genera secuencias de datos para la columna de objetivo `target_column`.\r\n+    time_steps: número de días anteriores a considerar.\r\n+    \"\"\"\r\n+    data = user_data.copy()\r\n+    \r\n+    # Filtramos solo las columnas numéricas para la normalización\r\n+    data = data.select_dtypes(include=[np.number])\r\n+    \r\n+    # Normalización de datos numéricos\r\n+    data = (data - data.mean()) / data.std()  \r\n+\r\n+    # Extraemos la entrada (X) y el objetivo (y)\r\n+    X = data.drop(columns=[target_column]).values\r\n+    y = data[target_column].values\r\n+\r\n+    generator = TimeseriesGenerator(X, y, length=time_steps, batch_size=32)\r\n+    return generator\r\n+\r\n+\r\n+if __name__ == \"__main__\":\r\n+    ruta = \"user_data.csv\"\r\n+    user_data = cargar_datos_usuario(ruta)\r\n+    generator = generar_secuencias(user_data, target_column='peso')\r\n+    print(\"Secuencias generadas:\", len(generator))\r\n+    for X, y in generator:\r\n+        print(\"Entrada (X):\", X)\r\n+        print(\"Salida (y):\", y)\r\n+        break\r\n"
                },
                {
                    "date": 1730762220351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,40 @@\n+import numpy as np\r\n+import pandas as pd\r\n+from tensorflow.keras.preprocessing.sequence import TimeseriesGenerator # type: ignore\r\n+\r\n+def cargar_datos_usuario(ruta):\r\n+    \"\"\"\r\n+    Cargar los datos históricos del usuario desde un archivo CSV.\r\n+    \"\"\"\r\n+    user_data = pd.read_csv(ruta)\r\n+    return user_data\r\n+\r\n+def generar_secuencias(user_data, target_column, time_steps=2):\r\n+    \"\"\"\r\n+    Genera secuencias de datos para la columna de objetivo `target_column`.\r\n+    time_steps: número de días anteriores a considerar.\r\n+    \"\"\"\r\n+    data = user_data.copy()\r\n+    \r\n+    # Filtramos solo las columnas numéricas para la normalización\r\n+    data = data.select_dtypes(include=[np.number])\r\n+    \r\n+    # Normalización de datos numéricos\r\n+    data = (data - data.mean()) / data.std()  \r\n+\r\n+    # Extraemos la entrada (X) y el objetivo (y)\r\n+    X = data.drop(columns=[target_column]).values\r\n+    y = data[target_column].values\r\n+\r\n+    generator = TimeseriesGenerator(X, y, length=time_steps, batch_size=32)\r\n+    return generator\r\n+\r\n+if __name__ == \"__main__\":\r\n+    ruta = \"user_data.csv\"\r\n+    user_data = cargar_datos_usuario(ruta)\r\n+    generator = generar_secuencias(user_data, target_column='peso', time_steps=2)\r\n+    print(\"Secuencias generadas:\", len(generator))\r\n+    for X, y in generator:\r\n+        print(\"Entrada (X):\", X)\r\n+        print(\"Salida (y):\", y)\r\n+        break\r\n"
                }
            ],
            "date": 1730761844294,
            "name": "Commit-0",
            "content": "import numpy as np\r\nimport pandas as pd\r\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\r\n\r\ndef cargar_datos_usuario(ruta):\r\n    \"\"\"\r\n    Cargar los datos históricos del usuario desde un archivo CSV.\r\n    \"\"\"\r\n    user_data = pd.read_csv(ruta)\r\n    return user_data\r\n\r\ndef generar_secuencias(user_data, target_column, time_steps=7):\r\n    \"\"\"\r\n    Genera secuencias de datos para la columna de objetivo `target_column`.\r\n    time_steps: número de días anteriores a considerar.\r\n    \"\"\"\r\n    data = user_data.copy()\r\n    data = (data - data.mean()) / data.std()  # Normalización de datos\r\n\r\n    X = data.drop(columns=[target_column]).values\r\n    y = data[target_column].values\r\n\r\n    generator = TimeseriesGenerator(X, y, length=time_steps, batch_size=32)\r\n    return generator\r\n"
        }
    ]
}